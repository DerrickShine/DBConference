Overshadow: a virtualization-based approach to retrofitting protection in commodity operating systems,Xiaoxin Chen; Tal Garfinkel; E Christopher Lewis; Pratap Subrahmanyam; Carl A Waldspurger; Dan Boneh; Jeffrey Dwoskin; Dan RK Ports,Abstract Commodity operating systems entrusted with securing sensitive data areremarkably large and complex; and consequently; frequently prone to compromise. Toaddress this limitation; we introduce a virtual-machine-based system called Overshadowthat protects the privacy and integrity of application data; even in the event of a totalOScompromise. Overshadow presents an application with a normal view of its resources;but the OS with an encrypted view. This allows the operating system to carry out the complextask of managing an application's resources; without allowing it to read or modify them.Thus; Overshadow offers a last line of defense for application data.,ACM SIGOPS Operating Systems Review,2008,442
Arrakis: The operating system is the control plane,Simon Peter; Jialin Li; Irene Zhang; Dan RK Ports; Doug Woos; Arvind Krishnamurthy; Thomas Anderson; Timothy Roscoe,Abstract Recent device hardware trends enable a new approach to the design of networkserver operating systems. In a traditional operating system; the kernel mediates access todevice hardware by server applications to enforce process isolation as well as network anddisk security. We have designed and implemented a new operating system; Arrakis; thatsplits the traditional role of the kernel in two. Applications have direct access to virtualizedI/O devices; allowing most I/O operations to skip the kernel entirely; while the kernel is re-engineered to provide network and disk protection without kernel mediation of everyoperation. We describe the hardware and software changes needed to take advantage ofthis new abstraction; and we illustrate its power by showing improvements of 2 to 5× inlatency and 9× throughput for a popular persistent NoSQL store relative to a well-tuned …,ACM Transactions on Computer Systems (TOCS),2016,170
Transparent memory-mapped emulation of I/O calls,*,A virtual-machine-based system provides a mechanism to implement application file I/Ooperations of protected data by implementing the I/O operations semantics in a shim layerwith memory-mapped regions. The semantics of these I/O operations are emulated in a shimlayer with memory-mapped regions by using a mapping between a process' address spaceand a file or shared memory object. Data that is protected from viewing by a guest OSrunning in a virtual machine may nonetheless be accessed by the process.,*,2014,153
Serializable snapshot isolation in PostgreSQL,Dan RK Ports; Kevin Grittner,Abstract This paper describes our experience implementing PostgreSQL's new serializableisolation level. It is based on the recently-developed Serializable Snapshot Isolation (SSI)technique. This is the first implementation of SSI in a production database release as well asthe first in a database that did not previously have a lock-based serializable isolation level.We reflect on our experience and describe how we overcame some of the resultingchallenges; including the implementation of a new lock manager; a technique for ensuringmemory usage is bounded; and integration with other PostgreSQL features. We alsointroduce an extension to SSI that improves performance for read-only transactions. Weevaluate PostgreSQL's serializable isolation level using several benchmarks and show thatit achieves performance only slightly below that of snapshot isolation; and significantly …,Proceedings of the VLDB Endowment,2012,82
Tales of the tail: Hardware; os; and application-level sources of tail latency,Jialin Li; Naveen Kr Sharma; Dan RK Ports; Steven D Gribble,Abstract Interactive services often have large-scale parallel implementations. To deliver fastresponses; the median and tail latencies of a service's components must be low. In thispaper; we explore the hardware; OS; and application-level sources of poor tail latency inhigh throughput servers executing on multi-core machines. We model these networkservices as a queuing system in order to establish the best-achievable latency distribution.Using fine-grained measurements of three different servers (a null RPC service;Memcached; and Nginx) on Linux; we then explore why these servers exhibit significantlyworse tail latencies than queuing models alone predict. The underlying causes includeinterference from background processes; request re-ordering caused by poor scheduling orconstrained concurrency models; suboptimal interrupt routing; CPU power saving …,Proceedings of the ACM Symposium on Cloud Computing,2014,72
Transactional consistency and automatic management in an application data cache,Dan RK Ports; Austin T Clements; Irene Zhang; Samuel Madden; Barbara Liskov,Abstract Distributed in-memory application data caches like memcached are a popularsolution for scaling database-driven web sites. These systems are easy to add to existingdeployments; and increase performance significantly by reducing load on both the databaseand application servers. Unfortunately; such caches do not integrate well with the databaseor the application. They cannot maintain transactional consistency across the entire system;violating the isolation properties of the underlying database. They leave the applicationresponsible for locating data in the cache and keeping it up to date; a frequent source ofapplication complexity and programming errors. Addressing both of these problems; weintroduce a transactional cache; TxCache; with a simple programming model. TxCacheensures that any data seen within a transaction; whether it comes from the cache or the …,*,2010,68
Abstractions for Usable Information Flow Control in Aeolus.,Winnie Cheng; Dan RK Ports; David A Schultz; Victoria Popic; Aaron Blankstein; James A Cowling; Dorothy Curtis; Liuba Shrira; Barbara Liskov,Abstract Despite the increasing importance of protecting confidential data; building securesoftware remains as challenging as ever. This paper describes Aeolus; a new platform forbuilding secure distributed applications. Aeolus uses information flow control to provideconfidentiality and data integrity. It differs from previous information flow control systems in away that we believe makes it easier to understand and use. Aeolus uses a new; simplersecurity model; the first to combine a standard principal-based scheme for authoritymanagement with thread-granularity information flow tracking. The principal hierarchymatches the way developers already reason about authority and access control; and thecoarse-grained information flow tracking eases the task of defining a program's securityrestrictions. In addition; Aeolus provides a number of new mechanisms (authority closures …,USENIX Annual Technical Conference,2012,67
Transparent VMM-assisted user-mode execution control transfer,*,A virtual-machine-based system provides a control-transfer mechanism to invoke a user-mode application handler from existing virtual hardware directly; without going through anoperating system kernel running in the virtual machine. A virtual machine monitor callsdirectly to the guest user-mode handler and the handler transfers control back to the virtualmachine monitor; without involving the guest operating system.,*,2012,52
Census: Location-aware membership management for large-scale distributed systems,James Cowling; Dan RK Ports; Barbara Liskov; Raluca Ada Popa; Abhijeet Gaikwad,Abstract: We present Census; a platform for building large-scale distributed applications.Census provides a membership service and a multicast mechanism. The membershipservice provides every node with a consistent view of the system membership; which may beglobal or partitioned into location-based regions. Census distributes membership updateswith low overhead; propagates changes promptly; and is resilient to both crashes andByzantine failures. We believe that Census is the first system to provide a consistentmembership abstraction at very large scale; greatly simplifying the design of applicationsbuilt atop large deployments such as multi-site data centers.,*,2009,46
Designing Distributed Systems Using Approximate Synchrony in Data Center Networks,Dan R. K. Ports; Jialin Li; Vincent Liu; Naveen Kr Sharma; Arvind Krishnamurthy,Page 1. Designing Distributed Systems using Approximate Synchrony in Data Center NetworksDan RK Ports Jialin Li Vincent Liu Naveen Kr. Sharma Arvind Krishnamurthy University ofWashington CSE Page 2. Today's most popular applications are distributed systems in the datacenter Page 3. Today's most popular applications are distributed systems in the data centerModern data center: ~50;000 commodity servers constant server failures Page 4. How do weprogram the data center? Use distributed algorithms to tolerate failures; inconsistencies Example:Paxos state machine replication Page 5. Distributed systems and networks are typically designedindependently ? ? ? Page 6. Distributed systems and networks are typically designedindependently asynchronous network (Internet) packets may be arbitrarily • dropped • delayed •reordered ? ? ? Page 7. Distributed systems and networks …,NSDI,2015,42
Building consistent transactions with inconsistent replication,Irene Zhang; Naveen Kr Sharma; Adriana Szekeres; Arvind Krishnamurthy; Dan RK Ports,Abstract Application programmers increasingly prefer distributed storage systems withstrong consistency and distributed transactions (eg; Google's Spanner) for their strongguarantees and ease of use. Unfortunately; existing transactional storage systems areexpensive to use--in part because they require costly replication protocols; like Paxos; forfault tolerance. In this paper; we present a new approach that makes transactional storagesystems more affordable: we eliminate consistency from the replication protocol while stillproviding distributed transactions with strong consistency to applications. We present TAPIR--the Transactional Application Protocol for Inconsistent Replication--the first transactionprotocol to use a novel replication protocol; called inconsistent replication; that provides faulttolerance without consistency. By enforcing strong consistency only in the transaction …,Proceedings of the 25th Symposium on Operating Systems Principles,2015,41
Towards Application Security on Untrusted Operating Systems.,Dan RK Ports; Tal Garfinkel,Abstract Complexity in commodity operating systems makes compromises inevitable.Consequently; a great deal of work has examined how to protect security-critical portions ofapplications from the OS through mechanisms such as microkernels; virtual machinemonitors; and new processor architectures. Unfortunately; most work has focused on CPUand memory isolation and neglected OS semantics. Thus; while much is known about howto prevent OS and application processes from modifying each other; far less is understoodabout how different OS components can undermine application security if they turnmalicious. We consider this problem in the context of our work on Overshadow; a virtual-machine-based system for retrofitting protection in commodity operating systems. Weexplore how malicious behavior in each major OS subsystem can undermine application …,HotSec,2008,41
Arpeggio: Metadata searching and content sharing with Chord,Austin T Clements; Dan RK Ports; David R Karger,Abstract Arpeggio is a peer-to-peer file-sharing network based on the Chord lookupprimitive. Queries for data whose metadata matches a certain criterion are performedefficiently by using a distributed keyword-set index; augmented with index-side filtering. Weintroduce index gateways; a technique for minimizing index maintenance overhead.Because file data is large; Arpeggio employs subrings to track live source peers without thecost of inserting the data itself into the network. Finally; we introduce postfetching; atechnique that uses information in the index to improve the availability of rare files. The resultis a system that provides efficient query operations with the scalability and reliabilityadvantages of full decentralization; and a content distribution system tuned to therequirements and capabilities of a peer-to-peer network.,International Workshop on Peer-To-Peer Systems,2005,20
Just Say NO to Paxos Overhead: Replacing Consensus with Network Ordering.,Jialin Li; Ellis Michael; Naveen Kr Sharma; Adriana Szekeres; Dan RK Ports,Abstract Distributed applications use replication; implemented by protocols like Paxos; toensure data availability and transparently mask server failures. This paper presents a newapproach to achieving replication in the data center without the performance cost oftraditional methods. Our work carefully divides replication responsibility between thenetwork and protocol layers. The network orders requests but does not ensure reliabledelivery–using a new primitive we call ordered unreliable multicast (OUM). Implementingthis primitive can be achieved with near-zero-cost in the data center. Our new replicationprotocol; Network-Ordered Paxos (NOPaxos); exploits network ordering to provide stronglyconsistent replication without coordination. The resulting system not only outperforms bothlatency-and throughput-optimized protocols on their respective metrics; but also yields …,OSDI,2016,16
Towards High-Performance Application-Level Storage Management.,Simon Peter; Jialin Li; Irene Zhang; Dan RK Ports; Thomas E Anderson; Arvind Krishnamurthy; Mark Zbikowski; Doug Woos,Abstract We propose a radical re-architecture of the traditional operating system storagestack to move the kernel off the data path. Leveraging virtualized I/O hardware for disk andflash storage; most read and write I/O operations go directly to application code. The kerneldynamically allocates extents; manages the virtual to physical binding; and performs nametranslation. The benefit is to dramatically reduce the CPU overhead of storage operationswhile improving application flexibility.,HotStorage,2014,11
PersiFS: a versioned file system with an efficient representation,Dan RK Ports; Austin T Clements; Erik D Demaine,Abstract The availability of previous file versions is invaluable for recovering from filecorruption or user errors such as accidental deletions. Versioned file systems address thisneed by retaining earlier versions of changed files. Many existing file systems; such as Plan9; WAFL; AFS; and others; use a snap-shotting approach: they record and archive the stateof the file system at periodic intervals. However; this fails to capture modifications that aremade between snapshots. Our system; PersiFS; is continuously versioned; meaning that itstores every modification; and thus allows access to the file system state as it appeared atany specified time. To make this feasible; we use a number of efficient data structures tooptimize both access time and disk space.,Proceedings of the twentieth ACM symposium on Operating systems principles,2005,11
Claret: Using data types for highly concurrent distributed transactions,Brandon Holt; Irene Zhang; Dan Ports; Mark Oskin; Luis Ceze,Abstract Out of the many NoSQL databases in use today; some that provide simple datastructures for records; such as Redis and MongoDB; are now becoming popular. Buildingapplications out of these complex data types provides a way to communicate intent to thedatabase system without sacrificing flexibility or committing to a fixed schema. Currently thiscapability is leveraged in limited ways; such as to ensure related values are co-located; orfor atomic updates. There are many ways data types can be used to make databases moreefficient that are not yet being exploited. We explore several ways of leveraging abstractdata type (ADT) semantics in databases; focusing primarily on commutativity. Using a Twitterclone as a case study; we show that using commutativity can reduce transaction abort ratesfor high-contention; update-heavy workloads that arise in real social networks. We …,Proceedings of the First Workshop on Principles and Practice of Consistency for Distributed Data,2015,5
Arrakis: The operating system is the control plane,Simon Peter; Jialin Li; Irene Zhang; Dan RK Ports; Arvind Krishnamurthy; Thomas Anderson; Timothy Roscoe,Simon Peter is a post-doctoral research associate at the University of Washington; where hisresearch focus is on operating systems and networks. Simon holds a Ph. D. in ComputerScience from ETH Zurich; Switzerland; and is a founding member of the Barrelfish multi-coreoperating system research project. Simon has worked on many OS-related topics; includingmulti-core scheduling; distributed file systems; and distributed tracing; and contributes tovarious OS projects; including the Linux kernel; the GRUB2 boot loader; and the Debiandistribution. simpeter@ cs. washington. edu,Proc. 11th USENIX Conf. Oper. Syst. Des. Implement,2013,5
Disciplined inconsistency with consistency types,Brandon Holt; James Bornholt; Irene Zhang; Dan Ports; Mark Oskin; Luis Ceze,Abstract Distributed applications and web services; such as online stores or social networks;are expected to be scalable; available; responsive; and fault-tolerant. To meet these steeprequirements in the face of high round-trip latencies; network partitions; server failures; andload spikes; applications use eventually consistent datastores that allow them to weaken theconsistency of some data. However; making this transition is highly error-prone becauserelaxed consistency models are notoriously difficult to understand and test. In this work; wepropose a new programming model for distributed data that makes consistency propertiesexplicit and uses a type system to enforce consistency safety. With the Inconsistent;Performance-bound; Approximate (IPA) storage system; programmers specify performancetargets and correctness requirements as constraints on persistent data structures and …,Proceedings of the Seventh ACM Symposium on Cloud Computing,2016,4
Disciplined inconsistency with consistency types,Brandon Holt; James Bornholt; Irene Zhang; Dan Ports; Mark Oskin; Luis Ceze,Abstract Distributed applications and web services; such as online stores or social networks;are expected to be scalable; available; responsive; and fault-tolerant. To meet these steeprequirements in the face of high round-trip latencies; network partitions; server failures; andload spikes; applications use eventually consistent datastores that allow them to weaken theconsistency of some data. However; making this transition is highly error-prone becauserelaxed consistency models are notoriously difficult to understand and test. In this work; wepropose a new programming model for distributed data that makes consistency propertiesexplicit and uses a type system to enforce consistency safety. With the Inconsistent;Performance-bound; Approximate (IPA) storage system; programmers specify performancetargets and correctness requirements as constraints on persistent data structures and …,Symposium on Cloud Computing (SOCC),2016,4
Transparent memory-mapped emulation of I/O calls,*,A virtual-machine-based system provides a mechanism to implement application file I/Ooperations of protected data by implementing the I/O operations semantics in a shim layerwith memory-mapped regions. The semantics of these I/O operations are emulated in a shimlayer with memory-mapped regions by using a mapping between a process' address spaceand a file or shared memory object. Data that is protected from viewing by a guest OSrunning in a virtual machine may nonetheless be accessed by the process.,*,2017,3
Building consistent transactions with inconsistent replication (extended version),Irene Zhang; Naveen Kr Sharma; Adriana Szekeres; Arvind Krishnamurthy; Dan RK Ports,Abstract Application programmers increasingly prefer distributed storage systems withstrong consistency and distributed transactions (eg; Google's Spanner) for their strongguarantees and ease of use. Unfortunately; existing transactional storage systems areexpensive to use–in part because they require costly replication protocols; like Paxos; forfault tolerance. In this paper; we present a new approach that makes transactional storagesystems more affordable: we eliminate consistency from the replication protocol while stillproviding distributed transactions with strong consistency to applications. We present TAPIR–the Transactional Application Protocol for Inconsistent Replication–the first transactionprotocol to use a novel replication protocol; called inconsistent replication; that provides faulttolerance without consistency. By enforcing strong consistency only in the transaction …,*,2015,3
Machine fault tolerance for reliable datacenter systems,Danyang Zhuo; Qiao Zhang; Dan RK Ports; Arvind Krishnamurthy; Thomas Anderson,Abstract Although rare in absolute terms; undetected CPU; memory; and disk errors occuroften enough at datacenter scale to significantly affect overall system reliability andavailability. In this paper; we propose a new failure model; called Machine Fault Tolerance;and a new abstraction; a replicated write-once trusted table; to provide improved resilienceto these types of failures. Since most machine failures manifest in application server andoperating system code; we assume a Byzantine model for those parts of the system.However; by assuming that the hypervisor and network are trustworthy; we are able toreduce the overhead of machine-fault masking to be close to that of non-Byzantine Paxos.,Proceedings of 5th Asia-Pacific Workshop on Systems,2014,2
ZaliQL: causal inference from observational data at scale,Babak Salimi; Corey Cole; Dan RK Ports; Dan Suciu,Abstract Causal inference from observational data is a subject of active research anddevelopment in statistics and computer science. Many statistical software packages havebeen developed for this purpose. However; these toolkits do not scale to large datasets. Wepropose and demonstrate ZaliQL: a SQL-based framework for drawing causal inferencefrom observational data. ZaliQL supports the state-of-the-art methods for causal inferenceand runs at scale within PostgreSQL database system. In addition; we built a visual interfaceto wrap around ZaliQL. In our demonstration; we will use this GUI to show a live investigationof the causal effect of different weather conditions on flight delays.,Proceedings of the VLDB Endowment,2017,1
Providing stable storage for the diskless crash-recovery failure model,Ellis Michael; Dan RK Ports; Naveen Kr Sharma; Adriana Szekeres,Abstract Many classic protocols in the fault tolerant distributed computing literature assume aCrash-Fail model in which processes either are up; or have crashed and are permanentlydown. While this model is useful; it does not fully capture the difficulties many real systemsmust contend with. In particular; real-world systems are long-lived and must have a recoverymechanism so that crashed processes can rejoin the system and restore its fault-tolerance.When processes are assumed to have access to stable storage that is persistent acrossfailures; the Crash-Recovery model is trivial. However; because disk failures are commonand because having a disk on a protocol's critical path is often performance concern;diskless recovery protocols are needed. While such protocols do exist in the state machinereplication literature; several well-known protocols have flawed recovery mechanisms …,*,2016,1
When Is Operation Ordering Required in Replicated Transactional Storage?,Irene Zhang; Naveen Kr Sharma; Adriana Szekeres; Arvind Krishnamurthy; Dan RK Ports,Abstract Today's replicated transactional storage systems typically have a layeredarchitecture; combining protocols for transaction coordination; consistent replication; andconcurrency control. These systems generally require costly strongly-consistent replicationprotocols like Paxos; which assign a total order to all operations. To avoid this cost; we askwhether all replicated operations in these systems need to be strictly ordered. Recentresearch has yielded replication protocols that can avoid unnecessary ordering; eg; byexploiting commutative operations; but it is not clear how to apply these to replicatedtransaction processing systems. We answer this question by analyzing existing transactionprocessing designs in terms of which replicated operations require ordering and whichsimply require fault tolerance. We describe how this analysis leads to our recent work on …,IEEE Data Eng. Bull.,2016,1
Arpeggio: metadata indexing in a structured peer-to-peer network,Dan Robert Kenneth Ports,Peer-to-peer networks require an efficient means for performing searches for files bymetadata keywords. Unfortunately; current methods usually sacrifice either scalability orrecall. Arpeggio is a peer-to-peer file-sharing network that uses the Chord lookup primitiveas a basis for constructing a distributed keyword-set index; augmented with index-sidefiltering; to address this problem. We introduce index gateways; a technique for minimizingindex maintenance overhead. Arpeggio also includes a content distribution system forfinding source peers for a file; we present a novel system that uses Chord subrings to tracklive source peers without the cost of inserting the data itself into the network; and supportspostfetching: using information in the index to improve the availability of rare files. The resultis a system that provides efficient query operations with the scalability and reliability …,*,2007,1
PersiFS: A Continuously Versioned Network File System,Austin T Clements; Dan RK Ports; Ben A Schmeckpeper; Hector Yuen,Abstract Most file systems are ephemeral; meaning that once a change has been made;there is no way to recall the previous contents of the file system. Backups; version controlsystems; and user interface improvements such as “trash cans” attempt to alleviate thisproblem; however; these are all rough approximations of persistent file system structures;giving users restricted access to a restricted set of past states of the file system. PersiFS is afully persistent file system; providing access to any past state of the entire file system.PersiFS achieves full persistence without sacrificing access time to either current versions orpast versions; using inordinate amounts of disk space; or requiring modification to existingapplications.,*,2005,1
Eris: Coordination-Free Consistent Transactions Using In-Network Concurrency Control,Jialin Li; Ellis Michael; Dan RK Ports,Abstract Distributed storage systems aim to provide strong consistency and isolationguarantees on an architecture that is partitioned across multiple shards for scalability andreplicated for fault tolerance. Traditionally; achieving all of these goals has required anexpensive combination of atomic commitment and replication protocols--introducingextensive coordination overhead. Our system; Eris; takes a different approach. It moves acore piece of concurrency control functionality; which we term multi-sequencing; into thedatacenter network itself. This network primitive takes on the responsibility for consistentlyordering transactions; and a new lightweight transaction protocol ensures atomicity. The endresult is that Eris avoids both replication and transaction coordination overhead: we showthat it can process a large class of distributed transactions in a single round-trip from the …,Proceedings of the 26th Symposium on Operating Systems Principles,2017,*
A Demonstration of Interactive Analysis of Performance Measurements with Viska,Helga Gudmundsdottir; Babak Salimi; Magdalena Balazinska; Dan RK Ports; Dan Suciu,Abstract The ultimate goal of system performance analysis is to identify the underlyingcauses for performance differences between different systems and different workloads. Wemake this goal easier to achieve with Viska; a new tool for generating and interpretingperformance measurement results. Viska leverages cutting-edge techniques from big dataanalytics and data visualization to aid and automate this analysis; and helps users derivemeaningful and statistically sound conclusions using state-of-the-art causal inference andhypothesis testing techniques.,Proceedings of the 2017 ACM International Conference on Management of Data,2017,*
Recovering shared objects without stable storage,Ellis Michael; Dan RK Ports; Naveen Kr Sharma; Adriana Szekeres,Abstract This paper considers the problem of building fault-tolerant shared objects whenprocesses can crash and recover but lose their persistent state on recovery. This DisklessCrash-Recovery (DCR) model matches the way many long-lived systems are built. We showthat it presents new challenges; as operations that are recorded at a quorum may not persistafter some of the processes in that quorum crash and then recover. To address this problem;we introduce the notion of crash-consistent quorums; where no recoveries happen duringthe quorum responses. We show that relying on crash-consistent quorums enables arecovery procedure that can recover all operations that successfully finished. Crash-consistent quorums can be easily identified using a mechanism we term the crash vector;which tracks the causal relationship between crashes; recoveries; and other operations …,LIPIcs-Leibniz International Proceedings in Informatics,2017,*
Fast replication with NOPaxos: Replacing consensus with network ordering,Jialin Li; Ellis Michael; Naveen Kr Sharma; Adriana Szekeres; Dan RK Ports,*,12th USENIX Symposium on Operating Systems Design and Implementation (OSDI 16); Savannah; GA,2016,*
Application-level caching with transactional consistency,Dan Robert Kenneth Ports,Distributed in-memory application data caches like memcached are a popular solution forscaling database-driven web sites. These systems increase performance significantly byreducing load on both the database and application servers. Unfortunately; such cachespresent two challenges for application developers. First; they cannot ensure that theapplication sees a consistent view of the data within a transaction; violating the isolationproperties of the underlying database. Second; they leave the application responsible forlocating data in the cache and keeping it up to date; a frequent source of applicationcomplexity and programming errors. This thesis addresses both of these problems in a newcache called TxCache. TxCache is a transactional cache: it ensures that any data seenwithin a transaction; whether from the cache or the database; reflects a slightly stale but …,*,2012,*
Optimizing Distributed Read-Only Transactions Using Multiversion Concurrency,Dan RK Ports; Austin T Clements; Irene Y Zhang,Abstract Distributed transactional systems typically achieve efficiency by abandoning trueserializability for weaker forms of consistency that are difficult to reason about because theyexpose the concurrency in the underlying system. We explore an alternate route: weakeningcausality instead of consistency. Our proposed algorithm achieves global serializability bysacrificing global causality; which we argue is reasonable in many situations. This allowsour algorithm to achieve efficiency by permitting read-only transactions to operate on stalebut locally available cache data. We present the details of a transactional block storageprotocol that implements this form of concurrency control; as well as a performanceevaluation of an experimental implementation of this protocol and comparison againstconventional optimistic concurrency control.,*,2007,*
Plaid: Pattern Language for Abstract Datatypes,Dan RK Ports; Austin T Clements; Irene Y Zhang,Abstract The expressiveness of traditional syntactic pattern matching is severely limited byits lack of abstraction. Because syntax patterns are mired in the builtin types understood bythe pattern matching system; they lack the ability to express patterns over abstract data types(ADT's). More advanced pattern matching techniques; such as semantic matching; canovercome this; but at the per-ADT cost of the complex code required to add new patterncombinators to the system. Plaid defines a new pattern language that captures a strict subsetof Scheme capable of both regular computation; as well as reverse computation. This allowsit to overcome both the limitations of syntactic patterns and the cost of semantic patterns byproviding a means by which programmers can write a single specification of the mappingbetween the abstract and concrete representations of an ADT that simultaneously serves …,*,2007,*
connect with us,Michael A Koenig Kanta Jamil Peter; K Streatfield Tulshi Saha Ahmed Al; Sabir Shams El Arifeen Ken Hill; Yasmin Haque,METHODS This study presents an overview of key findings from the 2001 BangladeshMaternal Health Services and Maternal Mortality Survey of ever-married women aged 13–49. The survey collected data on the prevalence of obstetric complications; women'sknowledge of life-threatening complications; treatment-seeking behavior and reasons fordelay in seeking medical care. RESULTS Bangladeshi women report low but increasing useof antenatal care; as well as low rates of delivery in a health facility or with the assistance ofa skilled provider. Although almost half of women reported having one or morecomplications during pregnancy that they perceived as life threatening; only one in threesought treatment from a qualified provider. More than three-fourths of women with the time-sensitive complications of convulsions or excessive bleeding either failed to seek any …,International Family Planning Perspectives,2007,*
Canopy: A Controlled Emulation Environment for Network System Experimentation,Dan Ports; Austin Clements; Jeff Arnold,Abstract Network systems are hard to debug because they are inherently parallel and non-deterministic. Canopy assists with network debugging by putting the entire network systeminto a controlled emulation environment constructed from virtual machines and a simulatednetwork. This puts all variables under the user's control and provides a coherent; omniscientviewpoint of the entire system. To aid the user in observing and manipulating the system;Canopy provides tools such as traffic visualization; packet manipulation; rollback and replay.,*,2005,*
Structures for Efficient File System-Scale Partial Persistence,Dan RK Ports; Austin T Clements,Abstract A persistent file system stores every previous state of each file; allowing convenientaccess to the full state of the file system as it appeared at any point in the past. Achieving thisconvenient feature presents a challenging data structural problem because the amount ofdata involved is so large: it must use as little space as possible; and provide efficientoperations for modifying the current state and accessing both current and past states. Weformalize persistent file systems as a problem in data structures; and analyze it in the contextof the external memory model. We begin by considering the design of our initial solution tothis problem from the PersiFS1 file system; which is based on a log of metadata changesand an indirection layer for storing file data. These “systems” data structures support thedesired operations; but are not asymptotically efficient. Applying more advanced data …,*,2005,*
Census: Location-Aware Membership Management,James Cowling; Dan RK Ports; Raluca Ada Popa Abhijeet Gaikwad,Page 1. Census: Location-Aware Membership Management for Large-Scale Distributed SystemsJames Cowling Dan RK Ports Barbara Liskov Raluca Ada Popa Abhijeet Gaikwad* MIT CSAIL*École Centrale Paris Page 2. Motivation Large-scale distributed systems becoming morecommon multiple datacenters; cloud computing; etc. Reconfigurable distributed services adaptas nodes join; leave; or fail A membership service that tracks changes in system membershipcan simplify system design Page 3. Census A platform for building large-scale; distributedapplications Two main components: Membership service Multicast communication mechanismDesigned to work in the wide-area Locality-aware; fault tolerant Page 4. Membership ServiceTime divided into sequential; fixed-duration epochs Each epoch has a membership view: Listof nodes (ID; IP address; location; etc.) Consistency property …,*,*,*
help promote,Dan RK Ports; Jialin Li; Naveen Kr Vincent Liu,Abstract: Distributed systems are traditionally designed independently from the underlyingnetwork; making worst-case assumptions (eg; complete asynchrony) about its behavior.However; many of today's distributed applications are deployed in data centers; where thenetwork is more reliable; predictable; and extensible. In these environments; it is possible toco-design distributed systems with their network layer; and doing so can offer substantialbenefits.,*,*,*
help promote,Simon Peter; Jialin Li; Irene Zhang; Dan RK Ports; Doug Woos; Arvind Krishnamurthy; Thomas Anderson; Timothy Roscoe,Abstract: Recent device hardware trends enable a new approach to the design of networkserver operating systems. In a traditional operating system; the kernel mediates access todevice hardware by server applications; to enforce process isolation as well as network anddisk security. We have designed and implemented a new operating system; Arrakis; thatsplits the traditional role of the kernel in two. Applications have direct access to virtualizedI/O devices; allowing most I/O operations to skip the kernel entirely; while the kernel is re-engineered to provide network and disk protection without kernel mediation of everyoperation. We describe the hardware and software changes needed to take advantage ofthis new abstraction; and we illustrate its power by showing improvements of 2-5 in latencyand 9 in throughput for a popular persistent NoSQL store relative to a well-tuned Linux …,*,*,*
usenix conference policies,James Heather,Skip to main content. USENIX. Conferences; Students. Sign in. Overview; Registration Information;Registration Discounts; At a Glance; Calendar; Workshop Program; Birds-of-a-Feather Sessions;Co-located Workshops; Activities; Hotel and Travel Information; Students; Questions; Help Promote!For Participants; Call for Articles; Past Workshops. twitter. Tweets by @usenix. usenix conferencepolicies. Event Code of Conduct; Conference Network Policy; Statement on EnvironmentalResponsibility Policy. You are here. Home » What Have We Ever Done for the Victorians? Tweet.connect with us. http://twitter.com/usenixsecurity. https://www.facebook.com/usenixassociation.http://www.linkedin.com/groups/USENIX-Association-49559/about. https://plus.google.com/108588319090208187909/posts. http://www.youtube.com/user/USENIXAssociation. What HaveWe Ever Done for the Victorians? James Heather; University of …,*,*,*
Vincent Liu,Dan RK Ports,My research is in the general area of networked systems and bridges all layers of thenetworking stack; from hardware concerns to application and user demands. Withincomputer networking; I have published in a variety of fields including data center networks;fault-tolerant distributed systems; energy-efficient wireless communication; and systems topreserve security and privacy.,*,*,*
Optimistic Replicated Two-Phase Commit,Irene Zhang; Naveen Kr Sharma; Adriana Szekeres; Arvind Krishnamurthy; Dan RK Ports,Distributed storage systems are a critical component for building scalable; reliable webapplications. To meet the high performance and availability demands of web applications;these systems are increasingly built around in-memory replication [4]; instead of traditionaldiskbased storage. At the same time; programmers increasingly prefer systems that supportconsistent replication and general-purpose; distributed transactions. A number of storagesystems; most notably Google's Spanner [2]; have been developed recently that reflect thistrend. The standard design for these storage systems integrates several protocols that worktogether to provide scalable; replicated transactions. The protocols include concurrencycontrol mechanisms like Strict Two-Phase Locking (S2PL); consensus-based replicationalgorithms like Paxos [3]; and atomic commitment protocols like Two-Phase Commit (2PC …,*,*,*
Arrakis: The Operating System is the Control Plane,Simon Peter Jialin Li Irene Zhang; Dan RK Ports; Doug Woos Arvind Krishnamurthy; Thomas Anderson; Timothy Roscoe,Abstract Recent device hardware trends enable a new approach to the design of networkserver operating systems. In a traditional operating system; the kernel mediates access todevice hardware by server applications; to enforce process isolation as well as network anddisk security. We have designed and implemented a new operating system; Arrakis; thatsplits the traditional role of the kernel in two. Applications have direct access to virtualizedI/O devices; allowing most I/O operations to skip the kernel entirely; while the kernel is re-engineered to provide network and disk protection without kernel mediation of everyoperation. We describe the hardware and software changes needed to take advantage ofthis new abstraction; and we illustrate its power by showing 2-5x end-to-end latency and 9xthroughput improvements for a popular persistent NoSQL store relative to a well-tuned …,*,*,*
Claret: Avoiding contention in distributed transactions with abstract data types,Brandon Holt; Irene Zhang; Dan Ports; Mark Oskin; Luis Ceze,*,*,*,*
TagFS: A Fast and Efficient Tag-Based File System,Yanping Chen; Dan Ports,A typical problem in directory-based file-systems is searching for groups of related files. Oftentimes; target files are spread across multiple directories or have no common filenamepattern. To address such issues; this document details the design of Tag File-System (TagFSor TFS); a non-hierarchical tag-based file-system: files contain descriptive tags and can be filteredbased on such tags into scopes. In order to make the design perform at a usable level; we focusedon simplicity and speed: 1. Scopes are intersections of tags. By removing unions; scopes aremade lightweight and fast; allowing applications multiple scopes with little cost. 2. Tag data isstored in a bidirectional mapping between tags and files. This increases storage but allows quicklisting of a file's tag-list or a tag's file-list. 3. Tag data is fully stored in memory to facilitate veryfast searches. The goal of this design is to provide high performance through fast …,*,*,*
PersiFS,Dan RK Ports; Austin T Clements; Erik D Demaine,Most file systems are ephemeral; meaning that once a change has been made; there is noway to recall the previous contents of the file system. PersiFS is a continuously versioned filesystem. It stores every modification to the file system; allowing access to any past version ofany file. PersiFS achieves this without sacrificing access time to either current versions orpast versions; using inordinate amounts of disk space; or requiring modification to existingapplications. In order to make continuous versioning feasible; PersiFS tackles the problemsof time and space efficiency with a number of efficient data structures for indexing andretaining files.,*,*,*
2 External-Memory Model,Erik Demaine Scribe; Dan Ports,The external-memory model was introduced by Aggarwal and Vitter in 1988 [1]; and issometimes also known as the I/O model or disk access model (DAM). It captures a two-layered memory hierarchy. The model is based on a computer with a CPU connecteddirectly to a fast cache of size M; which is connected to a much larger and slower disk. Boththe cache and disk are divided into blocks of size B; the cache thus holds M,*,*,*
