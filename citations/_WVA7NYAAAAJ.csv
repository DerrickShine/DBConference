Benchmarking cloud serving systems with YCSB,Brian F Cooper; Adam Silberstein; Erwin Tam; Raghu Ramakrishnan; Russell Sears,Abstract While the use of MapReduce systems (such as Hadoop) for large scale dataanalysis has been widely recognized and studied; we have recently seen an explosion inthe number of systems developed for cloud data serving. These newer systems address"cloud OLTP" applications; though they typically do not support ACID transactions. Examplesof systems proposed for cloud serving use include BigTable; PNUTS; Cassandra; HBase;Azure; CouchDB; SimpleDB; Voldemort; and many others. Further; they are being applied toa diverse range of applications that differ considerably from traditional (eg; TPC-C like)serving workloads. The number of emerging cloud serving systems and the wide range ofproposed applications; coupled with a lack of apples-to-apples performance comparisons;makes it difficult to understand the tradeoffs between systems and the workloads for …,Proceedings of the 1st ACM symposium on Cloud computing,2010,1775
PNUTS: Yahoo!'s hosted data serving platform,Brian F Cooper; Raghu Ramakrishnan; Utkarsh Srivastava; Adam Silberstein; Philip Bohannon; Hans-Arno Jacobsen; Nick Puz; Daniel Weaver; Ramana Yerneni,Abstract We describe PNUTS; a massively parallel and geographically distributed databasesystem for Yahoo!'s web applications. PNUTS provides data storage organized as hashed orordered tables; low latency for large numbers of concurrent requests including updates andqueries; and novel per-record consistency guarantees. It is a hosted; centrally managed;and geographically distributed service; and utilizes automated load-balancing and failoverto reduce operational complexity. The first version of the system is currently serving inproduction. We describe the motivation for PNUTS and the design and implementation of itstable storage and replication layers; and then present experimental results.,Proceedings of the VLDB Endowment,2008,1136
Constraint chaining: on energy-efficient continuous monitoring in sensor networks,Adam Silberstein; Rebecca Braynard; Jun Yang,Abstract Wireless sensor networks have created new opportunities for data collection in avariety of scenarios; such as environmental and industrial; where we expect data to betemporally and spatially correlated. Researchers may want to continuously collect all sensordata from the network for later analysis. Suppression; both temporal and spatial; providesopportunities for reducing the energy cost of sensor data collection. We demonstrate howboth types can be combined for maximal benefit. We frame the problem as one of monitoringnode and edge constraints. A monitored node triggers a report if its value changes. Amonitored edge triggers a report if the difference between its nodes' values changes. The setof reports collected at the base station is used to derive all node values. We fully exploit thepotential of this global inference in our algorithm; CONCH; short for constraint chaining …,Proceedings of the 2006 ACM SIGMOD international conference on Management of data,2006,219
A sampling-based approach to optimizing top-k queries in sensor networks,Adam Silberstein Silberstein; Rebecca Braynard; Carla Ellis; Kamesh Munagala; Jun Yang,Wireless sensor networks generate a vast amount of data. This data; however; must besparingly extracted to conserve energy; usually the most precious resource in battery-powered sensors. When approximation is acceptable; a model-driven approach to queryprocessing is effective in saving energy by avoiding contacting nodes whose values can bepredicted or are unlikely to be in the result set. To optimize queries such as top-k; however;reasoning directly with models of joint probability distributions can be prohibitivelyexpensive. Instead of using models explicitly; we propose to use samples of past sensorreadings. Not only are such samples simple to maintain; but they are also computationallyefficient to use in query optimization. With these samples; we can formulate the problem ofoptimizing approximate top-k queries under an energy constraint as a linear program. We …,Data Engineering; 2006. ICDE'06. Proceedings of the 22nd International Conference on,2006,215
Energy-efficient monitoring of extreme values in sensor networks,Adam Silberstein; Kamesh Munagala; Jun Yang,Abstract Monitoring extreme values (MAX or MIN) is a fundamental problem in wirelesssensor networks (and in general; complex dynamic systems). This problem presents verydifferent algorithmic challenges from aggregate and selection queries; in the sense that anindividual node cannot by itself determine its inclusion in the query result. We present novelquery processing algorithms for this problem; with the goal of minimizing message traffic inthe network. These algorithms employ a hierarchy of local constraints; or thresholds; toleverage network topology such that message-passing is localized. We evaluate allalgorithms using simulated and real-world data to study various trade-offs.,Proceedings of the 2006 ACM SIGMOD international conference on Management of data,2006,125
Automatic Optimization of Parallel Dataflow Programs.,Christopher Olston; Benjamin Reed; Adam Silberstein; Utkarsh Srivastava,Abstract Large-scale parallel dataflow systems; eg; Dryad and Map-Reduce; have attractedsignificant attention recently. High-level dataflow languages such as Pig Latin and Sawzallare being layered on top of these systems; to enable faster program development and moremaintainable code. These languages engender greater transparency in program structure;and open up opportunities for automatic optimization. This paper proposes a set ofoptimization strategies for this context; drawing on and extending techniques from thedatabase community.,USENIX Annual Technical Conference,2008,105
Sailfish: A framework for large scale data processing,Sriram Rao; Raghu Ramakrishnan; Adam Silberstein; Mike Ovsiannikov; Damian Reeves,Abstract In this paper; we present Sailfish; a new Map-Reduce framework for large scaledata processing. The Sailfish design is centered around aggregating intermediate data;specifically data produced by map tasks and consumed later by reduce tasks; to improveperformance by batching disk I/O. We introduce an abstraction called I-files for supportingdata aggregation; and describe how we implemented it as an extension of the distributedfilesystem; to efficiently batch data written by multiple writers and read by multiple readers.Sailfish adapts the Map-Reduce layer in Hadoop to use I-files for transporting data from maptasks to reduce tasks. We present experimental results demonstrating that Sailfish improvesperformance of standard Hadoop; in particular; we show 20% to 5 times faster performanceon a representative mix of real jobs and datasets at Yahoo!. We also demonstrate that the …,Proceedings of the Third ACM Symposium on Cloud Computing,2012,90
Feeding frenzy: selectively materializing users' event feeds,Adam Silberstein; Jeff Terrace; Brian F Cooper; Raghu Ramakrishnan,Abstract Near real-time event streams are becoming a key feature of many popular webapplications. Many web sites allow users to create a personalized feed by selecting one ormore event streams they wish to follow. Examples include Twitter and Facebook; which auser to follow other users' activity; and iGoogle and My Yahoo; which allow users to followselected RSS streams. How can we efficiently construct a web page showing the latestevents from a user's feed? Constructing such a feed must be fast so the page loads quickly;yet reflects recent updates to the underlying event streams. The wide fanout of popularstreams (those with many followers) and high skew (fanout and update rates vary widely)make it difficult to scale such applications. We associate feeds with consumers and eventstreams with producers. We demonstrate that the best performance results from …,Proceedings of the 2010 ACM SIGMOD International Conference on Management of data,2010,89
Suppression and failures in sensor networks: A Bayesian approach,Adam Silberstein; Gavino Puggioni; Alan Gelfand; Kamesh Munagala; Jun Yang,Abstract Sensor networks allow continuous data collection on unprecedented scales. Theprimary limiting factor of such networks is energy; of which communication is the dominantconsumer. The default strategy of nodes continually reporting their data to the root results intoo much messaging. Suppression stands to greatly alleviate this problem. The simplestsuch scheme is temporal suppression; in which a node transmits its reading only when it haschanged beyond some e since last transmitted. In the absence of a report; the root can inferthat the value remains within±ε hence; it is still able to derive the history of readingsproduced at the node. The critical weakness of suppression is message failure; to whichsensor networks are particularly vulnerable. Failure creates ambiguity: a non-report mayeither be a suppression or a failure. Inferring the correct values for missing data and …,Proceedings of the 33rd international conference on Very large data bases,2007,86
Asynchronous view maintenance for VLSD databases,Parag Agrawal; Adam Silberstein; Brian F Cooper; Utkarsh Srivastava; Raghu Ramakrishnan,Abstract The query models of the recent generation of very large scale distributed (VLSD)shared-nothing data storage systems; including our own PNUTS and others (eg BigTable;Dynamo; Cassandra; etc.) are intentionally simple; focusing on simple lookups and scansand trading query expressiveness for massive scale. Indexes and views can expand thequery expressiveness of such systems by materializing more complex access paths andquery results. In this paper; we examine mechanisms to implement indexes and views in amassive scale distributed database. For web applications; minimizing update latencies iscritical; so we advocate deferring the work of maintaining views and indexes as much aspossible. We examine the design space; and conclude that two types of viewimplementations; called remote view tables (RVTs) and local view tables (LVTs); provide …,Proceedings of the 2009 ACM SIGMOD International Conference on Management of data,2009,81
BOXes: Efficient maintenance of order-based labeling for dynamic XML data,Adam Silberstein; Hao He; Ke Yi; Jun Yang,Order-based element labeling for tree-structured XML data is an important technique in XMLprocessing. It lies at the core of many fundamental XML operations such as containment joinand twig matching. While labeling for static XML documents is well understood; less isknown about how to maintain accurate labeling for dynamic XML documents; whenelements and subtrees are inserted and deleted. Most existing approaches do not work wellfor arbitrary update patterns; they either produce unacceptably long labels or incurenormous relabeling costs. We present two novel I/O-efficient data structures; W-BOX and B-BOX that efficiently maintain labeling for large; dynamic XML documents. We showanalytically and experimentally that both; despite consuming minimal amounts of storage;gracefully handle arbitrary update patterns without sacrificing lookup efficiency. The two …,Data Engineering; 2005. ICDE 2005. Proceedings. 21st International Conference on,2005,74
Many-to-many aggregation for sensor networks,Adam Silberstein; Jun Yang,Wireless sensor networks have enormous potential to aid data collection in a number ofareas; such as environmental and wildlife research. In this paper; we address thechallenges of supporting many-to-many aggregation in a sensor network. An application ofmany-to-many aggregation is in-network control of sensors. For expensive sensing taskssuch as sap flux measurements and camera repositioning; we use low-cost informationobtained at multiple other nodes in the network to control such tasks; eg; decreasingsampling rates when readings are predictable or unimportant; while increasing samplingrates when there are interesting activities. In general; there is a many-to-many relationshipbetween sources (nodes providing control inputs) and destinations (nodes requiring controloutputs). We present a method for implementing many-to-many aggregation in a sensor …,Data Engineering; 2007. ICDE 2007. IEEE 23rd International Conference on,2007,56
Data-Driven Processing in Sensor Networks.,Adam Silberstein; Gregory Filpus; Kamesh Munagala; Jun Yang,ABSTRACT Wireless sensor networks are poised to enable continuous data collection onunprecedented scales; in terms of area location and size; and frequency. This is a greatboon to fields such as ecological modeling. We are collaborating with researchers to buildsophisticated temporal and spatial models of forest growth; utilizing a variety ofmeasurements. There exists a crucial challenge in supporting this activity: network nodeshave limited battery life; and radio communication is the dominant energy consumer. Thestraightforward solution of instructing all nodes to report their measurements as they aretaken to a base station will quickly consume the network's energy. On the other hand; thesolution of building models for node behavior and substituting these in place of the actualmeasurements is in conflict with the end goal of constructing models. To address this …,CIDR,2007,55
Building a cloud for yahoo!,Brian F Cooper; Eric Baldeschwieler; Rodrigo Fonseca; James J Kistler; PPS Narayan; Chuck Neerdaels; Toby Negrin; Raghu Ramakrishnan; Adam Silberstein; Utkarsh Srivastava; Raymie Stata,Abstract Yahoo! is building a set of scalable; highly-available data storage and processingservices; and deploying them in a cloud model to make application development andongoing maintenance significantly easier. In this paper we discuss the vision andrequirements; as well as the components that will go into the cloud. We highlight thechallenges and research questions that arise from trying to build a comprehensive web-scale cloud infrastructure; emphasizing data storage and processing capabilities.(TheYahoo! cloud infrastructure also includes components for provisioning; virtualization; andedge content delivery; but these aspects are only briefly touched on.),IEEE Data Eng. Bull.,2009,53
Efficient bulk insertion into a distributed ordered table,Adam Silberstein; Brian F Cooper; Utkarsh Srivastava; Erik Vee; Ramana Yerneni; Raghu Ramakrishnan,Abstract We study the problem of bulk-inserting records into tables in a system thathorizontally range-partitions data over a large cluster of shared-nothing machines. Eachtable partition contains a contiguous portion of the table's key range; and must accept allrecords inserted into that range. Examples of such systems include BigTable [8] at Google;and PNUTS [15] at Yahoo! During bulk inserts into an existing table; if most of the insertedrecords end up going into a small number of data partitions; the obtained throughput may bevery poor due to ineffective use of cluster parallelism. We propose a novel approach inwhich a planning phase is invoked before the actual insertions. By creating new partitionsand intelligently distributing partitions across machines; the planning phase ensures that theinsertion load will be well-balanced. Since there is a tradeoff between the cost of moving …,Proceedings of the 2008 ACM SIGMOD international conference on Management of data,2008,46
Extending network lifetime using an automatically tuned energy-aware MAC protocol,Rebecca Braynard; Adam Silberstein; Carla Ellis,Abstract Sensor network devices have limited battery resources primarily consumed by radiocommunication. Network nodes play different communication roles and consequentlyconsume different amounts of energy. Nodes with heavier communication burdensprematurely deplete their batteries and potentially partition the network such that othernodes are unable to communicate despite having energy remaining. We have developedSeesaw; an asynchronous and asymmetric MAC protocol that balances the energyconsumption among nodes with differing loads; and thus prolongs network lifetime.Balancing is possible through Seesaw mechanisms that allow heavily burdened nodes toshift some of the effort of maintaining communication to more lightly loaded neighboringnodes. We show how to exploit the flexibility of asynchrony and asymmetry to balance …,European Workshop on Wireless Sensor Networks,2006,43
Data infrastructure at LinkedIn,Aditya Auradkar; Chavdar Botev; Shirshanka Das; Dave De Maagd; Alex Feinberg; Phanindra Ganti; Lei Gao; Bhaskar Ghosh; Kishore Gopalakrishna; Brendan Harris; Joel Koshy; Kevin Krawez; Jay Kreps; Shi Lu; Sunil Nagaraj; Neha Narkhede; Sasha Pachev; Igor Perisic; Lin Qiao; Tom Quiggle; Jun Rao; Bob Schulman; Abraham Sebastian; Oliver Seeliger; Adam Silberstein; BBoris Shkolnik; Chinmay Soman; Roshan Sumbaly; Kapil Surlaker; Sajid Topiwala; Cuong Tran; Balaji Varadarajan; Jemiah Westerman; Zach White; David Zhang; Jason Zhang,Linked In is among the largest social networking sites in the world. As the company hasgrown; our core data sets and request processing requirements have grown as well. In thispaper; we describe a few selected data infrastructure projects at Linked In that have helpedus accommodate this increasing scale. Most of those projects build on existing open sourceprojects and are themselves available as open source. The projects covered in this paperinclude:(1) Voldemort: a scalable and fault tolerant key-value store;(2) Data bus: aframework for delivering database changes to downstream applications;(3) Espresso: adistributed data store that supports flexible schemas and secondary indexing;(4) Kafka: ascalable and efficient messaging system for collecting various user activity events and logdata.,Data Engineering (ICDE); 2012 IEEE 28th International Conference on,2012,40
Where in the world is my data,Sudarshan Kadambi; Jianjun Chen; Brian F Cooper; David Lomax; Raghu Ramakrishnan; Adam Silberstein; Erwin Tam; Hector Garcia-Molina,ABSTRACT Users of websites such as Facebook; Ebay and Yahoo! demand fast responsetimes; and these sites replicate data across globally distributed datacenters to achieve this.However; it is not necessary to replicate all data to all locations: if a European user's recordis never accessed in Asia; it does not make sense to pay the bandwidth and disk costs tomaintain an Asian replica. In this paper; we describe mechanisms for selectively replicatinglarge-scale web databases on a record-by-record basis. We introduce a flexible constraintlanguage to specify replication policy constraints. We then present an adaptive scheme forreplicating data to where it is most frequently accessed; while respecting policy constraintsand using minimal bookkeeping. Experiments using a modified version of our PNUTSsystem demonstrate our techniques work well.,Proceedings International Conference on Very Large Data Bases (VLDB),2011,38
Pnuts in flight: Web-scale data serving at yahoo,Adam Silberstein; Jianjun Chen; David Lomax; Brad McMillan; Masood Mortazavi; PPS Narayan; Raghu Ramakrishnan; Rusty Sears,Data management for stateful Web applications is extremely challenging. Applications mustscale as they grow in popularity; serve their content with low latency on a global scale; andbe highly available; even in the face of hardware failures. This need has generated a newclass of Internet-scale data management systems. Yahoo has more than 100 user-facingapplications and numerous internal platforms. To meet its data management needs; it builtthe PNUTS system. Here; the authors review PNUTS'growing adoption; point to specificapplications; and detail several of PNUTS'features.,IEEE Internet Computing,2012,25
Feed following: the big data challenge in social applications,Adam Silberstein; Ashwin Machanavajjhala; Raghu Ramakrishnan,Abstract Internet users spend billions of minutes per month on sites like Facebook andTwitter. These sites support feed following; where users" follow" activity streams associatedwith other users and entities. Followers get personalized feeds that blend streams producedby those followed. The emphasis on recency and relevance; and the highly variable fan-outof the follows graph; make this feature difficult to implement at the scale seen in major socialnetworks. In this paper; we place feed following in the context of existing research areas andhighlight the novel data management challenges that it poses; with the goal of stimulatingresearch in this new direction. We discuss solutions based on pub/sub; caching; andmaterialized views; and argue that none of these existing approaches fully exploit theunique characteristics of feed following. The number of distinct queries and the query rate …,Databases and Social Networks,2011,23
A batch of PNUTS: experiences connecting cloud batch and serving systems,Adam E Silberstein; Russell Sears; Wenchao Zhou; Brian Frank Cooper,Abstract Cloud data management systems are growing in prominence; particularly at largeInternet companies like Google; Yahoo!; and Amazon; which prize them for their scalabilityand elasticity. Each of these systems trades off between low-latency serving performanceand batch processing throughput. In this paper; we discuss our experience running batch-oriented Hadoop on top of Yahoo's serving-oriented PNUTS system instead of the standardHDFS file system. Though PNUTS is optimized for and primarily used for serving; a numberof applications at Yahoo! must run batch-oriented jobs that read or write data that is stored inPNUTS. Combining these systems reveals several key areas where the fundamentalproperties of each system are mismatched. We discuss our approaches to accommodatingthese mismatches; by either bending the batch and serving abstractions; or inventing new …,Proceedings of the 2011 ACM SIGMOD International Conference on Management of data,2011,23
Mechanism for supporting user content feeds,*,In one embodiment; for each one of one or more content producers; access a content-producing rate at which the content producer produces one or more items of content; and foreach one of one or more content consumers; access a content-consuming rate at which thecontent consumer consumes one or more items of content. For each one of a plurality ofconsumer-producer pairs; wherein the consumer-producer pair comprises one of the contentconsumers and one of the content producers; and the content consumer follows the contentproducer; select between a push strategy and a pull strategy for delivering one or moreitems of content from the content producer to the content consumer based on the content-consuming rate of the content consumer and the content-producing rate of the contentproducer.,*,2012,22
Adaptive file placement in a distributed file system,*,In a distributed system that includes multiple machines; a scheduler attempts to schedule atask on a machine that is not currently overloaded with work. If a task is scheduled on amachine that does not yet have copies of the portions of the data set on which the taskneeds to operate; then that machine obtains copies of those portions from other machinesthat already have them. Whenever a “source” machine ships a copy of a portion to another“destination” machine in the distributed system; the destination machine persistently storesthat copy on the destination machine's persistent storage mechanism. The copy alsoremains on the source machine. Thus; portions of the data set are automatically replicatedwhenever those portions are shipped between machines of the distributed system. Eachmachine in the distributed system has access to “global” information that indicates which …,*,2009,22
System and method for applying once a transaction delivered in a message published asynchronously in a distributed database,*,An improved system and method for applying once a transaction delivered in a messagepublished asynchronously in a distributed database is provided. In various embodiments;apply once messaging may be achieved for asynchronous publication by having apersistent log stored on a messaging server. A messaging server may receive an updatemessage for a transaction to be published asynchronously in a distributed database; maygenerate a sequence number for the transaction in a message; and may log the updatemessage with the sequence number in a log file persistently stored on the messagingserver. The messaging server may then send an acknowledgement that the updatemessage is published and may asynchronously publish the update message with thesequence number to subscribers. The publication may only succeed if there may not be …,*,2010,20
Adaptively parallelizing distributed range queries,Ymir Vigfusson; Adam Silberstein; Brian F Cooper; Rodrigo Fonseca,Abstract We consider the problem of how to best parallelize range queries in a massivescale distributed database. In traditional systems the focus has been on maximizingparallelism; for example by laying out data to achieve the highest throughput. However; in amassive scale database such as our PNUTS system [11] or BigTable [10]; maximizingparallelism is not necessarily the best strategy: the system has more than enough servers tosaturate a single client by returning results faster than the client can consume them; andwhen there are multiple concurrent queries; maximizing parallelism for all of them will causedisk contention; reducing everybody's performance. How can we find the right parallelismlevel for each query in order to achieve high; consistent throughput for all queries? Wepropose an adaptive approach with two aspects. First; we adaptively determine the ideal …,Proceedings of the VLDB Endowment,2009,16
System and method for loading records into a partitioned database table,*,An improved system and method for loading records into a partitioned database table isprovided. A translation of records may be generated from a set of source partitions to a set oftarget partitions by generating a bipartite graph; determining a maximal matching usingdynamic programming for a chain of nodes remaining in the bipartite graph after removingsingleton edges; and generating a maximal matching after adding back the singleton edgesfor translation of records from the set of source partitions to the set of target partitions. Thepartition translation may be executed by traversing from top to bottom the set of sourcepartitions and the set of target partitions in record key order to generate an optimal sequenceof operations to transfer the records from the set of source partitions to the set of targetpartitions.,*,2011,15
Push and pull in sensor network query processing,Adam Silberstein,Abstract Sensor networks provide new opportunities for data collection. This in turn createsopportunities to apply database techniques for analyzing this data. Such efforts arecomplicated because data is spread over wireless nodes that transmit messages via radio.Nodes have limited battery life; and using the radio is expensive. Therefore; rather thangathering all data at a base station; it is more efficient to construct query plans that transmitas little data as necessary to produce a solution. In this paper; we present an overview of ourwork on sensor network query processing and characterize it in the context of push versuspull techniques for data extraction. Push means to install conditions within the networkwhich; when met; trigger data transmission. Pull means to have the base station requestparticular data. We believe this is promising approach to generalizing processing …,Southeast Workshop on Data and Information Management (SWDIM’06); Raleigh; North Carolina,2006,14
The yahoo!: Cloud datastore load balancer,Markus Klems; Adam Silberstein; Jianjun Chen; Masood Mortazavi; Sahaya Andrews Albert; PPS Narayan; Adwait Tumbde; Brian Cooper,Abstract Sherpa is a large-scale distributed and globally replicated multi-tenant cloud datastorage system. Sherpa scales by horizontally partitioning data into tablets and distributingthese tablets across multiple servers. While Sherpa scales for increasing workload sizes byadding servers; it is vulnerable to load imbalance among tablets that cause hotspots todevelop on just a few servers. In this paper we describe Yak; the Sherpa load balancer. Yakdetects hotspots and then automatically balances load by migrating tablets from theoverloaded servers; and also by splitting data into new tablets. We describe Yak's designprinciples; algorithms and architecture. We then evaluate Yak on workloads based onSherpa production scenarios.,Proceedings of the fourth international workshop on Cloud data management,2012,13
System for providing scalable in-memory caching for a distributed database,*,A system is described for providing scalable in-memory caching for a distributed database.The system may include a cache; an interface; a non-volatile memory and a processor. Thecache may store a cached copy of data items stored in the non-volatile memory. Theinterface may communicate with devices and a replication server. The non-volatile memorymay store the data items. The processor may receive an update to a data item from a deviceto be applied to the non-volatile memory. The processor may apply the update to the cache.The processor may generate an acknowledgement indicating that the update was applied tothe non-volatile memory and may communicate the acknowledgment to the device. Theprocessor may then communicate the update to a replication server. The processor mayapply the update to the non-volatile memory upon receiving an indication that the update …,*,2010,11
User behavior-driven background cache refreshing,*,Methods and system for providing social feeds from a plurality of third party sites to a user ata host site includes retrieving one or more access logs capturing online behavior of the user.The access logs are analyzed to determine the user's interactive behavioral pattern relatedto social feeds from each of the plurality of third party sites. A refresh schedule for the user iscomputed to refresh cache entries of social feeds at the host site based on the analysis ofthe user's online behavior at the social feeds. Cache entries of social feeds for the user arerefreshed at the host site from the one or more of the plurality of third party sites at an allottedtime specified by the refresh schedule.,*,2014,10
System and/or method for bulk loading of records into an ordered distributed database,*,In a large-scale transaction such as the bulk loading of new records into an ordered;distributed database; a transaction limit such as an insert limit may be chosen; partitions onoverfull storage servers may be designated to be moved to underfull storage servers; andthe move assignments may be based; at least in part on the degree to which a storageserver is underfull and the move and insertion costs of the partitions to be moved.,*,2014,10
Efficient bulk load,*,The updating of large databases with large amounts of new information presentschallenges. In particular; the records in a large database may be stored in a plurality of partitionswith one or more partitions being handled by a server that forms part of a server system. Forexample; if the key is an ISBN number for an edition of a book; one partition might contain recordsassociated with ISBN numbers serving as a key; with the numbers falling; hypothetically; between0-545-01022-5 and 0-546-05204-7. Where a data server 12 stores multiple partitions; the partitionsmay or may not contain data in which the key ranges are sequential. For example; for a serverstoring a partition with the aforementioned hypothetical key range; and a second partition; thekey range of the second partition might not start where the key range of the first partition leavesoff; but rather may be a range that is much higher or much lower than the key range of the …,*,2009,10
NEXSORT: Sorting XML in external memory,Adam Silberstein; Jun Yang,XML plays an important role in delivering data over the Internet; and the need to store andmanipulate XML in its native format has become increasingly relevant. This growing neednecessitates work on developing native XML operators; especially for one as fundamentalas sort. We present NEXSORT; an algorithm that leverages the hierarchical nature of XML toefficiently sort an XML document in external memory. In a fully sorted XML document;children of every nonleaf element are ordered according to a given sorting criterion. AmongNEXSORT's uses is in combination with structural merge as the XML version of sort-mergejoin; which allows us to merge large XML documents using only a single pass once they aresorted. The hierarchical structure of an XML document limits the number of possible legalorderings among its elements; which means that sorting XML is fundamentally" easier" …,Data Engineering; 2004. Proceedings. 20th International Conference on,2004,10
Method and system for work load balancing,*,Method; system; and programs for balancing work load in a distributed system. A plurality ofmulti-dimensional load metrics are received from a plurality of resource units in thedistributed system. Based on the received plurality of multi-dimensional load metrics and aglobal statistical load model; a load deviance for each resource unit is computed. Theplurality of resource units in the distributed system are then ranked based on the loaddeviance of each resource unit. At least one load balancing action is further determinedbased on the ranked resource units and at least one load balancing policy.,*,2014,9
Data serving in the cloud,Raghu Ramakrishnan; Brian Cooper; Adam Silberstein; Utkarsh Srivastava,Page 1. 1 Data Serving in the Cloud Raghu Ramakrishnan Chief Scientist; Audience and CloudComputing Brian Cooper Adam Silberstein Utkarsh Srivastava Yahoo! Research Joint work withthe Sherpa team in Cloud Computing Page 2. 2 Outline • Clouds • Scalable serving—the newlandscape – Very Large Scale Distributed systems (VLSD) • Yahoo!'s PNUTS/Sherpa • Comparisonof several systems – Preview of upcoming Y! Cloud Serving (YCS) benchmark Page 3. 3 Typesof Cloud Services • Two kinds of cloud services: – Horizontal (“Platform”) Cloud Services •Functionality enabling tenants to build applications or new services on top of the cloud – FunctionalCloud Services • Functionality that is useful in and of itself to tenants. Eg; various SaaS instances;such as Saleforce.com; Google Analytics and Yahoo!'s IndexTools; Yahoo! properties aimed atend-users and small businesses; eg; flickr; Groups; Mail …,*,2010,9
Cache refreshing for online social news feeds,Xiao Bai; Flavio P Junqueira; Adam Silberstein,Abstract Several social networking applications enable users to view the events generatedby other users; typically friends in the social network; in the form of``news feeds''. Friendsand events are typically maintained per user and cached in memory to enable efficientgeneration of news feeds. Caching user friends and events; however; raises concerns aboutthe freshness of news feeds as users may not observe the most recent events when cachecontent becomes stale. Mechanisms to keep cache content fresh are thus critical for usersatisfaction while computing news feeds efficiently through caching. We propose a novelcache scheme called SOCR (Social Online Cache Refreshing) for identifying and refreshingcache entries. SOCR refreshes the cache in an online manner and does not require thebackend data store to push updates to the cache. SOCR uses a utility-based strategy to …,Proceedings of the 22nd ACM international conference on Information & Knowledge Management,2013,8
Parallel execution of range query,*,A method comprises receiving a range query from a requestor. The range query requests arange of sequential items in a database that is distributed among a plurality of storagedevices or partitions. The range query is divided into R sub-range queries; where R is aninteger. Each sub-range query corresponds to a respective portion of the range of sequentialitems stored in a respective storage device or partition. The sub-range queries are issued torespective ones of up to K storage servers; where K is an integer less than or equal to R.Each of the K storage servers is configured with read access to the respective storagedevice or partition storing the respective portion of the range of sequential items in therespective sub-range query issued to that storage server.,*,2010,8
HotROD: Managing grid storage with on-demand replication,Sriram Rao; Benjamin Reed; Adam Silberstein,Enterprises (such as; Yahoo!; LinkedIn; Facebook) operate their own compute/storageinfrastructure; which is effectively a “private cloud”. The private cloud consists of multipleclusters; each of which is managed independently. With HDFS; whenever data is stored inthe cluster; it is replicated within the cluster for availability. Unfortunately; for datasets sharedacross the enterprise; this leads to the problem of over-replication within the private cloud.An analysis of Yahoo!'s HDFS usage suggests that the disk space consumed due toreplication of shared datasets is substantial (viz.; to the tune of PB's of storage). New datasets are typically popular and requested by many processing jobs in (different) clusters. Thisdemand is satisfied by copying the dataset to each of the clusters. As data sets age;however; they get used less and become cold. We then have the opposite problem of …,Data Engineering Workshops (ICDEW); 2013 IEEE 29th International Conference on,2013,7
Efficient failure detection for long running data transfer jobs,*,Disclosed are methods and apparatus for error handling within jobs that utilize a plurality oftasks for data transfer of individual data records to a storage destination. For each task; oneor more failed records may be logged to a file for later insertion. If a high percentage of atask's output (eg; writes to another data storage system) is determined to be failing; the taskshort-circuits itself. Each task is also configured to perform checkpoint logging as the taskcompletes work. If the entire job later short-circuits and is to be restarted; the restarted jobonly repeats a minimal amount of previously completed work for the tasks which have notalready completed their data insertions. Together; these techniques can ensure that in theface of periodic failures; the job completes long-running job in a minimal time with minimaleffects.,*,2012,5
Shepherding social feed generation with sheep,Flavio P Junqueira; Vincent Leroy; Marco Serafini; Adam Silberstein,Abstract Social feeds are used in many popular Web applications. They let users produceevents; as well as read feeds containing the events generated by their friends. This paperinvestigates the design of an in-memory platform to manage social feeds. We show thatstraightforward memcache implementations suffer from a low throughput due to bandwidthbottlenecks. Following these observations; we propose Sheep; a system to supportapplications based on social feeds that leverages data aggregation and co-location toalleviate these bottlenecks. We show experimentally that Sheep outperforms memcacheimplementations by a factor of 7.,Proceedings of the Fifth Workshop on Social Network Systems,2012,5
Multiple aggregation for in-network control of sensors,Adam Silberstein; Jun Yang,Abstract Sensor networks have enormous potential to aid data collection in a number ofareas; including environmental and wildlife research. Some types of sensors; such as sapflow sensors and swirling cameras; consume lots of energy when sensing. A promisingapproach to conserving energy for such sensors is to institute in-network control of sensing;eg; decreasing their sampling rates when their readings are predictable or unimportant;while increasing their sampling rates when there are interesting activities. Control signalscan often be computed from low-cost readings obtained at multiple other nodes in thenetwork. In this paper; we address the challenges of supporting in-network control ofsensors. Computation and transmission of multiple control signals can be seen as runningmultiple aggregation inside the network; with many-to-many relationship between …,ICDE; April,2007,5
Methods and apparatuses for storing shared data files in distributed file systems,*,Various methods and apparatuses are provided which may be implemented using one ormore computing devices within a networked computing environment to support a computinggrid having selective storage of shared data files within certain distributed the systemsprovided by dusters of computing devices. The selective storage may represent limitedduplicative storage of a shared file.,*,2013,4
Untangling cluster management with Helix,Kishore Gopalakrishna; Shi Lu; Zhen Zhang; Adam Silberstein; Kapil Surlaker; Ramesh Subramonian; Bob Schulman,Abstract Distributed data systems systems are used in a variety of settings like onlineserving; offline analytics; data transport; and search; among other use cases. They letorganizations scale out their workloads using cost-effective commodity hardware; whileretaining key properties like fault tolerance and scalability. At LinkedIn we have built anumber of such systems. A key pattern we observe is that even though they may servedifferent purposes; they tend to have a lot of common functionality; and tend to use commonbuilding blocks in their architectures. One such building block that is just beginning toreceive attention is cluster management; which addresses the complexity of handling adynamic; large-scale system with many servers. Such systems must handle software andhardware failures; setup tasks such as bootstrapping data; and operational issues such …,Proceedings of the Third ACM Symposium on Cloud Computing,2012,3
Adaptive resource allocation for parallel execution of a range query,*,A method of allocating servers for range requests includes receiving a range request foritems in a database that is distributed across storage devices that are accessible throughcorresponding servers in a network that includes the storage devices and the servers; andinitializing a server-allocation value for the range request; where the server-allocation valuespecifies a number of servers to allocate for executing the range request. The method furtherincludes executing the range request by allocating the servers and using the allocatedservers to provide values from the range request to a client that accesses the network; andupdating the server-allocation value while executing the range request to improve aconsumption rate for the client by comparing changes in the consumption rate with changesin the number of allocated servers.,*,2010,3
Mechanism for supporting user content feeds,*,In one embodiment; for each one of one or more content producers; access a content-producing rate at which the content producer produces one or more items of content; and foreach one of one or more content consumers; access a content-consuming rate at which thecontent consumer consumes one or more items of content. For each one of a plurality ofconsumer-producer pairs; wherein the consumer-producer pair comprises one of the contentconsumers and one of the content producers; and the content consumer follows the contentproducer; select between a push strategy and a pull strategy for delivering one or moreitems of content from the content producer to the content consumer based on the content-consuming rate of the content consumer and the content-producing rate of the contentproducer.,*,2013,2
Report on the fourth international workshop on cloud data management (CloudDB 2012),Xiaofeng Meng; Fusheng Wang; Adam Silberstein,The workshop series on Cloud Data Management (CloudDB) has been held successfully inthe past four years [4; 2; 3; 5]. CloudDB serves as a premier forum for researchers andpractitioners to present research results and share ideas and progress in the area of datamanagement within cloud computing infrastructure. Technology advances incommunications; computation; and storage result in huge collections of data; capturinginformation of value to business; science; government; and society. Data volumes arecurrently growing faster than Moore's law. Looking forward; the exponential growth is notlikely to stop. The huge volumes of data pose major infrastructure challenges; including datastorage at Petabyte scale; massively parallel query execution; facilities for analyticalprocessing; and online query processing. Meanwhile; the rise of large data centers and …,ACM SIGMOD Record,2013,2
Cloud data management@ Yahoo!,Raghu Ramakrishnan; Brian Cooper; Adam Silberstein,Page 1. 1 Cloud Data Management @ Yahoo! Raghu Ramakrishnan Chief Scientist; Audienceand Cloud Computing Brian Cooper Adam Silberstein Yahoo! Research Joint work with theSherpa team in Cloud Computing Page 2. 2 Cloud Services @Y!: Use Cases Ads OptimizationContent Optimization Search Index Image/Video Storage & Delivery Machine Learning (egSpam filters) Attachment Storage Page 3. 3 Yahoo! Cloud Stack Provisioning (Self-serve)Horizontal Cloud Services … YCS YCPI Brooklyn EDGE M onitoring/M etering/SecurityHorizontal Cloud Services … Hadoop BATCH STORAGE Horizontal Cloud Services …PNUTS/Sherpa MOBStor OPERATIONAL STORAGE Horizontal Cloud Services VM/OS …APP Horizontal Cloud Services VM/OS yApache WEB D ata H igh w ay Serving Grid PHPApp Engine Page 4. 4 Requirements for Cloud Services …,DASFAA (1),2010,2
Data aggregation in sensor networks,Jun Yang; Kamesh Munagala; Adam Silberstein,realized using such logical structures. For example; in tree based data acquisition protocols;a collection tree is built that is rooted at the data collection center such as the sink node [8].The dissemination of the data requests from the participating nodes and collection of datafrom the sensor nodes are accomplished using this tree. A cluster based data acquisitionmechanism has been proposed in [3]. As shown in Fig. 1; nodes are organized into a fixednumber of clusters; and nodes within each cluster dynamically elect a cluster head. The dataacquisition is carried out in two phases. In the first phase; cluster heads collect data fromtheir cluster nodes. In the second phase; cluster heads send collected data to the nodes thathave subscribed to the data. The cluster heads are re-elected to balance energyconsumption among the nodes in the cluster. Zhang et al.[13] have proposed an adaptive …,*,2009,2
Energy-efficient continuous isoline queries in sensor networks,Adam Silberstein; Rebecca Braynard; Jun Yang,Environmental monitoring is a promising application for sensor networks. Many scenariosproduce geographically correlated readings; making them visually interesting and goodtargets for the isoline query. This query depicts boundaries showing how values change inthe network. Temporal and spatial suppression provide opportunities for reducing the cost ofmaintaining the query result. We combine both techniques for maximal benefit by monitoringnode and edge constraints. A monitored node triggers a report if its value changes. Amonitored edge triggers a report if the difference between its nodes' values changes. Theroot collects reports and derives all node values; from which the query result is generated.We fully exploit this strategy in our algorithm; CONCH; which maintains the set of node andedge constraints that minimizes message traffic.,Data Engineering; 2006. ICDE'06. Proceedings of the 22nd International Conference on,2006,2
Clouddb 2012: fourth international workshop on cloud data management,Xiaofeng Meng; Adam Silberstein; Fusheng Wang,Abstract The fourth ACM international workshop on cloud data management is held in Maui;Hawaii; USA on October 29; 2012 and co-located with the ACM 21th Conference onInformation and Knowledge Management (CIKM). The main objective of the workshop is toaddress the challenges of large scale data management based on the cloud computinginfrastructure. The workshop brings together researchers and practitioners from cloudcomputing; distributed storage; query processing; parallel algorithms; data mining; andsystem analysis; all attendees share common research interests in maximizing performance;reducing cost of cloud data management and enlarging the scale of their endeavors. Wehave constructed an exciting program of seven refereed papers and four invited keynotetalks that will give participants a full dose of emerging research.,Proceedings of the 21st ACM international conference on Information and knowledge management,2012,1
Cache Refreshing for Online Social Newsfeeds,*,Software for an online social service receives a request for a newsfeed from a user. Thenewsfeed depends at least in part on a memory-cached list of social friends of the user andon a memory-cached list of events associated with each social friend. The softwarerefreshes a memory-cached copy of the list of social friends from a corresponding list in apersistent data store; based upon a determination of a utility associated with the user. Andthe software refreshes a memory-cached copy of a list of events associated with a socialfriend from a corresponding list of events in a persistent data store; based upon adetermination of a utility associated with the social friend. Then the software causes thenewsfeed to be displayed to the user.,*,2015,*
TECHNICAL REPORT YL-2009-003,Ymir Vigfusson; Adam Silberstein; Brian F Cooper; Rodrigo Fonseca,ABSTRACT: We consider the problem of how to best parallelize range queries in a massivescale distributed database. In traditional systems the focus has been on maximizingparallelism; for example by laying out data to achieve the highest throughput. However; in amassive scale database such as our PNUTS system [10] or BigTable [9]; maximizingparallelism is not necessarily the best strategy: the system has more than enough servers tosaturate a single client by returning results faster than the client can consume them; andwhen there are multiple concurrent queries; maximizing parallelism for all of them will causedisk contention; reducing everybody's performance. How can we find the right parallelismlevel for each query in order to achieve high; consistent throughput for all queries? Wepropose an adaptive approach with two aspects. First; we adaptively determine the ideal …,*,2009,*
Query Processing Methods for Wireless Sensor Networks,Adam Eli SIlberstein,*,*,2007,*
ICDE 2009,Adam Silberstein; Akrivi Vlachou; Alexander G Connor; Alfredo Goñi; Ali Inan; Amar Phanishayee; Amruta Joshi; Anastasios Kementsietsidis; Ander de Keijzer; Anduo Wang; Anish Das Sarma; Arjun Dasgupta; Arthur H Lee; Arvind Arasu; Arvind Thiagarajan; Badrish Chandramouli; Barzan Mozafari; Bee-Chung Chen; Bhargav Kanagal; Bing-Rong Lin; Bingsheng He; Biswanath Panda; Bo Xu; Bogdan Alexe; Bolin Ding; Brandon Unger; Brian Ruttenberg; Bruce Lindsa; Caetano Traina Jr; Cao Yu; Carina F Dorneles; Changbin Liu; Changbin Song; Changliang Wang; Charalambos Charalambous; Chengkai Li; Choudur K Lakshminarayan; Chris Mayfield; Chris Re; Christian Beecks; Christoph Lofi; Christophe Bobineau; Christos Doulkeridis; Chuan Xiao; Congxing Cai; Conny Franke; Craig Freedman; Cyrus Shahabi; Daniela Leal Musa; David Detlefs; David Novak; Davide Mazza; Debojyoti Dutta; Derek Hao Hu; Dimitrios Tsoumakos; Dimitris Sacharidis; Dimitris Tsoumakos; Djoerd Hiemstra; Dominic Mueller; Duygu Ucar; Eduardo Mena; Eirinaios Michelakis; Emmanuel Müller; Eunseok Yang; Evan Welbourne; Evangelos Dellis; Fan Yang; Fatma Ozcan; Florin Rusu; Gabriel Ghinita; Gagan Agrawal; Gaoping Zhu; George Beskales; George Pallis; Grigoris Karvounarakis; Guadalupe Canahuate; Haibo Hu,Adam Silberstein Akrivi Vlachou Alexander G. Connor Alfredo Goñi Ali Inan Amar PhanishayeeAmruta Joshi Anastasios Kementsietsidis Ander de Keijzer Anduo Wang Anish Das Sarma ArjunDasgupta Arthur H. Lee Arvind Arasu Arvind Thiagarajan Badrish Chandramouli Barzan MozafariBee-Chung Chen Bhargav Kanagal Bing-Rong Lin Bingsheng He Biswanath Panda Bo Xu BogdanAlexe Bolin Ding Brandon Unger Brandon Unger Brian Ruttenberg Bruce Lindsa Caetano TrainaJr Cao Yu Carina F. Dorneles Changbin Liu Changbin Song Changliang Wang CharalambosCharalambous Chengkai Li Choudur K. Lakshminarayan Chris Mayfield … Chris Re ChristianBeecks Christoph Lofi Christophe Bobineau Christos Doulkeridis Chuan Xiao Congxing CaiConny Franke Craig Freedman Cyrus Shahabi Daniela Leal Musa David Detlefs David NovakDavide Mazza Debojyoti Dutta Derek Hao Hu Dimitrios Tsoumakos Dimitris Sacharidis …,*,*,*
TECHNICAL REPORT YL-2012-004,Sriram Rao; Benjamin Reed; Adam Silberstein,*,*,*,*
Demo Program Committee,Sihem Amer-Yahia; Arvind Arasu; Sunil Arvindam; Magdalena Balazinska; Fabio Casati; Malu Castellanos; Mariano Cilia; Brian F Cooper; Adina Crainiceanu; Abhinandan Das; Alin Dobra; Pablo Guerrero; Christian Konig; Georgia Koutrika; Wolfgang Lehner; Feifei Li; Ashwin Machanavajjhala; Thomas Neumann; Dan Olteanu; Carlos Ordonez; Peter Pietzuch; Adam Silberstein; Alkis Simitsis,Sihem Amer-Yahia; Qatar Computing Research Institute Arvind Arasu; Microsoft Research SunilArvindam; SAP Research; India Magdalena Balazinska; University of Washington FabioCasati; University of Trento; Italy Malu Castellanos; HP Labs; USA Mariano Cilia; IntelCorporation; Argentina Brian F Cooper; Google Adina Crainiceanu; US Naval Academy AbhinandanDas; Google Alin Dobra; University of Florida Javier Garcia-Garcia; UNAM University; MexicoPablo Guerrero; TU Darmstadt; Germany Melanie Herschel; Tubingen University ChristianKonig; Microsoft Research Georgia Koutrika; IBM Almaden Research Center WolfgangLehner; TU Dresden; Germany Feifei Li; Florida State University Ashwin Machanavajjhala; YahooResearch Thomas Neumann; TU Munchen Dan Olteanu; University of Oxford CarlosOrdonez; University of Houston Peter Pietzuch; Imperial College London Lin Qiao; IBM …,*,*,*
A Sampling-Based Approach to Optimizing Top,Adam Silberstein; Rebecca Braynard; Carla Ellis Kamesh Munagala Jun Yang,Abstract Wireless sensor networks generate a vast amount of data. This data; however; mustbe sparingly extracted to conserve energy; usually the most precious resource inbatterypowered sensors. When approximation is acceptable; a model-driven approach toquery processing is effective in saving energy by avoiding contacting nodes whose valuescan be predicted or are unlikely to be in the result set. However; to optimize queries such astop-E; reasoning directly with models of joint probability distributions can be prohibitivelyexpensive. Instead of using models explicitly; we propose to use samples of past sensorreadings. Not only are such samples simple to maintain; but they are also computationallyefficient to use in query optimization. With these samples; we can formulate the problem ofoptimizing approximate top-E queries under an energy constraint as a linear program. We …,*,*,*
Modeling Trac Intersections to Optimize Flow,Ke Yi; Adam Silberstein,*,*,*,*
