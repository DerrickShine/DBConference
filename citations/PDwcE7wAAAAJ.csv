Stream: The stanford data stream management system,Arvind Arasu; Brian Babcock; Shivnath Babu; John Cieslewicz; Mayur Datar; Keith Ito; Rajeev Motwani; Utkarsh Srivastava; Jennifer Widom,Abstract Traditional database management systems are best equipped to run one-timequeries over finite stored data sets. However; many modern applications such as networkmonitoring; financial analysis; manufacturing; and sensor networks require long-running; orcontinuous; queries over continuous unbounded streams of data. In the STREAM project atStanford; we are investigating data management and query processing for this class ofapplications. As part of the project we are building a general-purpose prototype Data StreamManagement System (DSMS); also called STREAM; that supports a large class ofdeclarative continuous queries over continuous streams and traditional stored data sets. TheSTREAM prototype targets environments where streams may be rapid; streamcharacteristics and query loads may vary over time; and system resources may be limited.,*,2016,167
F1: A distributed SQL database that scales,Jeff Shute; Radek Vingralek; Bart Samwel; Ben Handy; Chad Whipkey; Eric Rollins; Mircea Oancea; Kyle Littlefield; David Menestrina; Stephan Ellner; John Cieslewicz; Ian Rae; Traian Stancescu; Himani Apte,Abstract F1 is a distributed relational database system built at Google to support theAdWords business. F1 is a hybrid database that combines high availability; the scalability ofNoSQL systems like Bigtable; and the consistency and usability of traditional SQLdatabases. F1 is built on Spanner; which provides synchronous cross-datacenter replicationand strong consistency. Synchronous replication implies higher commit latency; but wemitigate that latency by using a hierarchical schema model with structured data types andthrough smart application design. F1 also includes a fully functional distributed SQL queryengine and automatic change tracking and publishing.,Proceedings of the VLDB Endowment,2013,149
SQL/MapReduce: A practical approach to self-describing; polymorphic; and parallelizable user-defined functions,Eric Friedman; Peter Pawlowski; John Cieslewicz,Abstract A user-defined function (UDF) is a powerful database feature that allows users tocustomize database functionality. Though useful; present UDFs have numerous limitations;including install-time specification of input and output schema and poor ability to parallelizeexecution. We present a new approach to implementing a UDF; which we callSQL/MapReduce (SQL/MR); that overcomes many of these limitations. We leverage ideasfrom the MapReduce programming paradigm to provide users with a straightforward APIthrough which they can implement a UDF in the language of their choice. Moreover; ourapproach allows maximum flexibility as the output schema of the UDF is specified by thefunction itself at query plan-time. This means that a SQL/MR function is polymorphic. It canprocess arbitrary input because its behavior as well as output schema are dynamically …,Proceedings of the VLDB Endowment,2009,132
Adaptive aggregation on chip multiprocessors,John Cieslewicz; Kenneth A Ross,Abstract The recent introduction of commodity chip multiprocessors requires that the designof core database operations be carefully examined to take full advantage of on-chipparallelism. In this paper we examine aggregation in a multi-core environment; the SunUltraSPARC T1; a chip multiprocessor with eight cores and a shared L2 cache. Aggregationis an important aspect of query processing that is seemingly easy to understand andimplement. Our research; however; demonstrates that a chip multiprocessor adds newdimensions to understanding hash-based aggregation performance---concurrent sharing ofaggregation data structures and contentious accesses to frequently used values. We alsoidentify a trade off between private data structures assigned to each thread versus shareddata structures for aggregation. Depending on input characteristics; different aggregation …,Proceedings of the 33rd international conference on Very large data bases,2007,107
Improving database performance on simultaneous multithreading processors,Jingren Zhou; John Cieslewicz; Kenneth A Ross; Mihir Shah,Abstract Simultaneous multithreading (SMT) allows multiple threads to supply instructions tothe instruction pipeline of a superscalar processor. Because threads share processorresources; an SMT system is inherently different from a multiprocessor system and;therefore; utilizing multiple threads on an SMT processor creates new challenges fordatabase implementers. We investigate three thread-based techniques to exploit SMTarchitectures on memory-resident data. First; we consider running independent operationsin separate threads; a technique applied to conventional multi-processor systems. Second;we describe a novel implementation strategy in which individual operators are implementedin a multi-threaded fashion. Finally; we introduce a new data-structure called a work-aheadset that allows us to use one of the threads to aggressively preload data into the cache …,Proceedings of the 31st international conference on Very large data bases,2005,100
Data partitioning on chip multiprocessors,John Cieslewicz; Kenneth A Ross,Abstract Partitioning is a key database task. In this paper we explore partitioningperformance on a chip multiprocessor (CMP) that provides a relatively high degree of on-chip thread-level parallelism. It is therefore important to implement the partitioning algorithmto take advantage of the CMP's parallel execution resources. We identify the coordination ofwriting partition output as the main challenge in a parallel partitioning implementation andevaluate four techniques for enabling parallel partitioning. We confirm previous work insingle threaded partitioning that finds L2 cache misses and translation lookaside buffermisses to be important performance issues; but we now add the management of concurrentthreads to this analysis.,Proceedings of the 4th international workshop on Data management on new hardware,2008,44
Parallel buffers for chip multiprocessors,John Cieslewicz; Kenneth A Ross; Ioannis Giannakakis,Abstract Chip multiprocessors (CMPs) present new opportunities for improving databaseperformance on large queries. Because CMPs often share execution; cache; or bandwidthresources among many hardware threads; implementing parallel database operators thatefficiently share these resources is key to maximizing performance. A crucial aspect of thisparallelism is managing concurrent; shared input and output to the parallel operators. In thispaper we propose and evaluate a parallel buffer that enables intra-operator parallelism onCMPs by avoiding contention between hardware threads that need to concurrently read orwrite to the same buffer. The parallel buffer handles parallel input and output coordination aswell as load balancing so individual operators do not need to reimplement that functionality.,Proceedings of the 3rd international workshop on Data management on new hardware,2007,36
Realizing parallelism in database operations: insights from a massively multithreaded architecture,John Cieslewicz; Jonathan Berry; Bruce Hendrickson; Kenneth A Ross,Abstract A new trend in processor design is increased on-chip support for multithreading inthe form of both chip multiprocessors and simultaneous multithreading. Recent research indatabase systems has begun to explore increased thread-level parallelism made possibleby these new multicore and multithreaded processors. The question of how best to use thisnew technology remains open; particularly as the number of cores per chip and threads percore increase. In this paper we use an existing massively multithreaded architecture; theCray MTA-2; to explore the implications that a larger degree of on-chip multithreading mayhave for parallelism in database operations. We find that parallelism in database operationsis easy to achieve on the MTA-2 and that; with little effort; parallelism can be made to scalelinearly with the number of available processor cores.,Proceedings of the 2nd international workshop on Data management on new hardware,2006,33
Automatic contention detection and amelioration for data-intensive operations,John Cieslewicz; Kenneth A Ross; Kyoho Satsumi; Yang Ye,Abstract To take full advantage of the parallelism offered by a multi-core machine; one mustwrite parallel code. Writing parallel code is difficult. Even when one writes correct code;there are numerous performance pitfalls. For example; an unrecognized data hotspot couldmean that all threads effectively serialize their access to the hotspot; and throughput isdramatically reduced. Previous work has demonstrated that database operations suffer fromsuch hotspots when naively implemented to run in parallel on a multi-core processor. In thispaper; we aim to provide a generic framework for performing certain kinds of concurrentdatabase operations in parallel. The formalism is similar to user-defined aggregates andGoogle's MapReduce in that users specify certain functions for parts of the computation thatneed to be performed over large volumes of data. We provide infrastructure that allows …,Proceedings of the 2010 ACM SIGMOD International Conference on Management of data,2010,31
Cache-conscious buffering for database operators with state,John Cieslewicz; William Mee; Kenneth A Ross,Abstract Database processes must be cache-efficient to effectively utilize modern hardware.In this paper; we analyze the importance of temporal locality and the resultant cachebehavior in scheduling database operators for in-memory; block oriented query processing.We demonstrate how the overall performance of a workload of multiple database operatorsis strongly dependent on how they are interleaved with each other. Longer time slicescombined with temporal locality within an operator amortize the effects of the initialcompulsory cache misses needed to load the operator's state; such as a hash table; into thecache. Though running an operator to completion over all of its input results in the greatestamortization of cache misses; this is typically infeasible because of the large intermediatestorage requirement to materialize all input tuples to an operator. We show …,Proceedings of the Fifth International Workshop on Data Management on New Hardware,2009,25
Database optimizations for modern hardware,John Cieslewicz; Kenneth A Ross,Databases are an important workload for modern commodity microarchitectures. Achievingthe best performance requires that careful attention be paid to the underlying architecture;including instruction and data cache usage; data layout; branch prediction; andmultithreading. Specialized commodity microarchitectures; such as graphics cards andnetwork processors; have also been investigated as effective query coprocessors. Thispaper presents a survey of recent architecture-sensitive database research. The insightsgained from optimizing database performance on modern microarchitectures are alsoapplicable to other domains; particularly those that are similarly data intensive.,Proceedings of the IEEE,2008,25
Using bitmap index for joint queries on structured and text data,Kurt Stockinger; John Cieslewicz; Kesheng Wu; Doron Rotem; Arie Shoshani,Abstract The database and the information retrieval communities have been working onseparate sets of techniques for querying structured data and text data; but there is a growingneed to handle these types of data together. In this paper; we present a strategy to efficientlyanswer joint queries on both types of data. By using an efficient compression algorithm; ourcompressed bitmap indexes; called FastBit; are compact even when they contain millions ofbitmaps. Therefore FastBit can be applied effectively on hundreds of thousands of termsover millions of documents. Bitmap indexes are designed to take advantage of data that onlygrows but does not change over time (append-only data); and thus are just as effective withappend-only text archives. In a performance comparison against a commonly useddatabase system with a full-text index; MySQL; we demonstrate that our indexes answer …,*,2009,22
Optimal splitters for database partitioning with size bounds,Kenneth A Ross; John Cieslewicz,Abstract Partitioning is an important step in several database algorithms; including sorting;aggregation; and joins. Partitioning is also fundamental for dividing work into equal-sized (orbalanced) parallel subtasks. In this paper; we aim to find; materialize and maintain a set ofpartitioning elements (splitters) for a data set. Unlike traditional partitioning elements; oursplitters define both inequality and equality partitions; which allows us to bound the size ofthe inequality partitions. We provide an algorithm for determining an optimal set of splittersfrom a sorted data set and show that it has time complexity O (k lg 2 N); where k is thenumber of splitters requested and N is the size of the data set. We show how the algorithmcan be extended to pairs of tables; so that joins can be partitioned into work units that havebalanced cost. We demonstrate experimentally (a) that finding the optimal set of splitters …,Proceedings of the 12th International Conference on Database Theory,2009,21
Data-Stream Management: Processing High-Speed Data Streams; chapter STREAM,Arvind Arasu; Brian Babcock; Shivnath Babu; John Cieslewicz; Mayur Datar; Keith Ito; Rajeev Motwani; Utkarsh Srivastava; Jennifer Widom,*,*,2006,12
Architecture Sensitive Database Design: Examples from the Columbia Group.,Kenneth A Ross; John Cieslewicz; Jun Rao; Jingren Zhou,In this article; we discuss how different aspects of modern CPU architecture can beeffectively used by database systems. While we shall try to cover most important aspects ofmodern architectures; we shall not aim to provide an exhaustive survey of the literature.Rather; we will use examples from our own recent work to illustrate the principles involved.While there is related work on using other components of modern machines such asgraphics cards and intelligent disk controllers for database work; we limit our discussionhere to just a single CPU and the memory hierarchy (excluding disks). In recent years theprimary focus of database performance research has fundamentally shifted from disks tomain memory. Systems with a very large main memory allow a database's working set to fitin RAM. At the same time processors have continued to double in performance roughly …,IEEE Data Eng. Bull.,2005,6
Using bitmap indexing technology for combined numerical and text queries,Kurt Stockinger; John Cieslewicz; Kesheng Wu; Doron Rotem; Arie Shoshani,In this paper; we describe a strategy of using compressed bitmap indices to speed upqueries on both numerical data and text documents. By using an efficient compressionalgorithm; these compressed bitmap indices are compact even for indices with millions ofdistinct terms. Moreover; bitmap indices can be used very efficiently to answer Booleanqueries over text documents involving multiple query terms. Existing inverted indices for textsearches are usually inefficient for corpora with a very large number of terms as well as forqueries involving a large number of hits. We demonstrate that our compressed bitmap indextechnology overcomes both of those short-comings. In a performance comparison against acommonly used database system; our indices answer queries 30 times faster on average.To provide full SQL support; we integrated our indexing software; called FastBit; with …,*,2006,2
Architecture-conscious database system,John Cieslewicz; Kenneth A Ross,1. Software non-determinism: A software system is non-deterministic if; when re-executed; itresults in a different execution path than a prior execution. Non-determinism can arise when;for example; paths are determined by relative processor speed or the sequence of externalevents. Such software bugs have been called ''Heisenbugs''(hard failures being ''Bohrbugs'').2. Soft hardware failures: Hardware can also suffer from ''Heisenbugs.''For example; atransient hardware failure may be triggered by an environmental cause; such as a cosmicray changing a memory bit; etc. 3. Operator failures: Systems occasionally require operatorintervention. Operators; being human; make mistakes. An operator is unlikely to make thesame mistake at the same point in a subsequent execution.,*,2009,1
Architecture-sensitive database query processing on chip multiprocessors,John Michael Cieslewicz,Abstract Microprocessor design is currently in the midst of a sea change; which will have asignificant impact on all computer applications including database management systems;the focus of this thesis. For the past several decades; microprocessor performance has beendriven primarily by higher clock rates and the subsequent faster execution of a single streamof instructions (a single thread). Faster chip speeds require more power and produce moreheat. A single thread also has difficulty providing enough work to keep a chip busy becauseapplications often have to wait for high-latency operations such as loading data frommemory; an operation that becomes more expensive in terms of processor cycles the fastera chip is. For these reasons; processor architects have recently begun to improve processorperformance by increasing the degree of on-chip thread-level parallelism rather than the …,*,2009,*
Data Engineering,Kenneth A Ross; John Cieslewicz; Jun Rao; Jingren Zhou,The Bulletin of the Technical Committee on Data Engineering is published quarterly and isdistributed to all TC members. Its scope includes the design; implementation; modelling;theory and application of database systems and their technology. Letters; conferenceinformation; and news should be sent to the Editor-in-Chief. Papers for each issue aresolicited by and should be sent to the Associate Editor responsible for the issue. Opinionsexpressed in contributions are those of the authors and do not necessarily reflect thepositions of the TC on Data Engineering; the IEEE Computer Society; or the authors'organizations. Membership in the TC on Data Engineering is open to all current members ofthe IEEE Computer Society who are interested in database systems. There are two DataEngineering Bulletin web sites: http://www. research. microsoft. com/research/db/debull …,Ann Arbor,*,*
