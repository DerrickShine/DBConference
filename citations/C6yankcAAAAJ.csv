Hibernator: helping disk arrays sleep through the winter,Qingbo Zhu; Zhifeng Chen; Lin Tan; Yuanyuan Zhou; Kimberly Keeton; John Wilkes,Abstract Energy consumption has become an important issue in high-end data centers; anddisk arrays are one of the largest energy consumers within them. Although several attemptshave been made to improve disk array energy management; the existing solutions eitherprovide little energy savings or significantly degrade performance for data center workloads.Our solution; Hibernator; is a disk array energy management system that provides improvedenergy savings while meeting performance goals. Hibernator combines a number oftechniques to achieve this: the use of disks that can spin at different speeds; a coarse-grained approach for dynamically deciding which disks should spin at which speeds;efficient ways to migrate the right data to an appropriate-speed disk automatically; andautomatic performance boosts if there is a risk that performance goals might not be met …,ACM SIGOPS Operating Systems Review,2005,379
A high throughput string matching architecture for intrusion detection and prevention,Lin Tan; Timothy Sherwood,Network intrusion detection and prevention systems have emerged as one of the mosteffective ways of providing security to those connected to the network; and at the heart ofalmost every modern intrusion detection system is a string matching algorithm. Stringmatching is one of the most critical elements because it allows for the system to makedecisions based not just on the headers; but the actual content flowing through the network.Unfortunately; checking every byte of every packet to see if it matches one of a set of tenthousand strings becomes a computationally intensive task as network speeds grow into thetens; and eventually hundreds; of gigabits/second. To keep up with these speeds aspecialized device is required; one that can maintain tight bounds on worst caseperformance; that can be updated with new rules without interrupting operation; and one …,Computer Architecture; 2005. ISCA'05. Proceedings. 32nd International Symposium on,2005,343
Have things changed now?: an empirical study of bug characteristics in modern open source software,Zhenmin Li; Lin Tan; Xuanhui Wang; Shan Lu; Yuanyuan Zhou; Chengxiang Zhai,Abstract Software errors are a major cause for system failures. To effectively design toolsand support for detecting and recovering from software failures requires a deepunderstanding of bug characteristics. Recently; software and its development process havesignificantly changed in many ways; including more help from bug detection tools; shifttowards multi-threading architecture; the open-source development paradigm andincreasing concerns about security and user-friendly interface. Therefore; results fromprevious studies may not be applicable to present software. Furthermore; many new aspectssuch as security; concurrency and open-source-related characteristics have not well studied.Additionally; previous studies were based on a small number of bugs; which may lead tonon-representative results. To investigate the impacts of the new factors on software …,Proceedings of the 1st workshop on Architectural and system support for improving software dependability,2006,239
SherLog: error diagnosis by connecting clues from run-time logs,Ding Yuan; Haohui Mai; Weiwei Xiong; Lin Tan; Yuanyuan Zhou; Shankar Pasupathy,Abstract Computer systems often fail due to many factors such as software bugs oradministrator errors. Diagnosing such production run failures is an important but challengingtask since it is difficult to reproduce them in house due to various reasons:(1) unavailabilityof users' inputs and file content due to privacy concerns;(2) difficulty in building the exactsame execution environment; and (3) non-determinism of concurrent executions on multi-processors. Therefore; programmers often have to diagnose a production run failure basedon logs collected back from customers and the corresponding source code. Such diagnosisrequires expert knowledge and is also too time-consuming; tedious to narrow down rootcauses. To address this problem; we propose a tool; called SherLog; that analyzes sourcecode by leveraging information provided by run-time logs to infer what must or may have …,ACM SIGARCH computer architecture news,2010,187
Bugbench: Benchmarks for evaluating bug detection tools,Shan Lu; Zhenmin Li; Feng Qin; Lin Tan; Pin Zhou; Yuanyuan Zhou,ABSTRACT Benchmarking provides an effective way to evaluate different tools.Unfortunately; so far there is no good benchmark suite to systematically evaluate softwarebug detection tools. As a result; it is difficult to quantitatively compare the strengths andlimitations of existing or newly proposed bug detection tools. In this paper; we share ourexperience of building a bug benchmark suite called BugBench. Specifically; we firstsummarize the general guidelines on the criteria for selecting representative bugbenchmarks; and the metrics for evaluating a bug detection tool. Second; we present a set ofbuggy applications collected by us; with various types of software bugs. Third; we conduct apreliminary study on the application and bug characteristics in the context of software bugdetection. Finally; we evaluate several existing bug detection tools including Purify …,Workshop on the evaluation of software defect detection tools,2005,184
Asdroid: Detecting stealthy behaviors in android applications by user interface and program behavior contradiction,Jianjun Huang; Xiangyu Zhang; Lin Tan; Peng Wang; Bin Liang,Abstract Android smartphones are becoming increasingly popular. The open nature ofAndroid allows users to install miscellaneous applications; including the malicious ones;from third-party marketplaces without rigorous sanity checks. A large portion of existingmalwares perform stealthy operations such as sending short messages; making phone callsand HTTP connections; and installing additional malicious components. In this paper; wepropose a novel technique to detect such stealthy behavior. We model stealthy behavior asthe program behavior that mismatches with user interface; which denotes the user'sexpectation of program behavior. We use static program analysis to attribute a top levelfunction that is usually a user interaction function with the behavior it performs. Then weanalyze the text extracted from the user interface component associated with the top level …,Proceedings of the 36th International Conference on Software Engineering,2014,122
/* iComment: Bugs or bad comments?*,Lin Tan; Ding Yuan; Gopal Krishna; Yuanyuan Zhou,Abstract Commenting source code has long been a common practice in softwaredevelopment. Compared to source code; comments are more direct; descriptive and easy-to-understand. Comments and sourcecode provide relatively redundant and independentinformation regarding a program's semantic behavior. As software evolves; they can easilygrow out-of-sync; indicating two problems:(1) bugs-the source code does not follow theassumptions and requirements specified by correct program comments;(2) bad comments-comments that are inconsistent with correct code; which can confuse and misleadprogrammers to introduce bugs in subsequent versions. Unfortunately; as most commentsare written in natural language; no solution has been proposed to automatically analyzecommentsand detect inconsistencies between comments and source code. This paper …,ACM SIGOPS Operating Systems Review,2007,119
Bit-split string-matching engines for intrusion detection and prevention,Lin Tan; Brett Brotherton; Timothy Sherwood,Abstract Network Intrusion Detection and Prevention Systems have emerged as one of themost effective ways of providing security to those connected to the network and at the heartof almost every modern intrusion detection system is a string-matching algorithm. Stringmatching is one of the most critical elements because it allows for the system to makedecisions based not just on the headers; but the actual content flowing through the network.Unfortunately; checking every byte of every packet to see if it matches one of a set ofthousands of strings becomes a computationally intensive task as network speeds grow intothe tens; and eventually hundreds; of gigabits/second. To keep up with these speeds; aspecialized device is required; one that can maintain tight bounds on worst-caseperformance; that can be updated with new rules without interrupting operation; and one …,ACM Transactions on Architecture and Code Optimization (TACO),2006,108
Personalized Defect Prediction,Tian Jiang; Lin Tan; Sunghun Kim,Abstract Many defect prediction techniques have been proposed. While they often take theauthor of the code into consideration; none of these techniques build a separate predictionmodel for each developer. Different developers have different coding styles; commitfrequencies; and experience levels; causing different defect patterns. When the defects ofdifferent developers are combined; such differences are obscured; hurting predictionperformance. This paper proposes personalized defect prediction--building a separateprediction model for each developer to predict software defects. As a proof of concept; weapply our personalized defect prediction to classify defects at the file change level. Weevaluate our personalized change classification technique on six large software projectswritten in C and Java--the Linux kernel; PostgreSQL; Xorg; Eclipse; Lucene and …,IEEE/ACM International Conference on Automated Software Engineering,2013,76
Do time of day and developer experience affect commit bugginess?,Jon Eyolfson; Lin Tan; Patrick Lam,Abstract Modern software is often developed over many years with hundreds of thousands ofcommits. Commit metadata is a rich source of social characteristics; including the commit'stime of day and the experience and commit frequency of its author. The" bugginess" of acommit is also a critical property of that commit. In this paper; we investigate the correlationbetween a commit's social characteristics and its" bugginess"; such results can be veryuseful for software developers and software engineering researchers. For instance;developers or code reviewers might be well-advised to thoroughly verify commits that aremore likely to be buggy. In this paper; we study the correlation between a commit'sbugginess and the time of day of the commit; the day of week of the commit; and theexperience and commit frequency of the commit authors. We survey two widely-used …,Proceedings of the 8th Working Conference on Mining Software Repositories,2011,71
AutoISES: Automatically Inferring Security Specification and Detecting Violations.,Lin Tan; Xiaolan Zhang; Xiao Ma; Weiwei Xiong; Yuanyuan Zhou,Abstract The importance of software security cannot be overstated. In the past; researchershave applied program analysis techniques to automatically detect security vulnerabilitiesand verify security properties. However; such techniques have limited success in realitybecause they require manually provided code-level security specifications. Manually writingand generating these code-level security specifications are tedious and error-prone.Additionally; they seldom exist in production software.,USENIX Security Symposium,2008,71
Architectures for bit-split string scanning in intrusion detection,Lin Tan; Timothy Sherwood,String matching is a critical element of modern intrusion detection systems because it lets asystem make decisions based not just on headers; but actual content flowing through thenetwork. Through careful codesign and optimization of an architecture with a new stringmatching algorithm; the authors show it is possible to build a system that is almost 12 timesmore efficient than the currently best known approaches,Micro; IEEE,2006,68
Heterogeneous defect prediction,Jaechang Nam; Wei Fu; Sunghun Kim; Tim Menzies; Lin Tan,Many recent studies have documented the success of cross-project defect prediction(CPDP) to predict defects for new projects lacking in defect data by using prediction modelsbuilt by other projects. However; most studies share the same limitations: it requireshomogeneous data; ie; different projects must describe themselves using the same metrics.This paper presents methods for heterogeneous defect prediction (HDP) that matches updifferent metrics in different projects. Metric matching for HDP requires a" large enough"sample of distributions in the source and target projects? which raises the question on howlarge is" large enough" for effective heterogeneous defect prediction. This paper shows thatempirically and theoretically;" large enough" may be very small indeed. For example; usinga mathematical model of defect prediction; we identify categories of data sets were as few …,IEEE Transactions on Software Engineering,2017,64
Discovering; Reporting; and Fixing Performance Bugs.,Adrian Nistor; Tian Jiang; Lin Tan,Software performance is critical for how users perceive the quality of software products.Performance bugs-programming errors that cause significant performance degradation-leadto poor user experience and low system throughput. Designing effective techniques toaddress performance bugs requires a deep understanding of how performance bugs arediscovered; reported; and fixed. In this paper; we study how performance bugs arediscovered; reported to developers; and fixed by developers; and compare the results withthose for non-performance bugs. We study performance and non-performance bugs fromthree popular code bases: Eclipse JDT; Eclipse SWT; and Mozilla. First; we find littleevidence that fixing performance bugs has a higher chance to introduce new functional bugsthan fixing non-performance bugs; which implies that developers may not need to be over …,Working Conference on Mining Software Repositories,2013,62
Inferring semantically related words from software context,Jinqiu Yang; Lin Tan,Code search is an integral part of software development and program comprehension. Thedifficulty of code search lies in the inability to guess the exact words used in the code.Therefore; it is crucial for keyword-based code search to expand queries with semanticallyrelated words; eg; synonyms and abbreviations; to increase the search effectiveness.However; it is limited to rely on resources such as English dictionaries and WordNet toobtain semantically related words in software; because many words that are semanticallyrelated in software are not semantically related in English. This paper proposes a simpleand general technique to automatically infer semantically related words in software byleveraging the context of words in comments and code. We achieve a reasonable accuracyin seven large and popular code bases written in C and Java. Our further evaluation …,Mining Software Repositories (MSR); 2012 9th IEEE Working Conference on,2012,61
Automatically learning semantic features for defect prediction,Song Wang; Taiyue Liu; Lin Tan,Abstract Software defect prediction; which predicts defective code regions; can helpdevelopers find bugs and prioritize their testing efforts. To build accurate prediction models;previous studies focus on manually designing features that encode the characteristics ofprograms and exploring different machine learning algorithms. Existing traditional featuresoften fail to capture the semantic differences of programs; and such a capability is neededfor building accurate prediction models. To bridge the gap between programs' semanticsand defect prediction features; this paper proposes to leverage a powerful representation-learning algorithm; deep learning; to learn semantic representation of programsautomatically from source code. Specifically; we leverage Deep Belief Network (DBN) toautomatically learn semantic features from token vectors extracted from programs' …,Proceedings of the 38th International Conference on Software Engineering,2016,56
Bug characteristics in open source software,Lin Tan; Chen Liu; Zhenmin Li; Xuanhui Wang; Yuanyuan Zhou; Chengxiang Zhai,Abstract To design effective tools for detecting and recovering from software failures requiresa deep understanding of software bug characteristics. We study software bug characteristicsby sampling 2;060 real world bugs in three large; representative open-source projects—theLinux kernel; Mozilla; and Apache. We manually study these bugs in three dimensions—rootcauses; impacts; and components. We further study the correlation between categories indifferent dimensions; and the trend of different types of bugs. The findings include:(1)semantic bugs are the dominant root cause. As software evolves; semantic bugs increase;while memory-related bugs decrease; calling for more research effort to address semanticbugs;(2) the Linux kernel operating system (OS) has more concurrency bugs than its non-OScounterparts; suggesting more effort into detecting concurrency bugs in operating system …,Empirical Software Engineering,2014,55
AutoComment: Mining Question and Answer Sites for Automatic Comment Generation,Edmund Wong; Jinqiu Yang; Lin Tan,Code comments improve software maintainability. To address the comment scarcity issue;we propose a new automatic comment generation approach; which mines comments from alarge programming Question and Answer (Q&A) site. Q&A sites allow programmers to postquestions and receive solutions; which contain code segments together with theirdescriptions; referred to as code-description mappings. We develop AutoComment to extractsuch mappings; and leverage them to generate description comments automatically forsimilar code segments matched in open-source projects. We apply AutoComment to analyzeJava and Android tagged Q&A posts to extract 132;767 code-description mappings; whichhelp AutoComment to generate 102 comments automatically for 23 Java and Androidprojects. The user study results show that the majority of the participants consider the …,IEEE/ACM International Conference on Automated Software Engineering,2013,54
iKernel: Isolating buggy and malicious device drivers using hardware virtualization support,Lin Tan; Ellick M Chan; Reza Farivar; Nevedita Mallick; Jeffrey C Carlyle; Francis M David; Roy H Campbell,The users of today's operating systems demand high reliability and security. However; faultsintroduced outside of the core operating system by buggy and malicious device drivers cansignificantly impact these dependability attributes. To help improve driver isolation; wepropose an approach that utilizes the latest hardware virtualization support to efficientlysandbox each device driver in its own minimal virtual machine (VM) so that the kernel isprotected from faults in these drivers. We present our implementation of a low-overheadvirtual-machine based framework which allows reuse of existing drivers. We haveconstructed a prototype to demonstrate that it is feasible to utilize existing hardwarevirtualization techniques to allow device drivers in a VM to communicate with devicesdirectly without frequent hardware traps into the virtual machine monitor (VMM). We have …,Dependable; Autonomic and Secure Computing; 2007. DASC 2007. Third IEEE International Symposium on,2007,54
@tComment: Testing Javadoc Comments to Detect Comment-Code Inconsistencies,Shin Hwei Tan; Darko Marinov; Lin Tan; Gary T. Leavens,Code comments are important artifacts in software. Javadoc comments are widely used inJava for API specifications. API developers write Javadoc comments; and API users readthese comments to understand the API; eg; reading a Javadoc comment for a methodinstead of reading the method body. An inconsistency between the Javadoc comment andbody for a method indicates either a fault in the body or; effectively; a fault in the commentthat can mislead the method callers to introduce faults in their code. We present a novelapproach; called@ TCOMMENT; for testing Javadoc comments; specifically methodproperties about null values and related exceptions. Our approach consists of twocomponents. The first component takes as input source files for a Java project andautomatically analyzes the English text in Javadoc comments to infer a set of likely …,IEEE Fifth International Conference on Software Testing; Verification and Validation,2012,50
aComment: mining annotations from comments and code to detect interrupt related concurrency bugs,Lin Tan; Yuanyuan Zhou; Yoann Padioleau,Concurrency bugs in an operating system (OS) are detrimental as they can cause the OS tofail and affect all applications running on top of the OS. Detecting OS concurrency bugs ischallenging due to the complexity of the OS synchronization; particularly with the presenceof the OS specific interrupt context. Existing dynamic concurrency bug detection techniquesare designed for user level applications and cannot be applied to operating systems. Todetect OS concurrency bugs; we proposed a new type of annotations-interrupt relatedannotations-and generated 96;821 such annotations for the Linux kernel with little manualeffort. These annotations have been used to automatically detect 9 real OS concurrencybugs (7 of which were previously unknown). Two of the key techniques that make the abovecontributions possible are:(1) using a hybrid approach to extract annotations from both …,Software Engineering (ICSE); 2011 33rd International Conference on,2011,48
Online Defect Prediction for Imbalanced Data,Ming Tan; Lin Tan; Sashank Dara; Caleb Mayeux,Abstract Many defect prediction techniques are proposed to improve software reliability.Change classification predicts defects at the change level; where a change is themodifications to one file in a commit. In this paper; we conduct the first study of applyingchange classification in practice. We identify two issues in the prediction process; both ofwhich contribute to the low prediction performance. First; the data are imbalanced---thereare much fewer buggy changes than clean changes. Second; the commonly used cross-validation approach is inappropriate for evaluating the performance of change classification.To address these challenges; we apply and adapt online change classification; resampling;and updatable classification techniques to improve the classification performance.,Proceedings of the International Conference on Software Engineering (ICSE),2015,45
Listening to programmers Taxonomies and characteristics of comments in operating system code,Yoann Padioleau; Lin Tan; Yuanyuan Zhou,Abstract Innovations from multiple directions have been proposed to improve softwarereliability. Unfortunately; many of the innovations are not fully exploited by programmers. Tobridge the gap; this paper proposes a new approach to “listen” to thousands ofprogrammers: studying their programming comments. Since comments expressprogrammers' assumptions and intentions; comments can reveal programmers' needs;which can provide guidance (1) for language/-tool designers on where they should developnew techniques or enhance the usability of existing ones; and (2) for programmers on whatproblems are most pervasive and important so that they should take initiatives to adopt someexisting tools or language extensions. We studied 1050 comments randomly sampled fromthe latest versions of Linux; FreeBSD; and OpenSolaris. We found that 52.6% of these …,Proceedings of the 31st International Conference on Software Engineering,2009,42
Automatically generating test cases for binary code,*,The present invention extends to methods; systems; and computer program products forautomatically generating test cases for binary code. Embodiments of the present inventioncan automatically generate test inputs for systematically covering program execution pathswithin binary code. By monitoring program execution of the binary code on existing orrandom test cases; branch predicates on execution paths can be dynamically inferred.These inferred branch predicates can then be used to drive the program along previouslyunexplored execution paths; enabling the learning of further execution paths. Embodimentsof the invention can be used in combination with other analysis and testing techniques toprovide better test coverage and expose program errors.,*,2011,40
R2Fix: Automatically Generating Bug Fixes from Bug Reports,Chen Liu; Jinqiu Yang; Lin Tan; Munawar Hafiz,Many bugs; even those that are known and documented in bug reports; remain in maturesoftware for a long time due to the lack of the development resources to fix them. Wepropose a general approach; R2Fix; to automatically generate bug-fixing patches from free-form bug reports. R2Fix combines past fix patterns; machine learning techniques; andsemantic patch generation techniques to fix bugs automatically. We evaluate R2Fix on threeprojects; ie; the Linux kernel; Mozilla; and Apache; for three important types of bugs: bufferoverflows; null pointer bugs; and memory leaks. R2Fix generates 57 patches correctly; 5 ofwhich are new patches for bugs that have not been fixed by developers yet. We reported all5 new patches to the developers; 4 have already been accepted and committed to the coderepositories. The 57 correct patches generated by R2Fix could have shortened and saved …,International Conference on Software Testing; Verification and Validation,2013,30
Comparing Software Architecture Recovery Techniques Using Accurate Dependencies,Thibaud Lutellier; Devin Chollak; Joshua Garcia; Lin Tan; Derek Rayside; Nenad Medvidovic; Robert Kroeger,Abstract Many techniques have been proposed to automatically recover softwarearchitectures from software implementations. A thorough comparison among the recoverytechniques is needed to understand their effectiveness and applicability. This studyimproves on previous studies in two ways.,Proceedings of the International Conference on Software Engineering (ICSE),2015,27
SWordNet: Inferring Semantically Related Words from Software Context,Jinqiu Yang; Lin Tan,Abstract Code search is an integral part of software development and programcomprehension. The difficulty of code search lies in the inability to guess the exact wordsused in the code. Therefore; it is crucial for keyword-based code search to expand querieswith semantically related words; eg; synonyms and abbreviations; to increase the searcheffectiveness. However; it is limited to rely on resources such as English dictionaries andWordNet to obtain semantically related words in software because many words that aresemantically related in software are not semantically related in English. On the other hand;many words that are semantically related in English are not semantically related in software.This paper proposes a simple and general technique to automatically infer semanticallyrelated words (referred to as rPairs) in software by leveraging the context of words in …,Springer Empirical Software Engineering,2014,25
Pattern matching technique for high throughput network processing,*,A pattern matching technique for high throughput network processing includes a simple yetpowerful special purpose architecture and a set of novel string matching algorithms that canwork in unison. The novel set of algorithms allow for bit-level partitioning of rules such thatmay be more easily implemented in hardware or software. The result is a device thatmaintains tight worst case bounds on performance; can be updated with new rules withoutinterrupting operation; compiles in seconds instead of hours; and is ten times more efficientthan the existing best known solutions in this area.,*,2011,20
Generating Precise Dependencies For Large Software,Pei Wang; Jinqiu Yang; Lin Tan; Robert Kroeger; David Morgenthaler,Intra-and inter-module dependencies can be a significant source of technical debt in thelong-term software development; especially for large software with millions of lines of code.This paper designs and implements a precise and scalable tool that extracts codedependencies and their utilization for large C/C++ software projects. The tool extracts bothsymbol-level and module-level dependencies of a software system and identifies potentialunderutilized and inconsistent dependencies. Such information points to potentialrefactoring opportunities and help developers perform large-scale refactoring tasks.,Fourth International Workshop on Managing Technical Debt in conjunction with ICSE 2013,2013,17
Correlations between bugginess and time-based commit characteristics,Jon Eyolfson; Lin Tan; Patrick Lam,Abstract Modern software is often developed over many years with hundreds of thousands ofcommits. Commit metadata is a rich source of time-based characteristics; including thecommit's time of day and the commit frequency and seniority of its author. The “bugginess” ofa commit is also a critical property of that commit. In this paper; we investigate the correlationbetween a commit's time-based characteristics and its “bugginess”; such results can beuseful for software developers and software engineering researchers. For instance;developers or code reviewers might be well-advised to thoroughly verify commits that aremore likely to be buggy. In this paper; we study the correlation between a commit'sbugginess and the time of day of the commit; the day of week of the commit; the commitfrequency and seniority of the commit authors; and whether or not the developers have …,Empirical Software Engineering,2014,16
Finding Patterns in Static Analysis Alerts,Quinn Hanam; Lin Tan; Reid Holmes; Patrick Lam,*,Mining Software Repository,2014,16
Hotcomments: how to make program comments more useful?,Lin Tan; Ding Yuan; Yuanyuan Zhou,Abstract Program comments have long been used as a common practice for improving inter-programmer communication and code readability; by explicitly specifying programmers'intentions and assumptions. Unfortunately; comments are not used to their maximumpotential; as since most comments are written in natural language; it is very difficult toautomatically analyze them. Furthermore; unlike source code; comments cannot be tested.As a result; incorrect or obsolete comments can mislead programmers and introduce newbugs later.,HotOS,2007,13
Automatic model generation from documentation for Java API functions,Juan Zhai; Jianjun Huang; Shiqing Ma; Xiangyu Zhang; Lin Tan; Jianhua Zhao; Feng Qin,Abstract Modern software systems are becoming increasingly complex; relying on a lot ofthird-party library support. Library behaviors are hence an integral part of softwarebehaviors. Analyzing them is as important as analyzing the software itself. However;analyzing libraries is highly challenging due to the lack of source code; implementation indifferent languages; and complex optimizations. We observe that many Java libraryfunctions provide excellent documentation; which concisely describes the functionalities ofthe functions. We develop a novel technique that can construct models for Java APIfunctions by analyzing the documentation. These models are simpler implementations inJava compared to the original ones and hence easier to analyze. More importantly; theyprovide the same functionalities as the original functions. Our technique successfully …,Proceedings of the 38th International Conference on Software Engineering,2016,11
Better test cases for better automated program repair,Jinqiu Yang; Alexey Zhikhartsev; Yuefei Liu; Lin Tan,Abstract Automated generate-and-validate program repair techniques (G&V techniques)suffer from generating many overfitted patches due to in-capabilities of test cases. Suchoverfitted patches are incor-rect patches; which only make all given test cases pass; but failto fix the bugs. In this work; we propose an overfitted patch detec-tion framework namedOpad (Overfitted PAtch Detection). Opad helps improve G&V techniques by enhancingexisting test cases to filter out overfitted patches. To enhance test cases; Opad uses fuzztesting to generate new test cases; and employs two test or-acles (crash and memory-safety)to enhance validity checking of automatically-generated patches. Opad also uses a novelmetric (named O-measure) for deciding whether automatically-generated patches overfit.Evaluated on 45 bugs from 7 large systems (the same benchmark used by GenProg and …,Proceedings of the 2017 11th Joint Meeting on Foundations of Software Engineering,2017,10
Bugram: bug detection with n-gram language models,Song Wang; Devin Chollak; Dana Movshovitz-Attias; Lin Tan,Abstract To improve software reliability; many rule-based techniques have been proposed toinfer programming rules and detect violations of these rules as bugs. These rule-basedapproaches often rely on the highly frequent appearances of certain patterns in a project toinfer rules. It is known that if a pattern does not appear frequently enough; rules are notlearned; thus missing many bugs. In this paper; we propose a new approach—Bugram—thatleverages n-gram language models instead of rules to detect bugs. Bugram models programtokens sequentially; using the n-gram language model. Token sequences from the programare then assessed according to their probability in the learned model; and low probabilitysequences are marked as potential bugs. The assumption is that low probability tokensequences in a program are unusual; which may indicate bugs; bad practices; or unusual …,Proceedings of the 31st IEEE/ACM International Conference on Automated Software Engineering,2016,10
Detecting sensitive data disclosure via bi-directional text correlation analysis,Jianjun Huang; Xiangyu Zhang; Lin Tan,Abstract Traditional sensitive data disclosure analysis faces two challenges: to identifysensitive data that is not generated by specific API calls; and to report the potentialdisclosures when the disclosed data is recognized as sensitive only after the sinkoperations. We address these issues by developing BidText; a novel static technique todetect sensitive data disclosures. BidText formulates the problem as a type system; in whichvariables are typed with the text labels that they encounter (eg; during key-value pairoperations). The type system features a novel bi-directional propagation technique thatpropagates the variable label sets through forward and backward data-flow. A datadisclosure is reported if a parameter at a sink point is typed with a sensitive text label.BidText is evaluated on 10;000 Android apps. It reports 4;406 apps that have sensitive …,Proceedings of the 2016 24th ACM SIGSOFT International Symposium on Foundations of Software Engineering,2016,9
Clocom: Mining existing source code for automatic comment generation,Edmund Wong; Taiyue Liu; Lin Tan,Code comments are an integral part of software development. They improve programcomprehension and software maintainability. The lack of code comments is a commonproblem in the software industry. Therefore; it is beneficial to generate code commentsautomatically. In this paper; we propose a general approach to generate code commentsautomatically by analyzing existing software repositories. We apply code clone detectiontechniques to discover similar code segments and use the comments from some codesegments to describe the other similar code segments. We leverage natural languageprocessing techniques to select relevant comment sentences. In our evaluation; we analyze42 million lines of code from 1;005 open source projects from GitHub; and use them togenerate 359 code comments for 21 Java projects. We manually evaluate the generated …,Software Analysis; Evolution and Reengineering (SANER); 2015 IEEE 22nd International Conference on,2015,8
DASE: Document-Assisted Symbolic Execution for Improving Automated Software Testing,Edmund Wong; Lei Zhang; Song Wang; Taiyue Liu; Lin Tan,We propose and implement a new approach; Document-Assisted Symbolic Execution(DASE); to improve automated test generation and bug detection. DASE leverages naturallanguage processing techniques and heuristics to analyze program documentation toextract input constraints automatically. DASE then uses the input constraints to guidesymbolic execution to focus on inputs that are semantically more important. We evaluatedDASE on 88 programs from 5 mature real-world software suites: COREUTILS; FINDUTILS;GREP; BINUTILS; and ELFTOOLCHAIN. DASE detected 12 previously unknown bugs thatsymbolic execution without input constraints failed to detect; 6 of which have already beenconfirmed by the developers. In addition; DASE increases line coverage; branch coverage;and call coverage by 14.2--120.3%; 2.3--167.7%; and 16.9--135.2% respectively; which …,Proceedings of the International Conference on Software Engineering (ICSE),2015,7
Extraction of code level security specification,*,A method comprising; receiving a source code; identifying a data structure access in thesource code; determining whether the data structure access is associated with a securitycheck function; defining the data structure access as a security sensitive operationresponsive to determining that the data structure access is associated with the securitycheck function; and defining a security specification to include the security check functionand the security sensitive operation.,*,2013,7
Measuring the impact of code dependencies on software architecture recovery techniques,Thibaud Lutellier; Devin Chollak; Joshua Garcia; Lin Tan; Derek Rayside; Nenad Medvidović; Robert Kroeger,Many techniques have been proposed to automatically recover software architectures fromsoftware implementations. A thorough comparison among the recovery techniques isneeded to understand their effectiveness and applicability. This study improves on previousstudies in two ways. First; we study the impact of leveraging accurate symbol dependencieson the accuracy of architecture recovery techniques. In addition; we evaluate other factors ofthe input dependencies such as the level of granularity and the dynamic-bindings graphconstruction. Second; we recovered the architecture of a large system; Chromium; that wasnot available previously. Obtaining the ground-truth architecture of Chromium involved twoyears of collaboration with its developers. As part of this work; we developed a newsubmodule-based technique to recover preliminary versions of ground-truth architectures …,IEEE Transactions on Software Engineering,2018,3
Leveraging code comments to improve software reliability,Lin Tan,Abstract Commenting source code has long been a common practice in softwaredevelopment. This thesis; consisting of three pieces of work; made novel use of the codecomments written in natural language to improve software reliability. Our solution combinesNatural Language Processing (NLP); Machine Learning; Statistics; and Program Analysistechniques to achieve this goal.,*,2009,2
Automatically Extracting Web API Specifications from HTML Documentation,Jinqiu Yang; Erik Wittern; Annie TT Ying; Julian Dolby; Lin Tan,Abstract: Web API specifications are machine-readable descriptions of APIs. Thesespecifications; in combination with related tooling; simplify and support the consumption ofAPIs. However; despite the increased distribution of web APIs; specifications are rare andtheir creation and maintenance heavily relies on manual efforts by third parties. In this paper;we propose an automatic approach and an associated tool called D2Spec for extractingspecifications from web API documentation pages. Given a seed online documentation pageon an API; D2Spec first crawls all documentation pages on the API; and then uses a set ofmachine learning techniques to extract the base URL; path templates; and HTTP methods;which collectively describe the endpoints of an API. We evaluated whether D2Spec canaccurately extract endpoints from documentation on 120 web APIs. The results showed …,arXiv preprint arXiv:1801.08928,2018,*
QTEP: quality-aware test case prioritization,Song Wang; Jaechang Nam; Lin Tan,Abstract Test case prioritization (TCP) is a practical activity in software testing for exposingfaults earlier. Researchers have proposed many TCP techniques to reorder test cases.Among them; coverage-based TCPs have been widely investigated. Specifically; coverage-based TCP approaches leverage coverage information between source code and testcases; ie; static code coverage and dynamic code coverage; to schedule test cases. Existingcoverage-based TCP techniques mainly focus on maximizing coverage while often do notconsider the likely distribution of faults in source code. However; software faults are not oftenequally distributed in source code; eg; around 80% faults are located in about 20% sourcecode. Intuitively; test cases that cover the faulty source code should have higher priorities;since they are more likely to find faults. In this paper; we present a quality-aware test case …,Proceedings of the 2017 11th Joint Meeting on Foundations of Software Engineering,2017,*
Code Comment Analysis for Improving Software Quality,Lin Tan,Abstract Code comments contain a rich amount of information that can be leveraged toimprove software maintainability and reliability. This chapter on studying and analyzing free-form and semistructured code comments will help practitioners; researchers; and studentslearn about (1) the characteristics and content of code comments;(2) the techniques; tools;and measures for studying and analyzing code comments automatically orsemiautomatically; and (3) future research directions and challenges. Readers will acquire aunique blend of interdisciplinary techniques; including natural language processing;machine learning; and program analysis; which are also useful for analyzing other softwareengineering text. This chapter can serve as an introduction to comment study and analysisfor practitioners; researchers; and students who are interested in conducting research in …,*,2016,*
em-SPADE: a compiler extension for checking rules extracted from processor specifications,Sandeep Chaudhary; Sebastian Fischmeister; Lin Tan,Abstract Traditional compilers ignore processor specifications; thousands of pages of whichare available for modern processors. To bridge this gap; em-SPADE analyzes processorspecifications and creates processor-specific rules to reduce low-level programming errors.This work shows the potential of automatically analyzing processor-and other hardwarespecifications to detect low-level programming errors at compile time. em-SPADE is acompiler extension to automatically detect software bugs in low-level programs. Fromprocessor specifications; a preprocessor extracts target-specific rules such as register useand read-only or reserved registers. A special LLVM pass then uses these rules to detectincorrect register assignments. Our experiments with em-SPADE have correctly extracted652 rules from 15 specifications and consequently found 20 bugs in ten software projects …,ACM SIGPLAN Notices,2014,*
A Taxonomy of Comments,Yoann Padiolean; Lin Tan,• When? When the comment was written? It can be the absolute time (10 years ago); or thetime relative to the file creation (2 months after file creation). The last information can give ahint about the development phase (design; maintenance; etc) the comment was written for;the first if those kinds of comment are still relevant today.,*,2008,*
Memory latency tolerant architectures achieve high performance by supporting thousands of in-flight instructions without scaling cycle-critical processor resources....,L Tan; T Sherwood,String matching is a critical element of modern intrusion detection systems because it lets asystem make decisions based not just on headers; but actual content flowing through thenetwork. Through careful codesign and optimization of an architecture with a new stringmatching algorithm; the authors show it is possible to build a system that is almost 12 timesmore efficient than the currently best...,IEEE Micro,2006,*
On the Correctness of Electronic Documents: Studying; Finding; and Localizing Inconsistency Bugs in PDF Readers and Files,T Kuchta; T Lutellier; E Wong; L Tan; C Cadar,*,*,*,*
ICSE-NIER 2017,Cristian Cadar; Lin Tan; Earl Barr; Ivan Beschastnikh; Antonio Carzaniga; TY Chen; Serge Demeyer; Alastair Donaldson; Gordon Fraser; Vijay Ganesh; Carlo Ghezzi; Milos Gligoric; Yann-Gaël Guéhéneuc; Mark Harman; Rob Hierons; Daniel Jackson; Sarfraz Khurshid; Shuvendu Lahiri; Thomas Latoza; Julia Lawall; Peng Liu; Benjamin Livshits; Shan Lu; Darko Marinov; Corina Pasareanu; John Penix; Baishakhi Ray; John Regehr; Neha Rungta; Zhendong Su; Tetsuo Tamai,Cristian Cadar Imperial College London Lin Tan University of Waterloo … Earl Barr UniversityCollege London Ivan Beschastnikh University of British Columbia Antonio Carzaniga USI - Universitàdella Svizzera italiana TY Chen Swinburne University of Technology Serge Demeyer UniversiteitAntwerpen (ANSYMO) Alastair Donaldson Imperial College London Gordon Fraser Universityof Sheffield Vijay Ganesh University of Waterloo Carlo Ghezzi Politecnico di Milano Milos GligoricUniversity of Texas at Austin Yann-Gaël Guéhéneuc École Polytechnique de Montréal MarkHarman University College London Rob Hierons Brunel University Daniel Jackson MassachusettsInstitute of Technology Sarfraz Khurshid The University of Texas at Austin Shuvendu Lahiri MicrosoftResearch Thomas Latoza George Mason University Julia Lawall INRIA-Regal Peng Liu IBMTJ Watson Research Center Benjamin Livshits Microsoft Research Shan Lu University of …,*,*,*
Bugs or Bad Comments?*,Lin Tan,Page 1. Lin Tan Ding Yuan Gopal Krishna Yuanyuan (YY) Zhou OPERA group University ofIllinois at Urbana-Champaign /* iComment: Bugs or Bad Comments? */ Page 2. Lin Tan iCommentMotivation • Software bugs affect reliability. 2 Page 3. Lin Tan iComment Motivation • Softwarebugs affect reliability. • Many due to mismatches between code and programmers' assumptions.2 Page 4. Lin Tan iComment Motivation • Software bugs affect reliability. • Many due tomismatches between code and programmers' assumptions. Assumption: Caller of reset_hardwareacquires the lock. static int reset_hardware(…) {. 2 linux/drivers/scsi/in2000.c: Page 5. Lin TaniComment Motivation • Software bugs affect reliability. • Many due to mismatches between codeand programmers' assumptions. Assumption: Caller of reset_hardware acquires the lock. staticint reset_hardware(…) {. access shared data. ... } 2 …,*,*,*
2015 IEEE 22nd International Conference on Software Analysis; Evolution and Reengineering (SANER),Edmund Wong; Taiyue Liu; Lin Tan,In recent years the amount of research on human aspects of software engineering hasincreased. Many studies use screen-capture software (eg; Snagit) to record developers'behavior as they work on software development tasks. The recorded task videos capturedirect information about which activities the developers carry out with which content and inwhich applications during the task. Such behavioral...,*,*,*
