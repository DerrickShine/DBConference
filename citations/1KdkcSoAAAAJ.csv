Apache Flink: Stream and Batch Processing in a Single Engine,Paris Carbone; Stephan Ewen; Seif Haridi; Asterios Katsifodimos; Volker Markl; Kostas Tzoumas,Abstract Apache Flink 1 is an open-source system for processing streaming and batch data.Flink is built on the philosophy that many classes of data processing applications; includingreal-time analytics; continuous data pipelines; historic data processing (batch); and iterativealgorithms (machine learning; graph analysis) can be expressed and executed as pipelinedfault-tolerant dataflows. In this paper; we present Flink's architecture and expand on how a(seemingly diverse) set of use cases can be unified under a single execution model.,Bulletin of the IEEE Computer Society Technical Committee on Data Engineering,2015,167
Minersoft: Software Retrieval in Grid and Cloud Computing Infrastructures,Marios D. Dikaiakos; Asterios Katsifodimos; George Pallis,Abstract One of the main goals of Cloud and Grid infrastructures is to make their serviceseasily accessible and attractive to end-users. In this article we investigate the problem ofsupporting keyword-based searching for the discovery of software files that are installed onthe nodes of large-scale; federated Grid and Cloud computing infrastructures. We address anumber of challenges that arise from the unstructured nature of software and theunavailability of software-related metadata on large-scale networked environments. Wepresent Minersoft; a harvester that visits Grid/Cloud infrastructures; crawls their file systems;identifies and classifies software files; and discovers implicit associations between them.The results of Minersoft harvesting are encoded in a weighted; typed graph; called theSoftware Graph. A number of information retrieval (IR) algorithms are used to enrich this …,ACM Transactions on Internet Technology,2012,37
Implicit parallelism through deep language embedding,Alexander Alexandrov; Andreas Kunft; Asterios Katsifodimos; Felix Schüler; Lauritz Thamsen; Odej Kao; Tobias Herb; Volker Markl,Abstract The appeal of MapReduce has spawned a family of systems that implement orextend it. In order to enable parallel collection processing with User-Defined Functions(UDFs); these systems expose extensions of the MapReduce programming model as library-based dataflow APIs that are tightly coupled to their underlying runtime engine. Expressingdata analysis algorithms with complex data and control flow structure using such APIsreveals a number of limitations that impede programmer's productivity. In this paper we showthat the design of data analysis languages and APIs from a runtime engine point of viewbloats the APIs with low-level primitives and affects programmer's productivity. Instead; weargue that an approach based on deeply embedding the APIs in a host language canaddress the shortcomings of current data analysis languages. To demonstrate this; we …,Proceedings of the 2015 ACM SIGMOD International Conference on Management of Data,2015,36
Materialized view selection for XQuery workloads,Asterios Katsifodimos; Ioana Manolescu; Vasilis Vassalos,Abstract The efficient processing of XQuery still poses significant challenges. A particularlyeffective technique to improve XQuery processing performance consists of usingmaterialized views to answer queries. In this work; we consider the problem of choosing thebest views to materialize within a given space budget in order to improve the performance ofa query workload. The paper is the first to address the view selection problem for queriesand views with value joins and multiple return nodes. The challenges we face stem from theexpressive power and features of both the query and view languages and from the size ofthe search space of candidate views to materialize. While the general problem hasprohibitive complexity; we propose and study a heuristic algorithm and demonstrate itssuperior performance compared to the state of the art.,Proceedings of the 2012 ACM SIGMOD International Conference on Management of Data,2012,27
Optimistic recovery for iterative dataflows in action,Sergey Dudoladov; Chen Xu; Sebastian Schelter; Asterios Katsifodimos; Stephan Ewen; Kostas Tzoumas; Volker Markl,ABSTRACT Over the past years; parallel dataflow systems have been employed for advancedanalytics in the field of data mining where many al- gorithms are iterative. These systems typicallyprovide fault tolerance by periodically checkpointing the algorithm's state and; in case offailure; restoring a consistent state from a checkpoint. In prior work; we presented an optimisticrecovery mechanism that in certain cases eliminates the need to checkpoint the interme- diatestate of an iterative algorithm. In case of failure; our mech- anism uses a compensation functionto transit the algorithm to a consistent state; from which the execution can continue and suc- cessfullyconverge. Since this recovery mechanism does not check- point any state; it achieves optimalfailure-free performance while guaranteeing fault tolerance. In this paper; we demonstrate ourrecovery mechanism with the Apache Flink data processing engine. During our …,Proceedings of the 2015 ACM SIGMOD International Conference on Management of Data,2015,18
ViP2P: Efficient XML management in DHT networks,Konstantinos Karanasos; Asterios Katsifodimos; Ioana Manolescu; Spyros Zoupanos,Abstract We consider the problem of efficiently sharing large volumes of XML data based ondistributed hash table overlay networks. Over the last three years; we have built ViP2P(standing for Vi ews in P eer-to-P eer); a platform for the distributed; parallel dissemination ofXML data among peers. At the core of ViP2P stand distributed materialized XML views;defined as XML queries; filled in with data published anywhere in the network; and exploitedto efficiently answer queries issued by any network peer. ViP2P is one of the very few fullyimplemented P2P platforms for XML sharing; deployed on hundreds of peers in a WAN. Thispaper describes the system architecture and modules; and the engineering lessons learned.We show experimental results; showing that our choices; outperf related systems by ordersof magnitude in terms of data volumes; network size and data dissemination throughput.,International Conference on Web Engineering,2012,15
Bridging the gap: towards optimization across linear and relational algebra,Andreas Kunft; Alexander Alexandrov; Asterios Katsifodimos; Volker Markl,Abstract Advanced data analysis typically requires some form of pre-processing in order toextract and transform data before processing it with machine learning and statistical analysistechniques. Pre-processing pipelines are naturally expressed in dataflow APIs (eg;MapReduce; Flink; etc.); while machine learning is expressed in linear algebra withiterations. Programmers therefore perform end-to-end data analysis utilizing multipleprogramming paradigms and systems. This impedance mismatch not only hindersproductivity but also prevents optimization opportunities; such as sharing of physical datalayouts (eg; partitioning) and data structures among different parts of a data analysisprogram. The goal of this work is twofold. First; it aims to alleviate the impedance mismatchby allowing programmers to author complete end-to-end programs in one engine …,Proceedings of the 3rd ACM SIGMOD Workshop on Algorithms and Systems for MapReduce and Beyond,2016,13
Delta: Scalable Data Dissemination under Capacity Constraints,Konstantinos Karanasos; Asterios Katsifodimos; Ioana Manolescu,Abstract In content-based publish-subscribe (pub/sub) systems; users express their interestsas queries over a stream of publications. Scaling up content-based pub/sub to very largenumbers of subscriptions is challenging: users are interested in low latency; that is; gettingsubscription results fast; while the pub/sub system provider is mostly interested in scaling; ie;being able to serve large numbers of subscribers; with low computational resourcesutilization. We present a novel approach for scalable content-based pub/sub in the presenceof constraints on the available CPU and network resources; implemented within our pub/subsystem Delta. We achieve scalability by off-loading some subscriptions from the pub/subserver; and leveraging view-based query rewriting to feed these subscriptions from the dataaccumulated in others. Our main contribution is a novel algorithm for organizing views in …,Proceedings of the VLDB Endowment (PVLDB),2013,12
The ViP2P Platform: XML Views in P2P,Konstantinos Karanasos; Asterios Katsifodimos; Ioana Manolescu; Spyros Zoupanos,Abstract: The growing volumes of XML data sources on the Web or produced by enterprises;organizations etc. raise many performance challenges for data management applications. Inthis work; we are concerned with the distributed; peer-to-peer management of large corporaof XML documents; based on distributed hash table (or DHT; in short) overlay networks. Wepresent ViP2P (standing for Views in Peer-to-Peer); a distributed platform for sharing XMLdocuments based on a structured P2P network infrastructure (DHT). At the core of ViP2Pstand distributed materialized XML views; defined by arbitrary XML queries; filled in withdata published anywhere in the network; and exploited to efficiently answer queries issuedby any network peer. ViP2P allows user queries to be evaluated over XML documentspublished by peers in two modes. First; a long-running subscription mode; when a query …,arXiv preprint arXiv:1112.2610,2011,10
Searching for software on the egee infrastructure,George Pallis; Asterios Katsifodimos; Marios D Dikaiakos,Abstract Several large-scale Grid infrastructures are currently in operation around the world;federating an impressive collection of computational resources; a wide variety of applicationsoftware; and hundreds of user communities. To better serve the current and prospectiveusers of Grid infrastructures; it is important to develop advanced software retrieval servicesthat could help users locate software components suitable to their needs. In this paper; wepresent the design and implementation of Minersoft; a distributed; multi-threaded harvesterfor application software located in large-scale Grid infrastructures. Minersoft crawls the sitesof a Grid infrastructure; discovers installed software resources; annotates them with keyword-rich metadata; and creates inverted indexes that can be used to support full-text softwareretrieval. We present insights derived from the implementation and deployment of …,Journal of Grid Computing,2010,9
Harvesting large-scale grids for software resources,Asterios Katsifodimos; George Pallis; Marios D Dikaiakos,Abstract Grid infrastructures are in operation around the world; federating an impressivecollection of computational resources and a wide variety of application software. In thiscontext; it is important to establish advanced software discovery services that could help end-users locate software components suitable to their needs. In this paper; we present thedesign; architecture and implementation of an open-source keyword-based paradigm for thesearch of software resources in Grid infrastructures; called Minersoft. A key goal of Minersoftis to annotate automatically all the software resources with keyword-rich metadata. Usingadvanced Information Retrieval techniques; we locate software resources with respect tousers queries. Experiments were conducted in EGEE; one of the largest Grid productionservices currently in operation. Results showed that Minersoft successfully crawled 12.3 …,Proceedings of the 2009 9th IEEE/ACM International Symposium on Cluster Computing and the Grid,2009,9
Effective keyword search for software resources installed in large-scale grid infrastructures,George Pallis; Asterios Katsifodimos; Marios D Dikaiakos,In this paper; we investigate the problem of supporting keyword-based searching for thediscovery of software resources that are installed on the nodes of large-scale; federated Gridcomputing infrastructures. We address a number of challenges that arise from theunstructured nature of software and the unavailability of software-related metadata on Gridsites. We present Minersoft; a Grid harvester that visits Grid sites; crawls their file-systems;identifies and classifies software resources; and discovers implicit associations betweenthem. The results of Minersoft harvesting are encoded in a weighted; typed graph; namedthe Software Graph. A number of IR algorithms are used to enrich this graph with structuraland content associations; to annotate software resources with keywords; and build invertedindexes to support keyword-based searching for software. Using a real testbed; we …,Web Intelligence and Intelligent Agent Technologies; 2009. WI-IAT'09. IEEE/WIC/ACM International Joint Conferences on,2009,8
Cutty: Aggregate sharing for user-defined windows,Paris Carbone; Jonas Traub; Asterios Katsifodimos; Seif Haridi; Volker Markl,Abstract Aggregation queries on data streams are evaluated over evolving and oftenoverlapping logical views called windows. While the aggregation of periodic windows wereextensively studied in the past through the use of aggregate sharing techniques such asPanes and Pairs; little to no work has been put in optimizing the aggregation of verycommon; non-periodic windows. Typical examples of non-periodic windows arepunctuations and sessions which can implement complex business logic and are oftenexpressed as user-defined operators on platforms such as Google Dataflow or ApacheStorm. The aggregation of such non-periodic or user-defined windows either falls back toexpensive; best-effort aggregate sharing methods; or is not optimized at all. In this paper wepresent a technique to perform efficient aggregate sharing for data stream windows …,Proceedings of the 25th ACM International on Conference on Information and Knowledge Management,2016,7
Emma in action: Declarative dataflows for scalable data analysis,Alexander Alexandrov; Andreas Salzmann; Georgi Krastev; Asterios Katsifodimos; Volker Markl,Abstract Parallel dataflow APIs based on second-order functions were originally seen as aflexible alternative to SQL. Over time; however; their complexity increased due to the numberof physical aspects that had to be exposed by the underlying engines in order to facilitateefficient execution. To retain a sufficient level of abstraction and lower the barrier of entry fordata scientists; projects like Spark and Flink currently offer domain-specific APIs on top oftheir parallel collection abstractions. This demonstration highlights the benefits of analternative design based on deep language embedding. We showcase Emma-aprogramming language embedded in Scala. Emma promotes parallel collection processingthrough native constructs like Scala's for-comprehensions-a declarative syntax akin to SQL.In addition; Emma also advocates quasi-quoting the entire data analysis algorithm rather …,Proceedings of the 2016 International Conference on Management of Data,2016,6
LiquidXML: Adaptive XML Content Redistribution,Jesús Camacho-Rodríguez; Asterios Katsifodimos; Ioana Manolescu; Alexandra Roatis,Abstract We propose to demonstrate LiquidXML; a platform for managing large corpora ofXML documents in large-scale P2P networks. All LiquidXML peers may publish XMLdocuments to be shared with all the network peers. The challenge then is to efficiently (re-)distribute the published content in the network; possibly in overlapping; redundantfragments; to support efficient processing of queries at each peer. The novelty of LiquidXMLrelies in its adaptive method of choosing which data fragments are stored where; to improveperformance. The" liquid" aspect of XML management is twofold: XML data flows from manysources towards many consumers; and its distribution in the network continuously adapts toimprove query performance.,Proceedings of the 19th ACM international conference on Information and knowledge management,2010,4
Large-Scale Data Stream Processing Systems,Paris Carbone; Gábor E Gévay; Gábor Hermann; Asterios Katsifodimos; Juan Soto; Volker Markl; Seif Haridi,Abstract In our data-centric society; online services; decision making; and other aspects areincreasingly becoming heavily dependent on trends and patterns extracted from data. Abroad class of societal-scale data management problems requires system support forprocessing unbounded data with low latency and high throughput. Large-scale data streamprocessing systems perceive data as infinite streams and are designed to satisfy suchrequirements. They have further evolved substantially both in terms of expressiveprogramming model support and also efficient and durable runtime execution on commodityclusters. Expressive programming models offer convenient ways to declare continuous dataproperties and applied computations; while hiding details on how these data streams arephysically processed and orchestrated in a distributed environment. Execution engines …,*,2017,3
Apache Flink in current research,Tilmann Rabl; Jonas Traub; Asterios Katsifodimos; Volker Markl,Abstract Recent trends in data collection and the decreasing prices of storage result inconstantly growing amounts of analyzable data. These masses of data cannot easily beprocessed by traditional database systems as these do not allow for a sufficient degree ofscalability. Programs especially designed for parallel data analysis on large-scaledistributed systems are required. Developing such programs on clusters of commodityhardware is a complex challenge for even the most experienced system developers.Frameworks such as Apache Hadoop are scalable; but–when compared to SQL–extremelyhard to program. The open-source platform Apache Flink is a link between conventionaldatabase systems and big data analysis frameworks. Flink is based on a fault tolerantruntime for data stream processing; which manages the distribution of data as well as …,it-Information Technology,2016,2
Apache Flink: Stream Analytics at Scale,Asterios Katsifodimos; Sebastian Schelter,Summary form only given. Apache Flink is an open source system for expressive;declarative; fast; and efficient data analysis on both historical (batch) and real-time(streaming) data. Flink combines the scalability and programming flexibility of distributedMapReduce-like platforms with the efficiency; out-of-core execution; and query optimizationcapabilities found in parallel databases. At its core; Flink builds on a distributed dataflowruntime that unifies batch and incremental computations over a true-streaming pipelinedexecution. Its programming model allows for stateful; fault tolerant computations; flexibleuser-defined windowing semantics for streaming and unique support for iterations. Flink isconverging into a use-case complete system for parallel data processing with a wide rangeof top level libraries ranging from machine learning through to graph processing. Apache …,Cloud Engineering Workshop (IC2EW); 2016 IEEE International Conference on,2016,2
Visualizing the dynamics of e-science social networks,Asterios Katsifodimos; Jean-Daniel Fekete; Alain Cady; Cecile Germain-Renaud,Computational grids provide new natural examples of large-scale complex networksemerging from collective behavior. An interesting question is thus whether these networksexhibit properties similar to those of other social networks (SN); or original ones; whichwould be the specific signature of e-science. As a first step towards answering thesequestions; we build a scalable interactive visual exploration tool targeted at thespatiotemporal structure of data-access and data-sharing. The primary goal is to helpcomputer science researchers getting intuition about the dynamics of the system.,EGEE User Forum,2010,2
Optimized on-demand data streaming from sensor nodes,Jonas Traub; Sebastian Breß; Tilmann Rabl; Asterios Katsifodimos; Volker Markl,Abstract Real-time sensor data enables diverse applications such as smart metering; trafficmonitoring; and sport analysis. In the Internet of Things; billions of sensor nodes form asensor cloud and offer data streams to analysis systems. However; it is impossible to transferall available data with maximal frequencies to all applications. Therefore; we need to tailordata streams to the demand of applications. We contribute a technique that optimizescommunication costs while maintaining the desired accuracy. Our technique schedulesreads across huge amounts of sensors based on the data-demands of a huge amount ofconcurrent queries. We introduce user-defined sampling functions that define the data-demand of queries and facilitate various adaptive sampling techniques; which decrease theamount of transferred data. Moreover; we share sensor reads and data transfers among …,Proceedings of the 2017 Symposium on Cloud Computing,2017,1
Blockjoin: efficient matrix partitioning through joins,Andreas Kunft; Asterios Katsifodimos; Sebastian Schelter; Tilmann Rabl; Volker Markl,Abstract Linear algebra operations are at the core of many Machine Learning (ML)programs. At the same time; a considerable amount of the effort for solving data analyticsproblems is spent in data preparation. As a result; end-to-end ML pipelines often consist of(i) relational operators used for joining the input data;(ii) user defined functions used forfeature extraction and vectorization; and (iii) linear algebra operators used for model trainingand cross-validation. Often; these pipelines need to scale out to large datasets. In this case;these pipelines are usually implemented on top of dataflow engines like Hadoop; Spark; orFlink. These dataflow engines implement relational operators on row-partitioned datasets.However; efficient linear algebra operators use block-partitioned matrices. As a result;pipelines combining both kinds of operators require rather expensive changes to the …,Proceedings of the VLDB Endowment,2017,1
Nudge your workforce. a study on the effects of task notification strategies in enterprise mobile crowdsourcing,Sarah Bashirieh; Sepideh Mesbah; Zoltán Szlávik; Robert-Jan Sips; Judith Redi; Alessandro Bozzon; Pedro Garcia Lopez; Alberto Montresor; Dick Epema; Anwitaman Datta; Teruo Higashino; Adriana Iamnitchi; Marinho Barcellos; Pascal Felber; Etienne Riviere; Yongming Luo; George HL Fletcher; Jan Hidders; Paul De Bra; Asterios Katsifodimos; Kostas Tzoumas; Shivnath Babu; Debarshi Basak; Babak Loni; Alessandro Bozzon; Paolo Palmieri; JA Pouwelse; Huaizhou Shi; RV Prasad; VS Rao; IGMM Niemegeers; Ming Xu; Shima Zahmatkesh; Emanuele Della Valle; Daniele Dell'Aglio; Alessandro Bozzon; Diederik M Roijers; Joris Scharpff; Matthijs TJ Spaan; Frans A Oliehoek; Mathijs de Weerdt; Shimon Whiteson; Diederik M Roijers; Joris Scharpff; Matthijs TJ Spaan; Frans A Oliehoek; Mathijs M de Weerdt; Shimon Whiteson; Frans A Oliehoek; Matthijs TJ Spaan; Christopher Amato; Shimon Whiteson; Frans A Oliehoek; Shimon Whiteson; Matthijs TJ Spaan; Frans A Oliehoek; Shimon Whiteson; Matthijs TJ Spaan; Kefeng Deng; Junqiang Song; Kaijun Ren; Alexandru Iosup; Huaizhou Shi; RV Prasad; VS Rao; IGMM Niemegeers,@inproceedings{umap17Bashirieh; author = {Sarah Bashirieh; Sepideh Mesbah; Zoltán Szlávik;Robert-Jan Sips; Judith Redi and Alessandro Bozzon}; title = {Nudge your Workforce. A Study onthe Effects of Task Notification Strategies in Enterprise Mobile Crowdsourcing}; booktitle ={Proceedings of 25th International Conference on User Modelling; Adaption and Personalisation.(UMAP 2017)}; publisher = {Springer}; year = {2017}; month = {July}; address = {Bratislava; Slovakia};group = {WIS} } @article{CCR-2015; author = {Pedro Garcia Lopez; Alberto Montresor; Dick Epema;Anwitaman Datta; Teruo Higashino; Adriana Iamnitchi; and Marinho Barcellos; Pascal Felber; andEtienne Riviere}; title = {Edge-centric Computing: Vision and …,Proceedings of 25th International Conference on User Modelling; Adaption and Personalisation.(UMAP 2017),2017,1
Benchmarking Distributed Stream Processing Engines,Jeyhun Karimov; Tilmann Rabl; Asterios Katsifodimos; Roman Samarev; Henri Heiskanen; Volker Markl,Abstract: Over the last years; stream data processing has been gaining attention both inindustry and in academia due to its wide range of applications. To fulfill the need for scalableand efficient stream analytics; numerous open source stream data processing systems(SDPSs) have been developed; with high throughput and low latency being their keyperformance targets. In this paper; we propose a framework to evaluate the performance ofthree SDPSs; namely Apache Storm; Apache Spark; and Apache Flink. Our evaluationfocuses in particular on measuring the throughput and latency of windowed operations. Forthis benchmark; we design workloads based on real-life; industrial use-cases. The maincontribution of this work is threefold. First; we give a definition of latency and throughput forstateful operators. Second; we completely separate the system under test and driver; so …,arXiv preprint arXiv:1802.08496,2018,*
Scalable View-based Techniques for Web Data: Algorithms and Systems,Asterios Katsifodimos,XML was recommended by W3C in 1998 as a markup language to be used by device-andsystem-independent methods of representing information. XML is nowadays used as a datamodel for storing and querying large volumes of data in database systems. In spite ofsignificant research and systems development; many performance problems are raised byprocessing very large amounts of XML data. Materialized views have long been used indatabases to speed up queries. Materialized views can be seen as precomputed queryresults that can be re-used to evaluate (part of) another query; and have been a topic ofintensive research; in particular in the context of relational data warehousing. This thesisinvestigates the applicability of materialized views techniques to optimize the performance ofWeb data management tools; in particular in distributed settings; considering XML data …,*,2013,*
Minersoft: A Keyword-based Search Engine for Software Resources in Large-scale Grid Infrastructures,Marios D Dikaiakos; Asterios Katsifodimos; George Pallis,ABSTRACT We investigate the problem of supporting keyword-based searching for thediscovery of software resources that are installed on the nodes of large-scale; federated Gridcomputing infrastructures. We address a number of challenges that arise from theunstructured nature of software and the unavailability of software-related metadata on Gridsites. We present Minersoft; a Grid harvester that visits Grid sites; crawls their file-systems;identifies and classifies software resources; and discovers implicit associations betweenthem. The results of Minersoft harvesting are encoded in a weighted; typed graph; namedthe Software Graph. A number of IR algorithms are used to enrich this graph with structuraland content associations; to annotate software resources with keywords; and build invertedindexes to support keyword-based searching for software. Using a real testbed; we …,Proceedings of the 8th Hellenic Data Management Symposium (HDMS09); Athens,2009,*
Minersoft: Searching software resourses in large-scale grid and cloud infrastructures,Asterios Katsifodimos,*,*,2009,*
Benchmarking Distributed Stream Data Processing Systems,Jeyhun Karimov; Tilmann Rabl; Asterios Katsifodimos; Roman Samarev; Henri Heiskanen; Volker Markl,Abstract—The need for scalable and efficient stream analysis has led to the development ofmany open-source streaming data processing systems (SDPSs) with highly divergingcapabilities and performance characteristics. While first initiatives try to compare the systemsfor simple workloads; there is a clear gap of detailed analyses of the systems' performancecharacteristics. In this paper; we propose a framework for benchmarking distributed streamprocessing engines. We use our suite to evaluate the performance of three widely usedSDPSs in detail; namely Apache Storm; Apache Spark; and Apache Flink. Our evaluationfocuses in particular on measuring the throughput and latency of windowed operations;which are the basic type of operations in stream analytics. For this benchmark; we designworkloads based on real-life; industrial use-cases inspired by the online gaming industry …,*,*,*
Scotty: Efficient Window Aggregation for out-of-order Stream Processing,Jonas Traub; Philipp Grulich; Alejandro Rodrıguez Cuéllar; Sebastian Breß; Asterios Katsifodimos; Tilmann Rabl; Volker Markl,Abstract—Computing aggregates over windows is at the core of virtually every streamprocessing job. Typical stream processing applications involve overlapping windows and;therefore; cause redundant computations. Several techniques prevent this redundancy bysharing partial aggregates among windows. However; these techniques do not support out-of-order processing and session windows. Out-of-order processing is a key requirement todeal with delayed tuples in case of source failures such as temporary sensor outages.Session windows are widely used to separate different periods of user activity from eachother. In this paper; we present Scotty; a high throughput operator for window discretizationand aggregation. Scotty splits streams into non-overlapping slices and computes partialaggregates per slice. These partial aggregates are shared among all concurrent queries …,*,*,*
To cite this version,Jesús Camacho-Rodríguez; Asterios Katsifodimos; Ioana Manolescu; Alexandra Roatis,ABSTRACT Pig Latin is a popular language which is widely used for parallel processing ofmassive data sets. Currently; subexpressions occurring repeatedly in Pig Latin scripts areexecuted as many times as they appear; and the current Pig Latin optimizer does not identifyreuse opportunities. We present a novel optimization approach aiming at identifying andreusing repeated subexpressions in Pig Latin scripts. Our optimization algorithm; namedPigReuse; identifies subexpression merging opportunities; selects the best ones to executebased on a cost function; and reuses their results as needed in order to compute exactly thesame output as the original scripts. Our experiments demonstrate the effectiveness of ourapproach.,*,*,*
Optimizing Across Relational and Linear Algebra in Parallel Analytics Pipelines,Asterios Katsifodimos,Advanced data analysis typically requires some form of preprocessing in order to extract andtransform data before processing it with machine learning and statistical analysistechniques. Pre-processing pipelines are naturally expressed in dataflow APIs (eg;MapReduce; Flink; etc.); while machine learning is naturally expressed in linear algebra withiterations; using programming abstractions such as R's Dataframe or Python's Pandas. Datascientists nowadays perform scalable end-to-end data analysis programs by either i) usingparallel dataflow APIs for the complete program; which introduce impedance mismatchhinder programmers' productivity or by ii) using multiple programming paradigms (eg; SQLand Dataframes) and systems (eg; Hadoop and Python Pandas). However; using multipleparadigms and systems prevents optimization opportunities such as parallelization …,*,*,*
Data Engineering,Michael Barry Ramasamy; Andrew Jorgensen; Christopher Kellogg; Neng Lu; Bill Graham; Jingwei Wu; Paris Carbone; Stephan Ewen; Seif Haridi; Asterios Katsifodimos; Volker Markl; Kostas Tzoumas; Michael J Franklin; Sailesh Krishnamurthy; Amit Bhat; Madhu Kumar; Robert Lerche; Kim Macpherson; Badrish Chandramouli; Jonathan Goldstein; Mike Barnett; James F Terwilliger; Yuanzhen Ji Heinze; Lars Roediger; Valerio Pappalardo; Andreas Meister; Zbigniew Jerzak; Christof Fetzer; Elke A Rundensteiner; Olga Poppe; Chuan Lei; Medhabi Ray; Lei Cao; Yingmei Qi; Mo Liu; Di Wang; Stan Zdonik; John Meehan; Cansu Aslantas; Michael Stonebraker; Kristin Tufte; Chris Giossi; Hong Quach; Michael Grossniklaus; Marc H Scholl; Andreas Weiler,This December; 2015 issue of the Bulletin is; as some of you may notice; being published inJuly of 2016; after the March and June; 2016 issues have been published. Put simply; theissue is late; and the March and June issues were published in their correct time slots. Theformatting of the issue; and the surrounding editorial material; eg the inside front cover andcopyright notice; are set to the December; 2015 timeframe. Indeed; the only mention of thisinverted ording of issues is in this paragraph. Things do not always go as planned. However;I am delighted that the current issue is being published; and I have high confidence that youwill enjoy reading about next-generation stream processing; the topic of the issue.,*,*,*
