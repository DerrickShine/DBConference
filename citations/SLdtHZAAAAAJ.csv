Only Aggressive Elephants are Fast Elephants,Jens Dittrich; Jorge-Arnulfo Quiané-Ruiz; Stefan Richter; Stefan Schuh; Alekh Jindal; Jörg Schad,Abstract Yellow elephants are slow. A major reason is that they consume their inputs entirelybefore responding to an elephant rider's orders. Some clever riders have trained their yellowelephants to only consume parts of the inputs before responding. However; the teachingtime to make an elephant do that is high. So high that the teaching lessons often do not payoff. We take a different approach. We make elephants aggressive; only this will make themvery fast. We propose HAIL (Hadoop Aggressive Indexing Library); an enhancement ofHDFS and Hadoop MapReduce that dramatically improves runtimes of several classes ofMapReduce jobs. HAIL changes the upload pipeline of HDFS in order to create differentclustered indexes on each data block replica. An interesting feature of HAIL is that wetypically create a win-win situation: we improve both data upload to HDFS and the …,*,2012,122
Towards zero-overhead static and adaptive indexing in Hadoop,Stefan Richter; Jorge-Arnulfo Quiané-Ruiz; Stefan Schuh; Jens Dittrich,Abstract Hadoop MapReduce has evolved to an important industry standard for massiveparallel data processing and has become widely adopted for a variety of use-cases. Recentworks have shown that indexes can improve the performance of selective MapReduce jobsdramatically. However; one major weakness of existing approaches is high index creationcosts. We present HAIL (Hadoop Aggressive Indexing Library); a novel indexing approachfor HDFS and Hadoop MapReduce. HAIL creates different clustered indexes over terabytesof data with minimal; often invisible costs; and it dramatically improves runtimes of severalclasses of MapReduce jobs. HAIL features two different indexing pipelines; static indexingand adaptive indexing. HAIL static indexing efficiently indexes datasets while uploadingthem to HDFS. Thereby; HAIL leverages the default replication of Hadoop and enhances …,The VLDB journal,2014,33
Towards Zero-Overhead Adaptive Indexing in Hadoop,Stefan Richter; Jorge-Arnulfo Quiané-Ruiz; Stefan Schuh; Jens Dittrich,Abstract: Several research works have focused on supporting index access in MapReducesystems. These works have allowed users to significantly speed up selective MapReducejobs by orders of magnitude. However; all these proposals require users to create indexesupfront; which might be a difficult task in certain applications (such as in scientific and socialapplications) where workloads are evolving or hard to predict. To overcome this problem; wepropose LIAH (Lazy Indexing and Adaptivity in Hadoop); a parallel; adaptive approach forindexing at minimal costs for MapReduce systems. The main idea of LIAH is to automaticallyand incrementally adapt to users' workloads by creating clustered indexes on HDFS datablocks as a byproduct of executing MapReduce jobs. Besides distributing indexing effortsover multiple computing nodes; LIAH also parallelises indexing with both map tasks …,arXiv preprint arXiv:1212.3480,2012,25
Efficient or Hadoop: why not both?,Jens Dittrich; Stefan Richter; Stefan Schuh,Abstract In this article; we give an overview of research related to Big Data processing inHadoop going on at the Information Systems Group at Saarland University. We discuss howto make Hadoop efficient. We briefly survey three of our projects in this context: Hadoop++;Trojan Layouts; and HAIL.,Datenbank-Spektrum,2013,22
Main memory adaptive indexing for multi-core systems,Victor Alvarez; Felix Martin Schuhknecht; Jens Dittrich; Stefan Richter,Abstract Adaptive indexing is a concept that considers index creation in databases as a by-product of query processing; as opposed to traditional full index creation where the indexingeffort is performed up front before answering any queries. Adaptive indexing has received aconsiderable amount of attention; and several algorithms have been proposed over the pastfew years; including a recent experimental study comparing a large number of existingmethods. Until now; however; most adaptive indexing algorithms have been designed single-threaded; yet with multi-core systems already well established; the idea of designing parallelalgorithms for adaptive indexing is very natural. In this regard; and to the best of ourknowledge; only one parallel algorithm for adaptive indexing has recently appeared in theliterature: The parallel version of standard cracking. In this paper we describe three …,Proceedings of the Tenth International Workshop on Data Management on New Hardware,2014,15
Mosquito: another one bites the data upload stream,Stefan Richter; Jens Dittrich; Stefan Schuh; Tobias Frey,Abstract Mosquito is a lightweight and adaptive physical design framework for Hadoop.Mosquito connects to existing data pipelines in Hadoop MapReduce and/or HDFS; observesthe data; and creates better physical designs; ie indexes; as a byproduct. Our approach isminimally invasive; yet it allows users and developers to easily improve the runtime ofHadoop. We present three important use cases: first; how to create indexes as a byproductof data uploads into HDFS; second; how to create indexes as a byproduct of map tasks; andthird; how to execute map tasks as a byproduct of HDFS data uploads. These use cases mayeven be combined.,Proceedings of the VLDB Endowment,2013,1
Data Engineering,Jens Dittrich; Marcos Antonio Vaz Salles; Lukas Blunschi; Ziyang Liu; Peng Sun; Yu Huang; Yichuan Cai; Yi Chen; Eugene Agichtein; Evgeniy Gabrilovich; Hongyuan Zha,Abstract The Starfish project at Duke University aims to provide MapReduce users andapplications with good performance automatically; without any need on their part tounderstand and manipulate the numerous tuning knobs in a MapReduce system. This paperdescribes the What-if Engine; an indispensable component in Starfish; which serves asimilar purpose as a costing engine used by the query optimizer in a Database system. Wediscuss the problem and challenges addressed by the What-if Engine. We also discuss thetechniques used by the What-if Engine and the design decisions that led us to thesetechniques.,*,*,*
