Holistic optimization by prefetching query results,Karthik Ramachandra; S Sudarshan,Abstract In this paper we address the problem of optimizing performance of database/web-service backed applications by means of automatically prefetching query results. Prefetchinghas been performed in earlier work based on predicting query access patterns; howeversuch prediction is often of limited value; and can perform unnecessary prefetches. There hasbeen some earlier work on program analysis and rewriting to automatically insert prefetchrequests; however; such work has been restricted to rewriting of single procedures. In manycases; the query is in a procedure which does not offer much scope for prefetching within theprocedure; in contrast; our approach can perform prefetching in a calling procedure; evenwhen the actual query is in a called procedure; thereby greatly improving the benefits due toprefetching. Our approach does not perform any intrusive changes to the source code …,Proceedings of the 2012 international conference on Management of Data (SIGMOD 2012),2012,28
Program transformations for asynchronous query submission,Mahendra Chavan; Ravindra Guravannavar; Karthik Ramachandra; S Sudarshan,Synchronous execution of queries or Web service requests forces the calling application toblock until the query/request is satisfied. The performance of applications can besignificantly improved by asynchronous submission of queries; which allows the applicationto perform other processing instead of blocking while the query is executed; and toconcurrently issue multiple queries. Concurrent submission of multiple queries can allow thequery execution engine to better utilize multiple processors and disks; and to reorder disk IOrequests to minimize seeks. Concurrent submission also reduces the impact of networkround-trip latency and delays at the database; when processing multiple queries. However;manually writing applications to exploit asynchronous query submission is tedious. In thispaper we address the issue of automatically transforming a program written assuming …,Data Engineering (ICDE); 2011 IEEE 27th International Conference on,2011,25
DBridge: A program rewrite tool for set-oriented query execution,Mahendra Chavan; Ravindra Guravannavar; Karthik Ramachandra; S Sudarshan,We present DBridge; a novel static analysis and program transformation tool to optimizedatabase access. Traditionally; rewrite of queries and programs are done independently; bythe database query optimzier and the language compiler respectively; leaving out manyoptimization opportunities. Our tool aims to bridge this gap by performing holistictransformations; which include both program and query rewrite. Many applications invokedatabase queries multiple times with different parameter values. Such query invocationsmade using imperative loops are often the cause of poor performance due to random I/Oand round trip delays. In practice; such performance issues are addressed by manuallyrewriting the application to make it set oriented. Such manual rewriting of programs is oftentime consuming and error prone. Guravannavar et. al. propose program analysis and …,Data Engineering (ICDE); 2011 IEEE 27th International Conference on,2011,20
Program analysis and transformation for holistic optimization of database applications,Karthik Ramachandra; Ravindra Guravannavar; S Sudarshan,Abstract We describe DBridge; a novel program analysis and transformation tool to optimizedatabase and web service access. Traditionally; rewrite of queries and programs are doneindependently; by the database query optimizer and the language compiler respectively;leaving out many optimization opportunities. Our tool aims to bridge this gap by performingholistic transformations; which include both program and query rewrite. There has beenearlier research in this area involving program analysis and transformation for automaticallyrewriting database applications to perform optimizations; for example; our earlier work hasaddressed batching or asynchronous submission of iterative queries; and prefetching queryresults. DBridge implements these techniques for Java programs and internally uses Soot; aJava optimization framework; for static analysis and transformation. DBridge can perform …,Proceedings of the ACM SIGPLAN International Workshop on State of the Art in Java Program analysis,2012,12
Program transformations for asynchronous and batched query submission,Karthik Ramachandra; Mahendra Chavan; Ravindra Guravannavar; S Sudarshan,The performance of database/web-service backed applications can be significantlyimproved by asynchronous submission of queries/requests well ahead of the point wherethe results are needed; so that results are likely to have been fetched already when they areactually needed. However; manually writing applications to exploit asynchronous querysubmission is tedious and error-prone. In this paper; we address the issue of automaticallytransforming a program written assuming synchronous query submission; to one thatexploits asynchronous query submission. Our program transformation method is based ondata flow analysis and is framed as a set of transformation examples. Our examples canhandle query executions within loops; unlike some of the earlier work in this area. We alsopresent a novel approach that; at runtime; can combine multiple asynchronous requests …,IEEE Transactions on Knowledge and Data Engineering,2015,10
Extracting Equivalent SQL from Imperative Code in Database Applications,K Venkatesh Emani; Karthik Ramachandra; Subhro Bhattacharya; S Sudarshan,Abstract Optimizing the performance of database applications is an area of practicalimportance; and has received significant attention in recent years. In this paper we presentan approach to this problem which is based on extracting a concise algebraic representationof (parts of) an application; which may include imperative code as well as SQL queries. Thealgebraic representation can then be translated into SQL to improve applicationperformance; by reducing the volume of data transferred; as well as reducing latency byminimizing the number of network round trips. Our techniques can be used for performingoptimizations of database applications that techniques proposed earlier cannot perform. Thealgebraic representations can also be used for other purposes such as extracting equivalentqueries for keyword search on form results. Our experiments indicate that the techniques …,Proceedings of the 2016 International Conference on Management of Data,2016,7
Decorrelation of user defined function invocations in queries,Varun Simhadri; Karthik Ramachandra; Arun Chaitanya; Ravindra Guravannavar; S Sudarshan,Queries containing user-defined functions (UDFs) are widely used; since they allow queriesto be written using a mix of imperative language constructs and SQL; thereby increasing theexpressive power of SQL; further; they encourage modularity; and make queries easier tounderstand. However; not much attention has been paid to their optimization; except forsimple UDFs without imperative constructs. Queries invoking UDFs with imperativeconstructs are executed using iterative invocation of the UDFs; leading to poor performance;especially if the UDF contains queries. Such poor execution has been a major deterrent tothe wider usage of complex UDFs. In this paper we present a novel technique to decorrelateUDFs containing imperative constructs; allowing set-oriented execution of queries thatinvoke UDFs. Our technique allows imperative execution to be modeled using the Apply …,Data Engineering (ICDE); 2014 IEEE 30th International Conference on,2014,7
Method for optimizing performance of database/web-service backed applications by automatically prefetching query results,*,The present disclosure proposes the method for optimizing the performance of database/web-service backed applications by automatically prefetching query results. Theproposed system and methods automatically insert prefetch instructions at the earliestpossible points across procedure calls in application source code; in presence of conditionalbranching and loops. A data flow analysis technique called anticipable expressions analysisis extended; to analyze anticipability of queries. The benefit of prefetching is limited due tothe presence of assignment statements and conditional branches that precede the queryexecution statement. Enhancements such as code motion; chaining and rewriting prefetchrequests are devised to increase benefits of prefetching. These techniques performequivalence preserving program and query transformations.,*,2016,6
DBridge: Translating Imperative Code to SQL,K Venkatesh Emani; Tejas Deshpande; Karthik Ramachandra; S Sudarshan,Abstract Application programs that access data located remotely (such as in a database)often perform poorly due to multiple network round trips and transfer of unused data. Thissituation is exacerbated in applications that use object-relational mapping (ORM)frameworks such as Hibernate; as developers tend to express complex query logic usingimperative code; resulting in poor performance. DBridge is a system for optimizing dataaccess in database applications by using static program analysis and programtransformations. Recently; we incorporated a new suite of optimization techniques intoDBridge. These techniques optimize database application programs by identifying relationaloperations expressed in imperative code; and translating them into SQL. In thisdemonstration; we showcase these techniques using a plugin for the IntelliJ IDEA Java …,Proceedings of the 2017 ACM International Conference on Management of Data,2017,4
Database-Aware Program Optimization via Static Analysis.,Karthik Ramachandra; Ravindra Guravannavar,Abstract Recent years have seen growing interest in bringing together independentlydeveloped techniques in the areas of optimizing compilers and relational query optimization;to improve performance of database applications. These approaches cut across theboundaries of general purpose programming languages and SQL; thereby exploiting manyoptimization opportunities that lie hidden both from the database query optimizer and theprogramming language compiler working in isolation. Such optimizations can yieldsignificant performance benefits for many applications involving database access. In thisarticle; we present a set of related optimization techniques that rely on static analysis ofprograms containing database calls; and highlight some of the key challenges andopportunities in this area.,IEEE Data Eng. Bull.,2014,4
Database-Aware Program Optimization via Static Analysis.,Karthik Ramachandra; Ravindra Guravannavar,Abstract Recent years have seen growing interest in bringing together independentlydeveloped techniques in the areas of optimizing compilers and relational query optimization;to improve performance of database applications. These approaches cut across theboundaries of general purpose programming languages and SQL; thereby exploiting manyoptimization opportunities that lie hidden both from the database query optimizer and theprogramming language compiler working in isolation. Such optimizations can yieldsignificant performance benefits for many applications involving database access. In thisarticle; we present a set of related optimization techniques that rely on static analysis ofprograms containing database calls; and highlight some of the key challenges andopportunities in this area.,IEEE Data Eng. Bull.,2014,4
Not for the Timid: On the Impact of Aggressive Over-booking in the Cloud,Willis Lang; Karthik Ramachandra; David J DeWitt; Shize Xu; Qun Guo; Ajay Kalhan; Peter Carlin,Abstract To lower hosting costs and service prices; database-as-a-service (DBaaS)providers strive to maximize cluster utilization without negatively affecting their users' serviceexperience. Some of the most effective approaches for increasing service efficiency result inthe over-booking of the cluster with user databases. For instance; one approach is to reclaimcluster capacity from a database when it is idle; temporarily re-using the capacity for someother purpose; and over-booking the cluster's resources. Such approaches are largelydriven by policies that determine when it is prudent to temporarily reclaim capacity from anidle database. In this paper; we examine policies that inherently tune the system's idlesensitivity. Increased sensitivity to idleness leads to aggressive over-booking while theconverse leads to conservative reclamation and lower utilization levels. Aggressive over …,Proceedings of the VLDB Endowment,2016,2
Optimization of Imperative Programs in a Relational Database (Technical Report),Karthik Ramachandra; Kwanghyun Park; K Venkatesh Emani; Alan Halverson; Cesar Galindo-Legaria; Conor Cunningham,Abstract: For decades; RDBMSs have supported declarative SQL as well as imperativefunctions and procedures as ways for users to express data processing tasks. While theevaluation of declarative SQL has received a lot of attention resulting in highly sophisticatedtechniques; the evaluation of imperative programs has remained naive and highly inefficient.Imperative programs offer several benefits over SQL and hence are often preferred andwidely used. But unfortunately; their abysmal performance discourages; and even prohibitstheir use in many situations. We address this important problem that has hitherto receivedlittle attention. We present Froid; an extensible framework for optimizing imperativeprograms in relational databases. Froid's novel approach automatically transforms entireUser Defined Functions (UDFs) into relational algebraic expressions; and embeds them …,arXiv preprint arXiv:1712.00498,2017,1
Predictive Provisioning: Efficiently Anticipating Usage in Azure SQL Database,Lalitha Viswanathan; Bikash Chandra; Willis Lang; Karthik Ramachandra; Jignesh M Patel; Ajay Kalhan; David J Dewitt; Alan Halverson,Over-booking cloud resources is an effective way to increase the cost efficiency of a cluster;and is being studied within Microsoft for the Azure SQL Database service. A key challenge isto strike the right balance between the potentially conflicting goals of optimizing for resourceallocation efficiency and positive user experience. Understanding when cloud databasecustomers use their database instances and when they are idle can allow one tosuccessfully balance these two metrics. In our work; we formulate and evaluate production-feasible methods to develop idleness profiles for customer databases. Using one of thelargest data center telemetry datasets; namely Azure SQL Database telemetry acrossmultiple data centers; we show that our schemes are effective in predicting future patterns ofdatabase usage. Our methods are practical and improve the efficiency of clusters while …,Data Engineering (ICDE); 2017 IEEE 33rd International Conference on,2017,1
Custom query execution engine,*,A custom query execution engine can be generated that captures a query. More particularly;the custom query execution engine can be generated based on combination of a query andan execution engine. Subsequent to generation; a custom query execution engine can besubmitted to a system configured to execute the custom query execution engine andevaluate the query over a data store.,*,2015,1
Modeling and Forecasting Reserve Capacity for Overbooked Clusters,*,Abstract Managing cluster resources for a cluster. The method includes identifying a pluralityof quiescence policies. Each of the quiescence policies define one or more conditions forcluster entities which when met; identify that cluster resources should be reclaimed fromcluster entities by quiescing cluster entities. The method further includes; for eachquiescence policy; identifying an amount of reclaimed capacity defining the amount ofcluster resources that will be reclaimed by implementing the quiescence policy. The methodfurther includes; for each quiescence policy; identifying an amount of reserve capacitydefining the amount of cluster resources that should be reserved for resuming quiescedcluster entities. The method further includes; selecting a quiescence policy based oncomparing the reclaimed capacities and reserve capacities for the quiescence policies …,*,2018,*
Characterizing Resource Sensitivity of Database Workloads,Rathijit Sen; Karthik Ramachandra,ABSTRACT The performance of real world database workloads is heavily influenced by theresources available to run the workload. Therefore; understanding the performance impactof changes in resource allocations on a workload is key to achieving predictableperformance. In this work; we perform an indepth study of the sensitivity of several databaseworkloads; running on Microsoft SQL Server on Linux; to resources such as cores; caches;main memory; and non-volatile storage. We consider transactional; analytical; and hybridworkloads that model real-world systems; and use recommended configurations such asstorage layouts and index organizations at different scale factors. Our study lays out the widespectrum of resource sensitivities; and leads to several findings and insights that are highlyvaluable to computer architects; cloud DBaaS (Database-asa-Service) providers …,*,2018,*
Per-node custom code engine for distributed query processing,*,Distributed query processing is often performed by a set of nodes that apply MapReduce toa data set and materialize partial results to storage; which are then aggregated to producethe query result. However; this architecture requires a preconfigured set of database nodes;can only fulfill queries that utilize MapReduce processing; and may be slowed down bymaterializing partial results to storage. Instead; distributed query processing can beachieved by choosing a node for various portions of the query; and generating customizedcode for the node that only performs the query portion that is allocated to the node. The nodeexecutes the code to perform the query portion; and rather than materializing partial resultsto storage; streams intermediate query results to a next selected node in the distributedquery. Nodes selection may be involve matching the details of the query portion with the …,*,2017,*
Froid: Optimization of Imperative Programs in a Relational Database,Karthik Ramachandra; Kwanghyun Park; K Venkatesh Emani; Alan Halverson; César Galindo-Legaria; Conor Cunningham,ABSTRACT For decades; RDBMSs have supported declarative SQL as well as imperativefunctions and procedures as ways for users to express data processing tasks. While theevaluation of declarative SQL has received a lot of attention resulting in highly sophisticatedtechniques; the evaluation of imperative programs has remained naıve and highly inefficient.Imperative programs offer several benefits over SQL and hence are often preferred andwidely used. But unfortunately; their abysmal performance discourages; and even prohibitstheir use in many situations. We address this important problem that has hitherto receivedlittle attention. We present Froid; an extensible framework for optimizing imperativeprograms in relational databases. Froid's novel approach automatically transforms entireUser Defined Functions (UDFs) into relational algebraic expressions; and embeds them …,Proceedings of the VLDB Endowment,2017,*
Decorrelation of user-defined function invocations in queries,*,Systems; methods; and computer-readable medium; are disclosed for transforming user-defined-function invocations in a query-based environment. A user-defined-function (UDF)and a query invoking the UDF are received. The UDF is parsed into a plurality of statements.A first expression tree corresponding to the UDF and a second expression treecorresponding the query are constructed; and merged using an operator to generate atransformed expression. The transformed expression is simplified; using transformationrules; if it is determined that is can be simplified.,*,2015,*
Big data: from querying to transaction processing,Karthik Ramachandra; S Sudarshan,Abstract The term Big Data has been used and abused extensively in the past few years;and means different things to different people. A commonly used notion says Big Data isabout" volume"(of data);" velocity"(rate at which data is inserted/updated) and" variety"(ofdata types). In this tutorial; we use the term Big Data to refer to any data processing needthat requires a high degree of parallelism. In other words; we focus primarily on the" volume"and" velocity" aspects.,Proceedings of the 19th International Conference on Management of Data,2013,*
Holistic Optimization of Database Applications,Karthik Ramachandra,With the advent of the Internet; in the last decade; database applications have acquired anew meaning. Internet applications generate huge amounts of data of different kinds; andgenerate huge numbers of requests against that data. Adding to this; the recent trends ofmulti-core processors and cloud computing; have pushed concurrent and distributedprogramming to the mainstream. A lot of traditional database and programming techniqueswere not designed to deal with these data management challenges. Therefore; there is aclear need for new data models; query processing models; and programming models that(a) aid the programmer by providing the right high level abstractions;(b) ensure that theunderlying mechanism is able to perform smart optimizations; and (c) ensure highscalability.,*,2011,*
Holistic Approaches for Robustness and Optimization of Database Applications,Karthik Ramachandra; S Sudarshan,Abstract Traditional query optimization and compiler optimization techniques have evolvedindependently over a long time thanks to the extensive research that has been happening inthese areas. Though there are still many hard unsolved problems in those areas; we cansafely claim that the techniques that have evolved are mature and robust. However; inpractice; we see that there is a large class of applications that fall under the category of'database applications' ie; the applications which operate and maintain the data using arelational database. Now; the optimization of such applications is typically done using theabove independent techniques. Clearly; these techniques do not guarantee the globaloptimal execution of the application. Finding such a global optimum requires a holisticviewpoint of the database application as a single entity. Achieving this goal involves the …,*,2009,*
Data Engineering,Stratis D Viglas; Gavin Bierman; Fabian Nagel; Craig Freedman; Erik Ismert; Per-Ake Larson; Surajit Chaudhuri; Vivek Narasayya; Manoj Syamala; Alvin Cheung; Samuel Madden; Armando Solar-Lezama; Owen Arden; Andrew C Myers; Karthik Ramachandra; Ravindra Guravannavar,Abstract On modern servers the working set of database management systems becomesmore and more main memory resident. Slow disk accesses are largely avoided; and thus thein-memory processing speed of databases becomes an important factor. One very attractiveapproach for fast query processing is justin-time compilation of incoming queries. Byproducing machine code at runtime we avoid the overhead of traditional interpretationsystems; and by carefully organizing the code around register usage we minimize memorytraffic and get excellent performance. In this paper we show how queries can be brought intoa form suitable for efficient translation; and how the underlying code generation can beorchestrated. By carefully abstracting away the necessary plumbing infrastructure we canbuild a query compiler that is both maintainable and efficient. The effectiveness of the …,*,*,*
