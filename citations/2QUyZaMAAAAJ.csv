Symdiff: A language-agnostic semantic diff tool for imperative programs,Shuvendu K Lahiri; Chris Hawblitzel; Ming Kawaguchi; Henrique Rebêlo,Abstract In this paper; we describe SymDiff; a language-agnostic tool for equivalencechecking and displaying semantic (behavioral) differences over imperative programs. Thetool operates on an intermediate verification language Boogie; for which translations existfrom various source languages such as C; C# and x86. We discuss the tool and the front-end interface to target various source languages. Finally; we provide a brief description ofthe front-end for C programs.,International Conference on Computer Aided Verification,2012,110
Towards modularly comparing programs using automated theorem provers,Chris Hawblitzel; Ming Kawaguchi; Shuvendu K Lahiri; Henrique Rebêlo,Abstract In this paper; we present a general framework for modularly comparing two(imperative) programs that can leverage single-program verifiers based on automatedtheorem provers. We formalize (i) mutual summaries for comparing the summaries of twoprograms; and (ii) relative termination to describe conditions under which two programsrelatively terminate. The two rules together allow for checking correctness of interproceduraltransformations. We also provide a general framework for dealing with unstructured controlflow (including loops) in this framework. We demonstrate the usefulness and limitations ofthe framework for verifying equivalence; compiler optimizations; and interproceduraltransformations.,International Conference on Automated Deduction,2013,37
Implementing Java modeling language contracts with AspectJ,Henrique Rebêlo; Sérgio Soares; Ricardo Lima; Leopoldo Ferreira; Márcio Cornélio,Abstract The Java Modeling Language (JML) is a behavioral interface specificationlanguage (BISL) designed for Java. It was developed to improve functional softwarecorrectness of Java applications. However; instrumented object program generated by theJML compiler use the Java reflection mechanism and data structures not supported by JavaME applications. To deal with this limitation; we propose the use of AspectJ to implement anew JML compiler; which generates an instrumented bytecode compliant with both Java SEand Java ME applications. The paper includes a comparative study to demonstrate thequality of the final code generated by our compiler. The size of the code is compared againstthe code generated by an existent JML compiler. Moreover; we evaluate the amount ofadditional code required to implement the JML assertions in Java applications. Results …,Proceedings of the 2008 ACM symposium on Applied computing,2008,34
Conditional equivalence,Ming Kawaguchi; Shuvendu K Lahiri; Henrique Rebelo,A typical software module evolves through many versions over the course of itsdevelopment. Each version can be the result of various factors; including feature addition;performance optimizations; refactoring; or specific bug fixes. It is desirable that a module'sinterface behavior does not change in an undesirable manner across these versions.Currently; software developers attempt to ensure this by a combination of (a) syntacticprogram differencing and manual code inspection; and (b) observed behavior on a set ofregression tests. However; for large pieces of software; syntactic differencing provides littleinsight into the effect of a syntactic change on program behavior; and provides little help incode reviews. Hence; regression testing remains the primary safeguard against theintroduction of undesirable changes in a software module. These regression tests,Microsoft; MSR-TR-2010-119; Tech. Rep,2010,33
Optimizing JML features compilation in ajmlc using aspect-oriented refactorings,Henrique Rebêlo; Ricardo Lima; Márcio Cornélio; Gary T Leavens; Alexandre Mota; César Oliveira,Abstract. In previous work we presented a new JML compiler; ajmlc; which generatesaspects that enforce preconditions; postconditions; and invariants. Although this compilerprovides benefits of source-code modularity and small bytecode size and running time; thereis still a need for optimization of bytecode size and running time. To do this optimizationwhile preserving the semantics of the resulting code; we optimize using refactorings basedon AspectJ programming laws. To this end we present optimization refactorings and anempirical analysis showing the resulting improvements.,SBLP,2009,16
Modular contracts with procedures; annotations; pointcuts and advice,Henrique Rebêlo; Ricardo Lima; Gary T Leavens,Abstract. There are numerous mechanisms for modularizing design by contract at the sourcecode level. Three mechanisms have been the main focus of attention; metadata annotations;pointcuts and advice. The latter two are well-known aspect-oriented programmingmechanisms; and according to the literature; fare better in achieving contract modularization.However; previous efforts aimed at supporting contract modularity actually hindered it. In thispaper we report an enhanced use of pointcuts and advice; and show how crosscutprogramming interfaces (XPIs) can significantly improve contract modularity. In addition; wealso discuss how these XPIs can be used together with annotations to tackle the pointcutfragility problem and minimize the limited enforcement of XPI interface rules. We compareour approach with the literature's in terms of code locality; well-defined interfaces …,SBLP’11: Proceedings of the 2011 Brazilian Symposium on Programming Languages,2011,13
AspectJML: modular specification and runtime checking for crosscutting contracts,Henrique Rebêlo; Gary T Leavens; Mehdi Bagherzadeh; Hridesh Rajan; Ricardo Lima; Daniel M Zimmerman; Márcio Cornélio; Thomas Thüm,Abstract Aspect-oriented programming (AOP) is a popular technique for modularizingcrosscutting concerns. In this context; researchers have found that the realization of designby contract (DbC) is crosscutting and fares better when modularized by AOP. However;previous efforts aimed at supporting crosscutting contract modularity might actuallycompromise the main DbC principles. For example; in AspectJ-style; reasoning about thecorrectness of a method call may require a whole-program analysis to determine whatadvice applies and what that advice does relative to DbC implementation and checking.Also; when contracts are separated from classes a programmer may not know about themand may break them inadvertently. In this paper we solve these problems with AspectJML; anew specification language that supports crosscutting contracts for Java code. We also …,Proceedings of the 13th international conference on Modularity,2014,11
Modular aspect-oriented design rule enforcement with XPIDRs,Henrique Rebelo; Gary T Leavens; Ricardo Massa Ferreira Lima; Paulo Borba; Márcio Ribeiro,Abstract Aspect-oriented programming (AOP) is a popular technique for modularizingcrosscutting concerns. However; constructs aimed at supporting crosscutting modularity maybreak class modularity. For example; to understand a method call may require a whole-program analysis to determine what advice applies and what that advice does. Moreover; inAspectJ; advice is coupled to the parts of the program advised; the base code; so themeaning of advice may change when the base code changes. Such coupling also hindersparallel development between base code and aspects. We propose some simplemodifications to the design of crosscut programming interfaces (XPIs) to include expressivedesign rule specifications. We call our form of XPIs crosscutting programming interfaces withdesign rules (XPIDRs). The XPIDR-based approach; by design; supports modular runtime …,Proceedings of the 12th workshop on Foundations of aspect-oriented languages,2013,11
A JML compiler based on AspectJ,Henrique Rebêlo; Ricardo Lima; Márcio Cornélio; Sérgio Soares,The Java Modeling Language (JML) is a behavioral interface specification language (BISL)designed for Java. It was developed with the aim of improving the functional softwarecorrectness of Java applications. The JML compiler (jmlc) generates bytecodes that use theJava reflection mechanism and data structures not supported by Java ME applications. Inorder to overcome this limitation; we proposethe use of AspectJ to implement a new JMLcompiler; which generates an instrumented byte code compliant with both Java SE and JavaME applications. The paper also includes a comparative study to demonstrate the quality ofthe final code generated by our compiler. Results indicate that the overhead in code sizeproduced by our compiler is very small; which is essential for Java ME applications.,Software Testing; Verification; and Validation; 2008 1st International Conference on,2008,10
Modularizing crosscutting contracts with AspectJML,Henrique Rebêlo; Gary T Leavens; Mehdi Bagherzadeh; Hridesh Rajan; Ricardo Lima; Daniel M Zimmerman; Márcio Cornélio; Thomas Thüm,Abstract It is claimed in the literature that the contracts of a system present crosscuttingstructure during its realization. In this context; there has been attempts to improve separationof crosscutting contracts; eg by aspect-oriented programming and design by contractlanguages; but none give programmers textual separation of contracts/specifications andmodular reasoning at the same time. In this demonstration we show how our language;AspectJML; a simple and practical aspect-oriented extension to JML; allows the separationof crosscutting contracts while maintaining the key benefits of a design by contract language;like documentation and modular reasoning. AspectJML's quantified statements; written interms of AspectJ pointcut language; allow one to select join points in which the contracts arewritten in a modular and convenient way. Also; all the crosscutting contracts are well …,Proceedings of the companion publication of the 13th international conference on Modularity,2014,9
Mutual summaries: Unifying program comparison techniques,Chris Hawblitzel; Ming Kawaguchi; Shuvendu K Lahiri; Henrique Rebêlo,Abstract. In this paper; we formalize mutual summaries as a contract mechanism forcomparing two programs; and provide a method for checking such contracts modularly. Weshow that mutual summary checking generalizes equivalence checking; conditionalequivalence checking and translation validation. More interestingly; it enables comparingprograms where the changes are interprocedural. We have prototyped the ideas in SymDiff;a Boogie based language-independent infrastructure for comparing programs.,This page intentionally left (not quite) empty,2011,9
On the interplay of exception handling and design by contract: an aspect-oriented recovery approach,Henrique Rebêlo; Roberta Coelho; Ricardo Lima; Gary T Leavens; Marieke Huisman; Alexandre Mota; Fernando Castor,Abstract Design by Contract (DbC) is a technique for developing and improving functionalsoftware correctness through definition of" contracts" between client classes and theirsuppliers. Such contracts are enforced during runtime and if any of them is violated aruntime error should occur. Runtime assertions checkers (RACs) are a well-knowntechnique that enforces such contracts. Although they are largely used to implement theDbC technique in contemporary languages; like Java; studies have shown thatcharacteristics of contemporary exception handling mechanisms can discard contractviolations detected by RACs. As a result; a contract violation may not be reflected in aruntime error; breaking the supporting hypothesis of DbC. This paper presents an errorrecovery technique for RACs that tackles such limitations. This technique relies on aspect …,Proceedings of the 13th Workshop on Formal Techniques for Java-Like Programs,2011,8
Assessing idioms for implementing features with flexible binding times,Rodrigo Andrade; Márcio Ribeiro; Vaidas Gasiunas; Lucas Satabin; Henrique Rebêlo; Paulo Borba,Maintainability of a software product line depends on the possibility to modularize itsvariations; often expressed in terms of optionally selected features. Conventionalmodularization techniques bind variations either statically or dynamically; but ideally itshould be possible to flexibly choose between both. In this paper; we propose improvedsolutions for modularizing and flexibly binding varying features in form of idioms in aspect-oriented languages AspectJ and CaesarJ. We evaluate the idioms qualitatively bydiscussing their advantages and deficiencies and quantitatively by means of metrics.,Software Maintenance and Reengineering (CSMR); 2011 15th European Conference on,2011,8
Does aspectj provide modularity when implementing features with flexible binding times?,Márcio Ribeiro; Rodrigo Cardoso; Paulo Borba; Rodrigo Bonifácio; Henrique Rebêlo,Abstract—Dynamic configuration has been receiving in creased attention in the SoftwareProduct Lines community; which means that features with different binding times arebecoming important and required. Although aspects have been considered to implementproduct lines features; some study must be done in order to evaluate whether aspects arealso suitable for implementing features with flexible binding times; such as dynamic andstatic. Thus; this paper presents an exploratory study that investigates whether the mostpopular AOP language (AspectJ) provides modularity in the flexible binding time context.The results suggest that it depends on the features peculiarities like size and heterogeneity.,Latin American Workshop on Aspect-Oriented Software Development,2009,7
Quantifying the effects of aspectual decompositions on design by contract modularization: A maintenance study,Henrique Rebêlo; Ricardo Lima; Uirá Kulesza; Márcio Ribeiro; Yuanfang Cai; Roberta Coelho; Cláudio Sant'Anna; Alexandre Mota,Although it is assumed that the implementation of design by contract is better modularizedby means of aspect-oriented (AO) programming; there is no empirical evidence on theeffectiveness of AO for modularizing non-trivial design by contract code in realisticdevelopment scenarios. This paper reports a quantitative and qualitative case study thatevolves a real-life application to assess various facets of the adequacy of aspects formodularizing the design by contract concern. Our evaluation focused upon a number ofsystem changes that are typically performed during software maintenance tasks. The studywas driven by an analysis of fundamental modularity attributes; such as separation ofconcerns; coupling; conciseness; and change propagation. We have found that AOtechniques improved separation of concerns and the design stability between the design …,International Journal of Software Engineering and Knowledge Engineering,2013,6
Optimizing generated aspect-oriented assertion checking code for JML using program transformations: An empirical study,Henrique Rebêlo; Ricardo Lima; Gary T Leavens; MáRcio CornéLio; Alexandre Mota; CéSar Oliveira,Abstract The AspectJ JML compiler (ajmlc) explores aspect-oriented programming (AOP)mechanisms to implement JML specifications; such as pre-and postconditions; and enforcethem during runtime. This compiler was created to improve source-code modularity. Someexperiments were conducted to evaluate the performance of the code generated throughajmlc. Results demonstrated that the strategy of adopting AOP to implement JMLspecifications is very promising. However; there is still a need for optimization of thegenerated code's bytecode size and running time. This paper presents a catalog oftransformations which represent the optimizations implemented in the new optimizedversion of the ajmlc compiler. We employ such transformations to reduce the bytecode sizeand running time of the code generated through the ajmlc compiler. Aiming at …,Science of Computer Programming,2013,6
JML and aspects: The benefits of instrumenting JML features with AspectJ,Henrique Rebêlo; Sérgio Soares; Ricardo Lima; Paulo Borba; Márcio Cornélio,ABSTRACT The Java Modeling Language (JML) is used to specify designs of Java classesand interfaces. To this end; JML has a rich set of features for specifying methods; includingspecification inheritance. Thus; the most fundamental motivation for employing JML is toimprove functional software correctness of Java applications; and helps to reduce correctivemaintenance effort of those applications. Previously; we presented a new JML compiler(ajmlc) that generates aspects (AspectJ) for contract enforcement. This paper describes themain reasons to instrument JML features with AspectJ; with particular emphasis on issuesrelated to instrumentation code size—we also defined guidelines to use ajmlc that alwaysgenerate compact instrumented code than the classical JML compiler (jmlc). In addition; wediscuss the analogy between JML and AspectJ; and how the ajmlc also deals with Java …,Seventh International Workshop on Specification and Verification of Component-Based Systems (SAVCBS 2008),2008,6
AspectJ-based idioms for flexible feature binding,Rodrigo Andrade; Henrique Rebêlo; Márcio Ribeiro; Paulo Borba,In Software Product Lines (SPL); we can bind reusable features to compose a product atdifferent times; which in general are static or dynamic. The former allows customizabilitywithout any overhead at runtime. On the other hand; the latter allows feature activation ordeactivation while running the application with the cost of performance and memoryconsumption. To implement features; we might use aspect-oriented programming (AOP); inwhich aspects enable a clear separation between base code and variable code. In thiscontext; recent work provides AspectJ-based idioms to implement flexible feature binding.However; we identified some design deficiencies. Thus; to solve the issues of these idioms;we incrementally create three new AspectJ-based idioms. Moreover; to evaluate our newidioms; we quantitatively analyze them with respect to code cloning; scattering; tangling …,Software Components; Architectures and Reuse (SBCARS); 2013 VII Brazilian Symposium on,2013,5
The contract enforcement aspect pattern,Henrique M Rebêlo; Ricardo Lima; Uirá Kulesza; Roberta Coelho; Alexandre Mota; Márcio Ribeiro; José Elias Araújo,Abstract The most fundamental motivation for employing contracts in the development of OOapplications is to improve the reliability. Contract enforcement is a well-known establishedtechnique in object-oriented (OO) programming. However; the need to intercept well definedpoints in the execution of a program to check design constraints makes the enforcement ofcontracts a crosscutting concern. Thus; contract enforcement code is interwined with thebusiness code; hindering maintenance. Moreover; because of the difficulty in separatingcontract enforcement code and business code; the former is often duplicated across severaldifferent places within a system. In this paper we present the Contract Enforcement Aspectpattern; which documents an aspect-oriented solution for the modularization of the contractconcern.,Proceedings of the 8th Latin American Conference on Pattern Languages of Programs,2010,5
Client-aware checking and information hiding in interface specifications with JML/ajmlc,Henrique Rebêlo; Gary T Leavens; Ricardo Massa Lima,Abstract Information hiding controls which parts of a module are visible to different clients.This aids maintenance because hidden implementation details can be changed withoutaffecting clients. The benefits of information hiding apply not only to code but also to otherartifacts; such as specifications. In this demonstration we show how our client-awarechecking (CAC) technique; which is implemented by our JML/ajmlc compiler and freelyavailable online; use the privacy information in specifications to promote information hiding.We demonstrate the benefits of CAC over existing runtime assertion checkers (RACs) ofcontemporary interface specification languages.,Proceedings of the 2013 companion publication for conference on Systems; programming; & applications: software for humanity,2013,4
Mutual summaries and relative termination,Chris Hawblitzel; Ming Kawaguchi; Shuvendu Lahiri; Henrique Rebêlo,*,*,2011,4
Implementing JML Contracts with AspectJ: Improving instrumentation and checking of JML contracts,Henrique Rebêlo; Ricardo Massa F Lima; Mrcio L Cornlio,Abstract The Java Modeling Language (JML) is a formal interface specification languagedesigned for Java. It was developed with the aim of improving the functional softwarecorrectness of Java applications. JML has a rich set of features for specifying Javaapplications; including abstract specifications; method and type specifications; and multipleinheritance specifications. The current JML compiler (jmlc) does not work properly whenapplied to Java dialects such as Java ME. The instrumented code generated by the originalJML compiler uses the Java reflection mechanism and data structures not supported by JavaME platform. In order to overcome this limitation; our new JML compiler---ajmlc (AspectJ JMLCompiler)---uses AspectJ to instrument Java code with JML contracts. A set of translationrules are defined from JML contracts into AspectJ program code. The result is a code …,*,2012,3
An annotation-based approach for jcsp concurrent programming: a quantitative study,José Elias Araújo; Henrique Rebêlo; Ricardo Lima; Alexandre Mota; Uirá Kulesza; Cláudio Sant'Anna,Abstract The construction of large scale parallel and concurrent applications is one of thegreatest challenges faced by software engineers nowadays. Modern programming modelsfor concurrency including libraries implementing high level abstractions such as JCSP leadto tangled and scattered concurrency code. As such; this paper outlines our initial effort onthe separate of concurrent (JCSP code) concern from the sequential Java processes. Weexplore metadata annotations to implement this separation of concerns. A compilergenerates AspectJ code used to instrument the JCSP features under the hood. We alsopresent a case study that assesses the benefits of the proposed approach through a metricssuite,Proceedings of the 1st workshop on Modularity in systems software,2011,3
Flexible Feature Binding with AspectJ-based Idioms.,Rodrigo Andrade; Henrique Rebelo; Marcio Ribeiro; Paulo Borba,Abstract: In Software Product Lines (SPL); we can bind reusable features to compose aproduct at different times; which in general are static or dynamic. The former allowscustomizability without any overhead at runtime. On the other hand; the latter allows featureactivation or deactivation while running the application with the cost of performance andmemory consumption. To implement features; we might use aspect-oriented programming(AOP); in which aspects enable a clear separation between invariable code and variablecode. In this context; recent work provides AspectJ-based idioms to implement flexiblefeature binding. However; we identified some design deficiencies. Thus; to solve the issuesof these idioms; we incrementally create three AspectJ-based idioms. We apply these idiomsto provide flexible binding for 16 features from five different product lines. Moreover; to …,J. UCS,2014,2
Modular enforcement of supertype abstraction and information hiding with client-side checking,Henrique Rebêlo; Gary T Leavens; Ricardo Lima,Abstract. Static reasoning tools for object-oriented (OO) languages use supertypeabstraction; by verifying calls to methods using the specification associated with thereceiver's static type. Unfortunately; contemporary runtime assertion checkers for OO areinconsistent with such static reasoning tools; since they check assertions in an overly-dynamic way on the supplier side. For method calls; such supplier-side checking occurs atthe exact runtime type of the receiver object; which in general can be a proper subtype of thereceiver object's static type. Since such a subtype can have a refinement of thecorresponding supertype's specification; this specification difference can cause aninconsistency between runtime assertion checking and static verification tools. We explainhow our technique of client-side checking allows runtime assertion checkers to use the …,*,2012,2
Assessing idioms for a flexible feature binding time,Rodrigo Andrade; Márcio Ribeiro; Henrique Rebêlo; Paulo Borba; Vaidas Gasiunas; Lucas Satabin,Abstract In software product lines development; it is sometimes important to provide aflexible binding time for features such that developers can choose between static or dynamicfeature activation. For example; software products designed for devices with constrainedresources may use a static binding time to avoid the performance overhead introduced bydynamic binding time activation. However; other devices can exploit binding time flexibility tosupport products with a dynamic binding time for some of their features. To implement thiskind of flexibility in a modular way; we can define AspectJ-based idioms. Researchers haveproposed Edicts; an idiom based on AspectJ and design patterns. In this article; we arguethat this idiom leads to an increase in code duplication; scattering; tangling and size; whichcan hamper code reuse; maintenance and understanding. To mitigate such issues; this …,The Computer Journal,2015,1
Enforcing information hiding in interface specifications: a client-aware checking approach,Henrique Rebêlo; Gary T Leavens,Abstract Information hiding is an established principle that controls which parts of a moduleare visible to non-privileged and privileged clients (eg; subclasses). This aids maintenancebecause hidden implementation details can be changed without affecting clients. Thebenefits of information hiding apply not only to code but also to other artifacts; such asspecifications. Unfortunately; contemporary formal interface specification languages andtheir respective runtime assertion checkers (RACs) are inconsistent with information hidingrules because they check assertions in an overly-dynamic manner on the supplier side. Weexplain how overly-dynamic RACs compromise information hiding and how our client-awarechecking technique allows these RACs to use the privacy information in specifications;which promotes information hiding.,Companion Proceedings of the 14th International Conference on Modularity,2015,1
Assessing the Impact of Aspects on Design By Contract Effort: A Quantitative Study.,Henrique Rebêlo; Ricardo Massa Ferreira Lima; Uirá Kulesza; Cláudio Sant'Anna; Roberta Coelho; Alexandre Mota; Márcio Ribeiro; Cesar AL Oliveira,Abstract Although it is assumed that the implementation of design by contract is bettermodularized by means of aspectoriented (AO) programming; there is no empirical evidenceon the effectiveness of AO for modularizing non-trivial design by contract code in well-understood modularity attributes. This paper reports a quantitative case study of theadequacy of aspects for modularizing design by contract concern. The study consisted ofrefactoring a real-life application so that the code responsible for implementing the contractenforcement strategies was moved to aspects. Our analysis was driven by fundamentalmodularity attributes; such as separation of concerns; coupling; and size. We have foundthat AO techniques improved separation of concerns between the design by contract codeand base application code. However; contradicting the general intuition; the AO version of …,SEKE,2011,1
Optimizing Generated Aspect-Oriented Assertion Checking Code for JML Using Programming Laws: An Empirical Study,Henrique Rebêlo; Ricardo Lima; Gary T Leavens; Márcio Cornélio; Alexandre Mota; César Oliveira,Abstract Aspect-oriented programming (AOP) enables the effective modularization of well-known crosscutting concerns. To take advantage of AOP; there are many techniques;including AOP laws; for a systematic refactoring of crosscutting concerns to aspects.However; there is also a need for supporting the systematic refactoring of AOP constructs.Existing techniques for aspect-oriented refactoring are too coarse-grained and make it toodifficult to assure that the transformations preserve behavior and are indeed refactorings.This paper presents a catalogue of AOP laws towards a systematic refactoring of AOPconstructs. As long as these laws are fine-grained; they make it easier to verify that thetransformations they provide preserve behavior. Furthermore; as these laws can providespace and time optimization; we conduce an empirical study using four applications in …,*,2010,1
Modularizing variabilities with CaesarJ collaboration interfaces,Carlos Eduardo Pontual; Rodrigo Bonifácio; Henrique Rebêlo; Márcio Ribeiro; Paulo Borba,Software product lines (SPLs) aim at reducing the time to marketing of applications in acommon domain [5]. To achieve that; products are generated by means of weaving commonbehavior; shared by all members of a SPL; with variant behavior that; in fact; implements thevariability of each SPL member. Although several techniques have been used to implementvariability in SPLs; an extended notion of interfaces for decoupling common and variantbehavior during development is still a challenge. For instance; annotative style [3] for SPLdevelopment does not provide a clear separation between common and variant assets—thus; it is not possible; using such a style; to develop both concerns in an independent way.,Contemporary Modularization Techniques (ACoM. 08),2009,1
Buzzmonitor: A Tool For Measuring Word Of Mouth Level In On-Line Communities,Alessandro Barbosa Lima; Jairson Vitorino; Henrique Rebêlo,ABSTRACT This paper describes an application to monitor on-line Word of Mouth acrossdifferent Internet services and how the collected data can be used to feed a company's on-line marketing strategy. Our motivation lies on the theory of social maps and scalefreenetwork laws. We describe briefly buzzMonitor; which is our first prototype for the task ofmeasuring and monitoring conversations among consumers in on-line communities.,IADIS International Conference IADIS e-Commerce; Porto; Portugal,2005,1
Aspect-Oriented Programming Reloaded,Henrique Rebêlo; Gary T Leavens,Abstract Many programs have crosscutting concerns for which neither procedural nor object-oriented programming adequately modularize; which has led to the idea of aspect-orientedprogramming (AOP). However; AOP has not found favor with the programming languagescommunity due to a belief that AOP breaks classical modularity and modular reasoning. Wepropose a new AOP programming model that enables both crosscutting modularity andmodular reasoning. This model is implemented by AspectJML; a general-purpose aspect-oriented extension to Java. It supports modular crosscutting concerns using key object-oriented mechanisms; such as hierarchical structure; and allows reasoning that scales toever-larger programs.,Proceedings of the 21st Brazilian Symposium on Programming Languages,2017,*
Using Calculation Fragments for Spreadsheet Testing and Debugging.... 1 Dietmar Jannach and Thomas Schmitz Spreadsheets in an ERP environment-not what th...,Sohon Roy; Pedro Maia; Jorge Mendes; Jácome Cunha; Henrique Rebêlo; Joao Saraiva; Alexandru Toader; Andrea Kohlhase; Michael Kohlhase; Ana Guseva; Daniel Kulesz; Fabian Toth; Fabian Beck; Domenico Amalfitano; Nicola Amatucci; Vincenzo De Simone; Anna Rita Fasolino; Porfirio Tramontana; Paul Mireault; Martin Hirzel; Rodric Rabbah; Philippe Suter; Olivier Tardieu; Mandana Vaziri; Bas Jansen,This volume contains the papers presented at SEMS'15: Second Workshop on SoftwareEngineering Methods in Spreadsheets held on May 18; 2015 in Florence; Italy; as part of the37th International Conference on Software Engineering (ICSE). The workshop wasorganised by Felienne Hermans (TU Delft); Richard Paige (University of York) and PeterSestoft (IT University of Copenhagen) as a result of their observations that significantresearch was taking place on spreadsheets in software engineering; and that the time wasripe for a collective meeting bringing together people from different communities-eg; the end-user programming community; modelling community; testing and verification community; etc.A first workshop had been organised in 2014; co-located with Eusprig; in Delft; theNetherlands. The program committee reviewed and selected 11 papers (including short …,*,2015,*
Towards the design and implementation of aspect-oriented programming for spreadsheets,Pedro Maia; Jorge Mendes; Jácome Cunha; Henrique Rebêlo; Joao Saraiva,Abstract: A spreadsheet usually starts as a simple and single-user software artifact; but; asfrequent as in other software systems; quickly evolves into a complex system developed bymany actors. Often; different users work on different aspects of the same spreadsheet: whilea secretary may be only involved in adding plain data to the spreadsheet; an accountantmay define new business rules; while an engineer may need to adapt the spreadsheetcontent so it can be used by other software systems. Unfortunately; spreadsheet systems donot offer modular mechanisms; and as a consequence; some of the previous tasks may bedefined by adding intrusive" code" to the spreadsheet. In this paper we go through thedesign and implementation of an aspect-oriented language for spreadsheets so that userscan work on different aspects of a spreadsheet in a modular way. For example; aspects …,arXiv preprint arXiv:1503.03463,2015,*
Contract modularity in design by contract languages,Henrique Emanuel Mostaert Rebêlo,Design by Contract (DbC)´ e uma t´ ecnica popular para desenvolvimento de programasusando especifica¸ c˜ oes comportamentais. Neste contexto; pesquisadores descobriramque a implementao de DbC´ e crosscutting e; portanto; sua implementa¸ c˜ ao´ e melhormodularizada por meio da Programa¸ c˜ ao Orientada a Aspectos (POA) por´ em; osmecanismos de POA para dar suporte a modularide de contratos; de fato comprometem suamodularidade e entendidmento. Por exemplo; na linguagem POA AspectJ; o racioc´ ınio dacorretude de uma chamada de m´ etodo requer uma an´ alise global do programa paradeterminar quais advice aplicam e sobretudo o que esses advice fazem em rela¸ c˜ ao aimplementa¸ c˜ ao e checagem DbC. Al´ em disso; quando os contratos so separados dasclasses o programador corre o risco de quebrar-los inadvertidamente. Diferentemente de …,*,2014,*
Identifying and specifying crosscutting contracts with AspectJML,Henrique Rebêlo,Abstract I propose AspectJML; a simple and practical aspect-oriented extension to JML. Itsupports the specification of crosscutting contracts for Java code in a modular way whilekeeping the benefits of a design by contract language; like documentation and modularreasoning.,Proceedings of the 2013 companion publication for conference on Systems; programming; & applications: software for humanity,2013,*
Towards client-aware interface specifications,Henrique Rebêlo,Abstract Runtime assertion checking (RAC) is a well-established technique for runtimeverification of object-oriented (OO) programs. Contemporary RACs use specifications fromthe receiver's dynamic type when checking method calls. This implies that in presence ofsubtyping and dynamic dispatch features of object-oriented programming; thesespecifications differ from the ones used by static verification tools; which rely on thespecifications associated with the static type of the receiver. Besides the heterogeneityproblem; this also hinders the benefits of modular reasoning achieved by the notion ofsupertype abstraction. In this context; we propose a more precise runtime assertion checkingfor OO programs that better matches the semantics used in static verification tools. While wedescribe our approach; we discuss how it can be used to avoid the heterogenous …,Proceedings of the ACM international conference companion on Object oriented programming systems languages and applications companion,2011,*
SECTION A COMPUTER SCIENCE THEORY; METHODS AND TOOLS,Rodrigo Andrade; Márcio Ribeiro; Henrique Rebêlo; Paulo Borba; Vaidas Gasiunas; Lucas Satabin; Robert M Hierons; Li Chunlin; Li La Yuan; K Hemant Kumar Reddy; Diptendu Sinha Roy; Shay Gueron; Vlad Krasnov; Sulin Song; Shuming Zhou; Xiaoyan Li; Zaharije Radivojevic; Miloš Cvetanovic; Saša Stojanovic; Jie Zhao; Rongcai Zhao; Jinchen Xu; Carla Binucci; Walter Didimo; Zhendong Shao; Igor Averbakh; Sandi Klavžar,Page 1. CONTENTS ORIGINAL ARTICLES 1 Assessing Idioms for a Flexible Feature BindingTime Rodrigo Andrade; Márcio Ribeiro; Henrique Rebêlo; Paulo Borba; Vaidas Gasiunasand Lucas Satabin 33 A More Precise Implementation Relation for Distributed Testing RobertM. Hierons 47 Context-Aware Integrated Scheme for Mobile Cloud Service Allocation Li Chunlinand Li La Yuan 64 DPPACS: A Novel Data Partitioning and Placement Aware ComputationScheduling Scheme for Data-Intensive Cloud Applications K. Hemant Kumar Reddy andDiptendu Sinha Roy 83 Fast Quicksort Implementation Using AVX Instructions Shay Gueronand Vlad Krasnov 91 Conditional Diagnosability of Burnt Pancake Networks Under the PMCModel Sulin Song; Shuming Zhou and Xiaoyan Li …,*,*,*
THE COMPUT,Rodrigo Andrade; Márcio Ribeiro; Henrique Rebêlo; Paulo Borba; Vaidas Gasiunas; Lucas Satabin; Robert M Hierons; Li Chunlin; Li La Yuan; K Hemant Kumar Reddy; Diptendu Sinha Roy; Shay Gueron; Vlad Krasnov; Sulin Song; Shuming Zhou; Xiaoyan Li; Zaharije Radivojevic; Miloš Cvetanovic; Saša Stojanovic; Jie Zhao; Rongcai Zhao; Jinchen Xu; Carla Binucci; Walter Didimo; Zhendong Shao; Igor Averbakh; Sandi Klavžar,Section A has as its primary focus the theory and methodologies that are central to computerscience. The section welcomes contributions from across this spectrum as well as papers involvingthe novel application of theoretical research or the adaptation of established methodologiesto computational problems in other domains or within software tools. Thematic areas includebut are not restricted to: algorithms and complexity; computational logic; formal methods; heuristicsearch; mathematics of computing; models of computation and unconventional computing; programminglanguages and semantics; and software engineering … Section B Computer and CommunicationsNetworks and Systems … Section B focuses on new theories; ideas and developments in computerand communications networks and related systems. The section seeks high-quality papers reportingnew concepts; analyses and experimental results in areas including; but not limited to …,*,*,*
2008 First IEEE International Conference on Software Testing; Verification and Validation (ICST'08),B Hasling; H Goetz; K Beetz,We present a minimalist approach to model-based test generation. Our approach leveragesthe information provided in the domain and behavioral models of an application under test toproduce a small yet effective set of test cases without additional user input. The domainmodel consists of UML class diagram with invariants; while the behavioral model consists ofUML use cases. Each use case flow has...,*,*,*
Researcher Intern Employment,Henrique Emanuel Mostaert Rebêlo,Federal University of Pernambuco Informatics Center — Cidade Univertiária; Recife; PE; ¼ ¼¹¼ Brazil phone: + ´ ½µ¾½¾ ¹ ¿¼ r. ¼ e-mail: hemr@cin.ufpe.br … URL: ØØÔ »»ÛÛÛº ÒºÙ Ôº Ö» ÑÖ» … Doctor of Philosophy in Computer Science; expected in 2013. provisory Thesistitle: A Design By Contract Modularization Method. Thesis supervisor: Professor Ricardo MassaF. Lima. Thesis co-supervisor: Gary T. Leavens … Master of Science in ComputerEngineering; received in May; 2008. Dissertation title: Implementing JML Contracts withAspectJ. Dissertation supervisor: Professor Ricardo Massa F. Lima. Dissertationco-supervisor: Márcio L. Cornélio … Faculdades Integradas Barros Melo (College); Olinda;PE … Bachelor of Information System; with High Distinction and Honors in Computer; receivedin Jan- uary; 2006 … Aspect-Oriented Software Development; Design by Contract …,*,*,*
N. Piedra; J. Chicaiza; J. López; E. Tovar,S Dietze; E Kaldoudi; N Dovrolis; D Giordano; C Spampinato; M Hendrix; A Protopsaltis; D Taibi; HQ Yu; S Wendzel; W Mazurczyk; S Zander; R Andrade; H Rebelo; M Ribeiro; P Borba; S Charfi; H Ezzedine; C Kolski,N. Piedra; J. Chicaiza; J. López; E. Tovar: Seeking Open Educational Resources to ComposeMassive Open Online Courses in Engineering Education An Approach based on Linked OpenData The OER movement has tended to define "openness" in terms of access to use and reuseeducational materials; and to address the geographical and financial barriers amongstudents; teachers and self-learners with open access to high quality … S. Dietze; E.Kaldoudi; N. Dovrolis; D. Giordano; C. Spampinato; M. Hendrix; A. Protopsaltis; D. Taibi; HQYu: Socio-semantic Integration of Educational Resources - the Case of the mEducator ProjectResearch in technology-enhanced learning (TEL) throughout the last decade has largely focusedon sharing and reusing educational resources and data. This effort has led to a fragmented landscapeof competing metadata schemas; such as IEEE LOM … S. Wendzel; W. Mazurczyk; S …,*,*,*
E. Santana de Almeida; F. Oquendo,R Andrade; H Rebelo; M Ribeiro; P Borba; M Fantinato; U Kulesza,R. Andrade; H. Rebelo; M. Ribeiro; P. Borba: Flexible Feature Binding with AspectJ-based IdiomsIn Software Product Lines (SPL); we can bind reusable features to compose a product at differenttimes; which in general are static or dynamic. The former allows customizability without any overheadat runtime. On the other hand; the latter … J. Pérez; I. Ramos; JA Carsí; C. Costa-Soria:Model-Driven Development of Aspect-Oriented Software Architectures The Model-Driven Development(MDD) paradigm has become widely spread in the last few years due to being based on modelsinstead of source code; and using automatic generation techniques to obtain the final softwareproduct. Until now; the most … AV Uzunov; EB Fernandez; K. Falkner: Engineering Securityinto Distributed Systems: A Survey of Methodologies Rapid technological advances in recentyears have precipitated a general shift towards software distribution as a central …,*,*,*
M. Fantinato; U. Kulesza; F. Oquendo,R Andrade; H Rebelo; M Ribeiro; P Borba; R Maiani de Mello; E Nogueira Teixeira; M Schots; CM Lima Werner; G Horta Travassos; A Silva Barreto; LGP Murta; AR Cavalcanti da Rocha; R Pereira de Oliveira; D Blanes; J Gonzalez-Huerta; E Insfran; S Abrahão; S Cohen; E Santana de Almeida,R. Andrade; H. Rebelo; M. Ribeiro; P. Borba: Flexible Feature Binding with AspectJ-based IdiomsIn Software Product Lines (SPL); we can bind reusable features to compose a product at differenttimes; which in general are static or dynamic. The former allows customizability without any overheadat runtime. On the other hand; the latter … R. Maiani de Mello; E. Nogueira Teixeira; M.Schots; CM Lima Werner; G. Horta Travassos: Verification of Software Product LineArtefacts: A Checklist to Support Feature Model Inspections Software Product Line Engineering(SPL) should ensure the correctness; completeness and consistenc y of its artefacts and relateddomain to prevent the propagation of defects in derived products. Software inspection techniquesare effective in … A. Silva Barreto; LGP Murta; AR Cavalcanti da Rocha: Software ProcessDefinition: a Reuse-based Approach Software product development has been taking …,*,*,*
M. Stein; A. Geyer-Schulz,R Andrade; H Rebelo; M Ribeiro; P Borba; J de Melo Bezerra; C Massaki Hirata; D Randall; M Fantinato; U Kulesza; F Oquendo; GC Lapasini Leal; AP Chaves; EHM Huzita; ME Delamaro,M. Stein; A. Geyer-Schulz: A Comparison of Five Programming Languages in a Graph ClusteringScenario The recent rise of social networks fuels the demand for efficient social webservices;whose performance strongly benefits from the availability of fast graph clusteringalgorithms. Choosing a programming language heavily affects multiple … R. Andrade; H.Rebelo; M. Ribeiro; P. Borba: Flexible Feature Binding with AspectJ-based Idioms In SoftwareProduct Lines (SPL); we can bind reusable features to compose a product at different times; whichin general are static or dynamic. The former allows customizability without any overhead atruntime. On the other hand; the latter … J. de Melo Bezerra; C. Massaki Hirata; D.Randall: A Conceptual Framework to Define Incentive Mechanisms for Virtual Communities Onlineincentive mechanisms constitute a strategy to stimulate members to participate and …,*,*,*
PROGRAMAÇÃO FUNCIONAL USANDO ERLANG,Henrique E Mostaert Rebêlo; Ricardo Massa F Lima,Resumo: Este trabalho representa o primeiro tutorial em língua portuguesa da linguagemfuncional Erlang. Não é intenção do tutorial apresentar uma especificação formal dalinguagem. Por esta razão; a linguagem é apresentada de forma prática; através de umadescrição textual dos seus construtores; juntamente com exemplos de programas eavaliação de funções na linguagem. O tutorial não aborda aspectos de implementação dalinguagem. Na primeira parte do tutorial são discutidos aspectos da programaçãoseqüencial em Erlang; contemplando a definição de módulos; o Erlang Shell; definição devariáveis; tipos de dados e definição de funções. Finalmente; aspectos da programaçãoconcorrente em Erlang são brevemente descritos.,*,*,*
AJML Tools: AspectJ-Based JML Tools,Henrique Rebêlo; Ricardo Lima; Gary T Leavens; Márcio Cornélio; Sérgio Soares,*,*,*,*
