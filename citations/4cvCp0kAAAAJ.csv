Schema-based scheduling of event processors and buffer minimization for queries on structured data streams,Christoph Koch; Stefanie Scherzinger; Nicole Schweikardt; Bernhard Stegmaier,Abstract We introduce an extension of the XQuery language; FluX; that supports event-based query processing and the conscious handling of main memory buffers. Purely event-based queries of this language can be executed on streaming XML data in a very direct way.We then develop an algorithm that allows to efficiently rewrite XQueries into the event-basedFluX language. This algorithm uses order constraints from a DTD to schedule eventhandlers and to thus minimize the amount of buffering required for evaluating a query. Wediscuss the various technical aspects of query optimization and query evaluation within ourframework. This is complemented with an experimental evaluation of our approach.,Proceedings of the International Conference on Very Large Data Bases,2004,124
FluXQuery: an optimizing XQuery processor for streaming XML data,Christoph Koch; Stefanie Scherzinger; Nicole Schweikardt; Bernhard Stegmaier,XML has established itself as the ubiquitous format for data exchange on the Internet. Animminent development is that of streams of XML data being exchanged and queried. Datamanagement scenarios where XQuery [11] is evaluated on XML streams are becomingincreasingly important and realistic; eg in e-commerce settings. Naturally; query enginesemployed for stream processing are main-memory-based; yet contemporary XQueryengines consume main memory in large multiples of the actual size of the input documents(cf.[10; 8]). This excessive need for buffers has proven to be a serious scalability issue andsignificant research challenge [10; 9; 5; 3].,Proceedings of the Thirtieth international conference on Very large data bases-Volume 30,2004,103
Attribute grammars for scalable query processing on XML streams,Christoph Koch; Stefanie Scherzinger,Abstract We introduce the notion of XML Stream Attribute Grammars (XSAGs). XSAGs arethe first scalable query language for XML streams (running strictly in linear time withbounded memory consumption independent of the size of the stream) that allows for actualdata transformations rather than just document filtering. XSAGs are also relatively easy touse for humans. Moreover; the XSAG formalism provides a strong intuition for which queriescan or cannot be processed scalably on streams. We introduce XSAGs together with thenecessary language-theoretic machinery; study their theoretical properties such asexpressiveness and complexity; and discuss their implementation.,Database Programming Languages,2004,61
Combined static and dynamic analysis for effective buffer minimization in streaming XQuery evaluation,Michael Schmidt; Stefanie Scherzinger; Christoph Koch,Effective buffer management is crucial for efficient in-memory and streaming XQueryprocessing. We propose a buffer management scheme which combines static and dynamicanalysis to keep main memory consumption low. Our approach relies on a technique that wecall active garbage collection and which actively purges buffers at runtime based on thecurrent status of query evaluation. We have built a prototype system for a practical fragmentof XQuery which employs our buffer management scheme. The experimental resultsdemonstrate the significant impact of combined static and dynamic analysis on reducingmain memory consumption and running time.,2007 IEEE 23rd International Conference on Data Engineering,2007,40
Attribute grammars for scalable query processing on XML streams,Christoph Koch; Stefanie Scherzinger,Abstract We introduce the notion of XML Stream Attribute Grammars (XSAGs). XSAGs arethe first scalable query language for XML streams (running strictly in linear time withbounded memory consumption independent of the size of the stream) that allows for actualdata transformations rather than just document filtering. XSAGs are also relatively easy touse for humans. Moreover; the XSAG formalism provides a strong intuition for which queriescan or cannot be processed scalably on streams. We introduce XSAGs together with thenecessary language-theoretic machinery; study their theoretical properties such asexpressiveness and complexity; and discuss their implementation.,The VLDB journal,2007,36
Managing Schema Evolution in NoSQL Data Stores,Stefanie Scherzinger; Meike Klettke; Uta Störl,Abstract: NoSQL data stores are commonly schema-less; providing no means for globallydefining or managing the schema. While this offers great flexibility in early stages ofapplication development; developers soon can experience the heavy burden of dealing withincreasingly heterogeneous data. This paper targets schema evolution for NoSQL datastores; the complex task of adapting and changing the implicit structure of the data stored.We discuss the recommendations of the developer community on handling schemachanges; and introduce a simple; declarative schema evolution language. With ourlanguage; software developers and architects can systematically manage the evolution oftheir production data and perform typical schema maintenance tasks. We further provide aholistic NoSQL database programming language to define the semantics of our schema …,arXiv preprint arXiv:1308.0514,2013,34
Schema Extraction and Structural Outlier Detection for JSON-based NoSQL Data Stores,Meike Klettke; Stefanie Scherzinger; Uta Störl,Although most NoSQL Data Stores are schema-less; information on the structural propertiesof the persisted data is nevertheless essential during application development. Otherwise;accessing the data becomes simply impractical. In this paper; we introduce an algorithm forschema extraction that is operating outside of the NoSQL data store. Our method isspecifically targeted at semi-structured data persisted in NoSQL stores; eg; in JSON format.Rather than designing the schema up front; extracting a schema in hindsight can be seen asa reverse-engineering step. Based on the extracted schema information; we propose set ofsimilarity measures that capture the degree of heterogeneity of JSON data and which revealstructural outliers in the data. We evaluate our implementation on two real-life datasets: adatabase from the Wendelstein 7-X project and Web Performance Data.,BTW,2015,24
Schemaless NoSQL Data Stores–Object-NoSQL Mappers to the Rescue?,Uta Störl; Thomas Hauf; Meike Klettke; Stefanie Scherzinger,NoSQL data stores are becoming increasingly popular in application development. Thesesystems are attractive for developers due to their ability to handle large volumes of data; aswell as data with a high degree of structural variety. Typically; NoSQL data stores areaccessed programmatically. Due to the imminent lack of standardized query languages;building applications against the native interfaces of NoSQL data stores creates anunfortunate technical lock-in. To re-gain platform independence; developers turn to objectmapper libraries as an additional level of abstraction when accessing NoSQL data stores.The current market for Java object mappers that support NoSQL data stores is still volatile;with commercial and open source products competing for adoption. In this paper; we give anoverview on the state-of-the-art in Object-Relational Mappers that can handle also …,BTW,2015,20
Syntax-directed transformations of XML streams,Stefanie Scherzinger; Alfons Kemper,Abstract We discuss the TransformX framework for syntax-directed transformations of XMLstreams. In this framework; we define stream transformations as a special form of attributedextended regular tree grammars where all attributes can be evaluated in a single pass overthe input; a necessity in stream processing. In the tradition of tools such as Yacc; theTransformX parser generator translates attribute grammars to Java source code; which isthen compiled and evaluated. We motivate our approach in developing this tool; present thetheoretical foundations; and study the complexity of program generation. We further providedetails on our prototype implementation and first experimental results.,Workshop on Programming Language Technologies for XML (PLAN-X),2005,20
XML prefiltering as a string matching problem,Christoph Koch; Stefanie Scherzinger; Michael Schmidt,We propose a new technique for the efficient search and navigation in XML documents andstreams. This technique takes string matching algorithms designed for efficient keywordsearch in flat strings into the second dimension; to navigate in tree structured data. Weconsider the important XML data management task of prefiltering XML documents (alsocalled XML projection) as an application for our approach. Different from existing prefilteringschemes; we usually process only fractions of the input and get by with very economicalconsumption of both main memory and processing time. Our experiments reveal that;already on low-complexity problems such as XPath filtering; in-memory query engines canexperience speed-ups by two orders of magnitude.,2008 IEEE 24th International Conference on Data Engineering,2008,19
ControVol: A Framework for Controlled Schema Evolution in NoSQL Application Development,Stefanie Scherzinger; EC de Almeida; T Cerqueus,Building scalable web applications on top of NoSQL data stores is becoming commonpractice. Many of these data stores can easily be accessed programmatically; and do notenforce a schema. Software engineers can design the data model on the go; a flexibility thatis crucial in agile software development. The typical tasks of database schema managementare now handled within the application code; usually involving object mapper libraries.However; today's Integrated Development Environments (IDEs) lack the proper tool supportwhen it comes to managing the combined evolution of the application code and of theschema. Yet simple refactorings such as renaming an attribute at the source code level cancause irretrievable data loss or runtime errors once the application is serving in production.In this demo; we present ControVol; a framework for controlled schema evolution in …,Proc. ICDE,2015,13
Performance monitoring of a computer resource,*,A method; computer program product; and system for performance monitoring of a computerresource utilized by a user community. The computer resource is monitored; and sets ofperformance metrics characterizing a state of the computer resource are collected andanalyzed to detect performance incidents. External information such as contextualinformation and user annotations are also collected and analyzed. If a performance incidentis detected; its set of performance metrics and associated external information are used tosearch a data repository of past performance incidents for related incidents; in order toidentify critical performance incidents; determine recommended solutions for theperformance incidents; and determine performance forecasts for the computer resource.,*,2013,11
Performance Monitoring of a Computer Resource,*,A method; computer program product; and system for performance monitoring of a computerresource utilized by a user community. The computer resource is monitored; and sets ofperformance metrics characterizing a state of the computer resource are collected andanalyzed to detect performance incidents. External information such as contextualinformation and user annotations are also collected and analyzed. If a performance incidentis detected; its set of performance metrics and associated external information are used tosearch a data repository of past performance incidents for related incidents; in order toidentify critical performance incidents; determine recommended solutions for theperformance incidents; and determine performance forecasts for the computer resource.,*,2010,11
Safely managing data variety in big data software development,Thomas Cerqueus; Eduardo Cunha de Almeida; Stefanie Scherzinger,Abstract We consider the task of building Big Data software systems; offered as software-as-a-service. These applications are commonly backed by NoSQL data stores that address theproverbial Vs of Big Data processing: NoSQL data stores can handle large volumes of dataand many systems do not enforce a global schema; to account for structural variety in data.Thus; software engineers can design the data model on the go; a flexibility that is particularlycrucial in agile software development. However; NoSQL data stores commonly do not yetaccount for the veracity of changes when it comes to changes in the structure of persisteddata. Yet this is an inevitable consequence of agile software development. In most NoSQL-based application stacks; schema evolution is completely handled within the applicationcode; usually involving object mapper libraries. Yet simple code refactorings; such as …,Proceedings of the First International Workshop on BIG Data Software Engineering,2015,10
Datenbanken ohne Schema?,Meike Klettke; Stefanie Scherzinger; Uta Störl,Zusammenfassung In der Entwicklung von interaktiven Web-Anwendungen sind NoSQL-Datenbanksysteme zunehmend beliebt; nicht zuletzt; weil sie flexible Datenmodelleerlauben. Das erleichtert insbesondere ein agiles Projektmanagement; das sich durchhäufige Releases und entsprechend häufige Änderungen am Datenmodell auszeichnet. Indiesem Artikel geben wir einen Überblick über die besonderen Herausforderungen deragilen Anwendungsentwicklung gegen schemalose NoSQL-Datenbanksysteme. Wir stellenStrategien für die Schema-Evolution aus der Praxis vor; und postulieren unsere Vision einereigenen Schema-Management-Komponente für NoSQL-Datenbanksysteme; die für einekontinuierliche und systematische Schema-Evolution ausgelegt ist.,Datenbank-Spektrum,2014,10
The GCX system: dynamic buffer minimization in streaming XQuery evaluation,Christoph Koch; Stefanie Scherzinger; Michael Schmidt,Abstract In this demonstration; we present the main-memory based streaming XQueryengine GCX which implements novel buffer management strategies that combine static anddynamic analysis to keep main memory consumption low. Depending on the progress madein query evaluation; memory buffers are dynamically purged and minimized. In this demo;we show the various stages in evaluating a practical fragment of XQuery with GCX. Wepresent the major steps in static analysis and demonstrate the mechanisms of dynamicbuffer minimization. We apply our system to XML streams and demonstrate the significantimpact of our approach on reducing main memory consumption and running time.,Proceedings of the 33rd international conference on Very large data bases,2007,10
Performing a background copy process during a backup operation,*,In one embodiment; a system includes a performance monitoring facility of a databaseadapted for measuring performance of the database regularly; a data protection manager forcontrolling a backup operation of the database on a storage subsystem; logic adapted forproviding an interface between the performance monitoring facility of the database and thedata protection manager; logic adapted for starting the backup operation while informing theperformance monitoring facility about the starting of the backup operation; logic adapted forcontinuously evaluating performance of the database to determine when a predefinedperformance criterion is violated; and logic adapted for sending information from theperformance monitoring facility to the data protection manager to cause compliance with thepredefined performance criterion in response to the predefined performance criterion …,*,2015,8
Method and system for geographic search for public transportation commuters,*,Systems; methods; and machine-readable media for identifying points of interest areprovided. The system may include an interface module; a route module; a search module;and a rank module. The interface module may be configured to receive a request to identifypoints of interest along a travel route; the request including a predetermined distance and asearch term. The route module may be configured to obtain; from a database; a set of traveldecision nodes along the travel route. The search module may be configured to perform; foreach travel decision node in the set of travel decision nodes; a search for points of interestwithin the predetermined distance of the travel decision node based on the search term. Therank module may be configured to prioritize the points of interest identified by the search.After the points of interest are prioritized; the interface module may output the prioritized …,*,2013,8
On the necessity of model checking NoSQL database schemas when building SaaS applications,Stefanie Scherzinger; Eduardo Cunha De Almeida; Felipe Ickert; Marcos Didonet Del Fabro,Abstract The design of the NoSQL schema has a direct impact on the scalability of webapplications. Especially for developers with little experience in NoSQL stores; the risksinherent in poor schema design can be incalculable. Worse yet; the issues will only manifestonce the application has been deployed; and the growing user base causes highlyconcurrent writes. In this paper; we present a model checking approach to reveal scalabilitybottlenecks in NoSQL schemas. Our approach draws on formal methods from tree automatatheory to perform a conservative static analysis on both the schema and the expected write-behavior of users. We demonstrate the impact of schema-inherent bottlenecks for a popularNoSQL store; and show how concurrent writes can ultimately lead to a considerable share offailed transactions.,Proceedings of the 2013 International Workshop on Testing the Cloud,2013,8
Bulk data in main memory-based XQuery evaluation,Stefanie Scherzinger,Abstract XQuery processors that load the input into main memory suffer from huge memorydemands. Yet for the evaluation of many queries; large parts of the input are actuallyirrelevant. In XML document projection; this data is recognized and not loaded in the firstplace. However; there are also queries where little can be gained by projection. We haveobserved that these queries tend to require large parts of the input only for generatingoutput. This suggests that such" bulk" data may be stored and treated differently from datathat is actually traversed in query evaluation. In this paper; we present a technique torecognize bulk data while loading XML documents for the evaluation of composition-freeXQuery. Our approach is coupled with XML document projection; and utilizes a finiteautomaton that is expressly suited for matching path expressions. We show in an …,Proc. XIME-P,2007,7
Data model evolution using object-NoSQL mappers: folklore or state-of-the-art?,Andreas Ringlstetter; Stefanie Scherzinger; Tegawendé F Bissyandé,In big data software engineering; the schema flexibility of NoSQL document stores is a majorselling point: When the document store itself does not actively manage a schema; the datamodel is maintained within the application. Just like object-relational mappers for relationaldatabases; object-NoSQL mappers are part of professional software development withNoSQL document stores. Some mappers go beyond merely loading and storing Javaobjects: Using dedicated evolution annotations; developers may conveniently add; remove;or rename attributes from stored objects; and also conduct more complex transformations. Inthis paper; we analyze the dissemination of this technology in Java open source projects.While we find evidence on GitHub that evolution annotations are indeed being used;developers do not employ them so much for evolving the data model; but to solve different …,Proceedings of the 2nd International Workshop on BIG Data Software Engineering,2016,6
A Datalog-based protocol for lazy data migration in agile NoSQL Application development,Stefanie Scherzinger; Uta Störl; Meike Klettke,Abstract We address a practical challenge in agile web development against NoSQL datastores: Upon a new release of the web application; entities already persisted in productionno longer match the application code. Rather than migrating all legacy entities eagerly (priorto the release) and at the cost of application downtime; lazy data migration is a popularalternative: When a legacy entity is loaded by the application; all pending structural changesare applied. Yet correctly migrating legacy data from several releases back; involving morethan one entity at-a-time; is not trivial. In this paper; we propose a holistic Datalog¬ non-recmodel model for reading; writing; and migrating data. In implementing our model; we mayblend established Datalog evaluation algorithms; such as an incremental evaluation withcertain rules evaluated bottom-up; and certain rules evaluated top-down with sideways …,Proceedings of the 15th Symposium on Database Programming Languages,2015,6
Cleager: Eager Schema Evolution in NoSQL Document Stores,Stefanie Scherzinger; OTH Regensburg; Meike Klettke; Uta Störl,Schema-less NoSQL data stores offer great flexibility in application development;particularly in the early stages of software design. Yet over time; software engineers strugglewith the heavy burden of dealing with increasingly heterogeneous data. In this demo wepresent Cleager; a framework for eagerly managing schema evolution in schema-lessNoSQL document stores. Cleager executes declarative schema modification operations asMapReduce jobs on the Google Cloud Platform. We present different scenarios that requiredata migration; such as adding; removing; or renaming properties of persisted objects; aswell as copying and moving them between objects. Our audience can declare the requiredschema migration operations in the Cleager console; and then verify the results in real time.,BTW,2015,5
Write buffer for improved DRAM write access patterns,*,The present invention relates to a method and respective system for operating a DRAM mainmemory. One buffer line is provided for multiple pages. When writing data to the buffer it isdecided which to which buffer-line the data is written to based on its destination mainmemory address. A tuple consisting of lower memory address and data is stored. Dataentered into the buffer-line will be sorted by page in case the line is flushed to the mainmemory. Sorting the buffer entries results in less page openings and closings; since the datais re-arranged by memory address and therefore in logical order. By using one line formultiple pages only a fraction of memory of a common set-associative cache is needed; thusdecreasing the amount of overhead significantly.,*,2013,4
NoSQL Data Model Evaluation on App Engine Datastore,Felipe Ickert; Marcos Didonet Del Fabro; Eduardo Cunha de Almeida; Stefanie Scherzinger,*,28 TH BRAZILIAN SYMPOSIUM ON DATABASES,2013,4
Computing Intersection of Sets of Numbers,*,First and second sets of numbers are received in an input range; which is separated into subranges. A first sub range is processed by initializing bits of a memory to a first logical stateand by changing the initial state of each of the bits corresponding to a received number ofthe first set that is within the first sub range. Each number received in the second set iscompared to a bit in the memory to identify a set of received numbers that are in the first subrange and that are in both the first set and the second set. The comparing is responsive todetecting a change of initial state of any bit in the memory during the processing of the firstsub range. The processing and comparing is repeated for remaining sub ranges to identifyreceived numbers that are in both the sets.,*,2011,4
Finding and Fixing Type Mismatches in the Evolution of Object-NoSQL Mappings.,Stefanie Scherzinger; Eduardo Cunha de Almeida; Thomas Cerqueus; Leandro Batista de Almeida; Pedro Holanda,ABSTRACT NoSQL data stores are popular backends for managing big data that is evolvingover time: Due to their schema-flexibility; a new release of the application does not require afull migration of data already persisted in production. Instead; using object-NoSQL mappers;developers can specify lazy data migrations that are executed on-the-fly; when a legacyentity is loaded into the application. This paper features ControVol; an IDE plugin that tracksevolutionary changes in object-NoSQL mappings; such as adding; renaming; or removingan attribute; which may conflict with entities already persisted in production. If not resolvedprior to launch of the new application; harmful evolutionary changes can cause runtimeexceptions or data loss. In this demo; we focus on a novel feature of ControVol; detectingchanges to attribute types that are not backwards-compatible with legacy entities. When …,EDBT/ICDT Workshops,2016,3
ControVol: Let Yesterday's Data Catch Up with Today's Application Code,Thomas Cerqueus; Eduardo Cunha de Almeida; Stefanie Scherzinger,Abstract In building software-as-a-service applications; a flexible development environmentis key to shipping early and often. Therefore; schema-flexible data stores are becomingmore and more popular. They can store data with heterogeneous structure; allowing for newreleases to be pushed frequently; without having to migrate legacy data first. However; thecurrent application code must continue to work with any legacy data that has already beenpersisted in production. To let legacy data structurally" catch up" with the latest applicationcode; developers commonly employ object mapper libraries with life-cycle annotations. Yetwhen used without caution; they can cause runtime errors and even data loss. We presentControVol; an IDE plugin that detects evolutionary changes to the application code that areincompatible with legacy data. ControVol warns developers already at development time …,Proceedings of the 24th International Conference on World Wide Web,2015,3
Enabling Efficient Agile Software Development of NoSQL-backed Applications.,Uta Störl; Daniel Müller; Meike Klettke; Stefanie Scherzinger,NoSQL databases are popular in agile software development; where a frequently changingdatabase schema imposes challenges for the production database. In this demo; we presentDarwin; a middleware for systematic; tool-based support specifically designed for NoSQLdatabase systems. Darwin carries out schema evolution and data migration tasks. To thebest of our knowledge; Darwin is the first tool of its kind that supports both eager and lazyNoSQL data migration.,BTW,2017,2
NoSQL schema evolution and big data migration at scale,Meike Klettke; Uta Störl; Manuel Shenavai; Stefanie Scherzinger,This paper explores scalable implementation strategies for carrying out lazy schemaevolution in NoSQL data stores. For decades; schema evolution has been an evergreen indatabase research. Yet new challenges arise in the context of cloud-hosted data backends:With all database reads and writes charged by the provider; migrating the entire datainstance eagerly into a new schema can be prohibitively expensive. Thus; lazy migrationmay be more cost-efficient; as legacy entities are only migrated in case they are actuallyaccessed by the application. Related work has shown that the overhead of migrating datalazily is affordable when a single evolutionary change is carried out; such as adding a newproperty. In this paper; we focus on long-term schema evolution; where chains of pendingschema evolution operations may have to be applied. Chains occur when legacy entities …,Big Data (Big Data); 2016 IEEE International Conference on,2016,2
Datalution: a tool for continuous schema evolution in NoSQL-backed web applications,Stefanie Scherzinger; Stephanie Sombach; Katharina Wiech; Meike Klettke; Uta Störl,Abstract When an incremental release of a web application is deployed; the structure of dataalready persisted in the production database may no longer match what the applicationcode expects. Traditionally; eager schema migration is called for; where all legacy data ismigrated in one go. With the growing popularity of schema-flexible NoSQL data stores; lazyforms of data migration have emerged: Legacy entities are migrated on-the-fly; one at-a-time; when they are loaded by the application. In this demo; we present Datalution; a tooldemonstrating the merits of lazy data migration. Datalution can apply chains of pendingschema changes; due to its Datalog-based internal representation. The Datalution approachthus ensures that schema evolution; as part of continous deployment; is carried out correctly.,Proceedings of the 2nd International Workshop on Quality-Aware DevOps,2016,2
Kontrolliertes Schema-Evolutionsmanagement für NoSQL-Datenbanksysteme,Uta Störl; Meike Klettke; Stefanie Scherzinger,Zusammenfassung. In der agilen Entwicklung von Anwendungen werden neue Software-Versionen häufig und regelmäßig veröffentlicht. Relationale Datenbanksysteme mit ihremrigiden Schema-Management werden dabei oft als unflexibel empfunden. SchemaloseNoSQL-Datenbanksysteme bieten zwar die nötige Flexibilität; unterstützen aber keinsystematisches Release-und Schema-Evolutionsmanagement. Dieser Artikel stelltentsprechende Konzepte vor: Schema-Evolutionsschritte werden deklarativ spezifiziert; ihreUmsetzung erfolgt für die Anwendung transparent eager oder lazy. Während eine eagerMigration sämtliche Datensätze erfasst; werden lazy persistierte Objekte nur bei Zugriffdurch die Anwendung aktualisiert. Wir diskutieren eine effiziente lazy Migration selbst fürden Fall; dass eine Migration über mehrere Evolutionsschritte und mehrere persistierte …,LWA,2015,2
ControVol Flex: Flexible Schema Evolution for NoSQL Application Development,Florian Haubold; Johannes Schildgen; Stefanie Scherzinger; Stefan Deßloch,We demonstrate ControVol Flex; an Eclipse plugin for controlled schema evolution in Javaapplications backed by NoSQL document stores. The sweet spot of our tool are applicationsthat are deployed continuously against the same production data store: Each new releasemay bring about schema changes that conflict with legacy data already stored in production.The type system internal to the predecessor tool ControVol is able to detect commonschema conflicts; and enables developers to resolve them with the help of object-mapperannotations. Our new tool ControVol Flex lets developers choose their schema-migrationstrategy; whether all legacy data is to be migrated eagerly by means of NotaQLtransformation scripts; or lazily; as declared by object-mapper annotations. Our tool is evencapable of carrying out both strategies in combination; eagerly migrating data in the …,Datenbanksysteme für Business; Technologie und Web (BTW 2017),2017,1
Kurz erklärt: Objekt-NoSQL-Mapping,Uta Störl; Meike Klettke; Stefanie Scherzinger,S. Scherzinger OTH Regensburg; Regensburg; Deutschland E-Mail: stefanie. scherzinger@oth-regensburg. de die systemunabhängige Anwendungsentwicklung unterstützen bzw.überhaupt erst ermöglichen. Im Folgenden werden die Grundlagen der Datenmodellierungbei der Verwendung gängiger Objekt-NoSQLMapper für Java dargestellt. Anschließend wirdein Überblick über den aktuellen Stand dieser Produkte gegeben. Dabei wird auch daraufeingegangen; wie sie der Herausforderung der derzeit noch sehr heterogenenAnfrageschnittstellen von NoSQL-Datenbanken begegnen. Die meisten NoSQL-DBMS sindschema-flexibel; dh sie verwalten keine expliziten Schemainformationen. Damit erlaubensie das Persistieren von Objekten mit variablen und sich dynamisch veränderndenSchemata. Aus diesem Grund kommt dem Schema-Management und der Schema …,Datenbank-Spektrum,2016,1
Methods; apparatuses; and computer-readable media for computing checksums for effective caching in continuous distributed builds,*,Methods; systems; and computer-readable media for determining whether dependencies ofconfiguration files have changed such that the compilation strategy should be recomputed.Local build checksums are computed for individual configuration files. The local buildchecksums are computed by sorting input paths to the configuration files plus data indicatingwhether the path refers to a file or a directory and a checksum computed on theconfiguration file itself. The transitive closure of local build checksums are then used tocompute a global build checksum: the local build checksums are sorted in order to computethe global build checksum. If the global build checksum is different from a previouslycomputed global build checksum; then the compilation strategy should be recomputed;since this is a signal that the compilation strategy may not be valid anymore; eg because …,*,2014,1
Cloud-Technologien in der Hochschullehre–Pflicht oder Kür?,Stefanie Scherzinger; Andreas Thor,Zusammenfassung Ein eigenes Themenheft zum Datenmanagement in der Cloud dient unsals Anlass; die Präsenz von Cloud-Themen in der akademischen Datenbanklehre zuerfassen. In diesem Artikel geben wir die Ergebnisse einer Umfrage innerhalb derFachgruppe Datenbanksysteme durch den Arbeitskreis Datenmanagement in der Cloudwieder. Dozentinnen und Dozenten von über zwanzig Hochschulen nahmen an derUmfrage teil. Es zeigt sich deutlich; dass sich das Thema „Cloud “in der Hochschullehrezunehmend etabliert; jedoch überwiegend als ergänzendes Angebot; und seltener in dergrundständigen Lehre verankert. Wir fassen die Ergebnisse unserer Umfrage zusammenund wagen Deutungsversuche.,Datenbank-Spektrum,2014,1
Agil und spielerisch: Neue Methoden der Software-Entwicklung in der Praxis und ihr Potential für den Schulunterricht.,Stefanie Scherzinger,„Agile Software-Entwicklung “bezeichnet eine iterative Vorgehensweise; die sowohl inSilicon Valley Startups als auch großen Software-Häusern erfolgreich eingesetzt wird.Musste nach dem Wasserfall-Modell jede Eventualität im Voraus akribisch bedacht werden;sind agile Ansätze deutlich flexibler: In kurzen Zyklen wird eine einfache; prototypischeLösung zum vollwertigen Produkt ausgebaut. Am Ende jedes Zyklus steht das fertiggetestete Produkt; auch wenn es möglicherweise noch nicht über sämtliche gewünschtenFunktionalitäten verfügen sollte; ist es für die wichtigsten Zwecke bereits einsatzbereit. Somitkönnen Auftraggeber zeitnah Änderungswünsche einbringen und das Produkt noch in derEntstehungsphase auf das Nutzungsziel ausrichten. Das Entwicklungsteam wiederum kannauf Unvorhergesehenes flexibel reagieren und Zwischenerfolge entsprechend …,INFOS,2011,1
End-to-End Performance Monitoring of Databases in Distributed Environments.,Stefanie Scherzinger; Holger Karn; Torsten Steinbach,Abstract: This demonstration features the IBM DB2 Performance Expert for Linux; Unix andWindows; a high-end database monitoring tool that is capable of end-to-end monitoring indistributed environments. Performance Expert closely tracks the execution of databaseworkload; from the point when the workload is issued in a database application; to its actualexecution by the database server. This enables us to break down the response time asexperienced by the user into time spent waiting for connections; within database drivers; thenetwork; and finally; within the database server. From a data management point-of-view; themain challenge here is the handling of large amounts of performance data. We show howthis challenge is met by continuous aggregation; and the definition of so-called workloadcluster groups; which organize and narrow down the data of interest.,BTW,2009,1
Uncovering the evolution history of data lakes,Meike Klettke; Hannes Awolin; Uta Störl; Daniel Müller; Stefanie Scherzinger,Data accumulating in data lakes can become inaccessible in the long run when itssemantics are not available. The heterogeneity of data formats and the sheer volumes ofdata collections prohibit cleaning and unifying the data manually. Thus; tools for automateddata lake analysis are of great interest. In this paper; we target the particular problem ofreconstructing the schema evolution history from data lakes. Knowing how the data isstructured; and how this structure has evolved over time; enables programmatic access tothe lake. By deriving a sequence of schema versions; rather than a single schema; we takeinto account structural changes over time. Moreover; we address the challenge of detectinginclusion dependencies. This is a prerequisite for mapping between succeeding schemaversions; and in particular; detecting nontrivial changes such as a property having been …,Big Data (Big Data); 2017 IEEE International Conference on,2017,*
Herausforderungen bei der Anwendungsentwicklung mit schema-flexiblen NoSQL-Datenbanken,Meike Klettke; Uta Störl; Stefanie Scherzinger,Zusammenfassung NoSQL-Datenbanksysteme sind in den letzten Jahren sehr populärgeworden; gute Gründe sprechen für ihren Einsatz: Eine attraktive Eigenschaft vielerSysteme ist ihre Schema-Flexibilität; die insbesondere in der agilenAnwendungsentwicklung Vorteile bietet. Durch horizontale Skalierbarkeit ermöglichenNoSQL-Datenbanksysteme eine effiziente Verarbeitung großer Datenmengen. EinigeSysteme; die für die Datenhaltung interaktiver Anwendungen konzipiert sind; können zudemhochfrequente Nutzeranfragen bedienen. Diesen Vorteilen stehen eine Reihe vonNachteilen gegenüber; aus denen sich neue Herausforderungen für dieAnwendungsentwicklung ergeben: Fehlende Standards bei den Anfragesprachenerschweren die Entwicklung datenbanksystemunabhängiger Anwendungen. Schema …,HMD Praxis der Wirtschaftsinformatik,2016,*
Challenges with Continuous Deployment of NoSQL-backed Database Applications,Meike Klettke; Stefanie Scherzinger; Uta Störl; Stephanie Sombach; Katharina Wiech,*,Herbsttreffen der Fachgruppe Datenbanken,2016,*
PERFORMING A BACKGROUND COPY PROCESS DURING A BACKUP OPERATION,*,A method according to one embodiment includes receiving information from a performancemonitoring facility of a database at a data protection manager implemented at least in part inhardware; wherein the performance monitoring facility is configured to measureperformance of the database; wherein the data protection manager is configured to control abackup operation of the database on a storage subsystem. The backup operation is started;and the performance monitoring facility is informed about the starting of the backupoperation. In response to receiving an indication that a predefined performance criterion hasbeen violated; information from the performance monitoring facility is received at the dataprotection manager; the data protection manager causing compliance with the predefinedperformance criterion in response to the information.,*,2015,*
Identifying reroutable data columns in an ETL process,*,Reroutable data columns are identified in an ETL process by receiving an ETL processdefinition describing a set of processing stages and how each processing stage output datacolumn is a result of a function that operates on a set of input data columns; representing theETL process definition as a directed graph with nodes representing processing stages andlinks representing data flow between processing stages; traversing at least part of thedirected graph and identifying a set of subsequent nodes of the directed graph where atleast one data column is involved only as input data in identity functions; the at least onedata column being reroutable between outmost nodes of the set of subsequent nodes; andin connection with traversing the at least part of the directed graph; maintaining informationabout reroutable data columns and the respective outmost nodes.,*,2015,*
AutoShard–A Java Object Mapper (not only) for Hot Spot Data Objects in NoSQL Data Stores,Stefanie Scherzinger; Andreas Thor,We demonstrate AutoShard; a ready-to-use object mapper for Java applications runningagainst NoSQL data stores. AutoShard's unique feature is its capability to gracefully shardhot spot data objects that are suffering under concurrent writes. By sharding data on thelevel of the logical schema; scalability bottlenecks due to write contention can be effectivelyavoided. Using AutoShard; developers can easily employ sharding in their web applicationby adding minimally intrusive annotations to their code. Our live experiments show thesignificant impact of sharding on both the write throughput and the execution time.,BTW,2015,*
AutoShard–Declaratively Managing Hot Spot Data Objects in NoSQL Document Stores,Stefanie Scherzinger; Andreas Thor,*,WebDB,2014,*
System and method for merging monitoring data streams from a server and a client of the server,*,A method; system; and computer program product for merging monitoring data streamsincludes: receiving a first monitoring data stream relating to a server containing first records;each first record has a first transaction identifier relating to a first transaction and firstmonitoring data; relating to a performance of executing the first transaction; receiving asecond monitoring data stream relating to a client containing second records; each secondrecord has a list of second transaction identifiers relating to one or more second transactionsand second monitoring data; relating to a performance of executing the second transactions;buffering at least parts of the first and the second monitoring data streams; and merging thebuffered first and second monitoring data streams by computing an outer-join with a join-condition that the first records have the first transaction identifier that occurs in the list of …,*,2013,*
METHODS AND APPARATUSES FOR COMPUTING CHECKSUMS FOR EFFECTIVE CACHING IN CONTINUOUS DISTRIBUTED BUILDS,*,*,*,2013,*
Ein Cloud-basiertes räumliches Decision Support System für die Herausforderungen der Energiewende,Golo Klossek; Stefanie Scherzinger; Michael Sterner,KURZFASSUNG Die Energiewende in Deutschland wirft sehr konkrete Fragestellungen auf:Welche Standorte eignen sich für Windkraftwerke; wo können Solaranlagen wirtschaftlichbetrieben werden? Dahinter verbergen sich rechenintensive Datenverarbeitungsschritte;auszuführen auf Big Data aus mehreren Datenquellen; in entsprechend heterogenenFormaten. Diese Arbeit stellt exemplarisch eine konkrete Fragestellung und ihreBeantwortung als MapReduce Algorithmus vor. Wir konzipieren eine geeignete; Cluster-basierte Infrastruktur für ein neues Spatial Decision Support System und legen dieNotwendigkeit einer deklarativen; domänenspezifischen Anfragesprache dar.,Grundlagen von Datenbanken,2013,*
Efficient main memory-based XML stream processing,Stefanie Scherzinger,Anwendungen; die XML-Dokumente als Dateien oder Ströme verarbeiten; sindnatürlicherweise hauptspeicherbasiert. Für die Skalierbarkeit wird der Hauptspeicher damitzu einem Engpass. Diese Doktorarbeit widmet sich diesem Problem; zu dessen Lösung sieWerkzeuge für eine effektive Pufferverwaltung in hauptspeicherbasierten Prozessoren fürXML-Datenströme vorstellt. Die Projektion von XML-Dokumenten ist eine etablierteMethode; um den Pufferverbrauch von hauptspeicherbasierten XML-Prozessoren zureduzieren. Dabei werden nur jene Daten in den Hauptspeicherpuffer geladen; die für dieAnfrageauswertung auch relevant sind. Wir präsentieren eine neue Implementierung dieserAufgabe; wobei wir Algorithmen zur effizienten Suche in flachen Zeichenketten einsetzen;um in baumartig strukturierten Daten zu navigieren. Danach stellen wir eine Erweiterung …,*,2008,*
User Manual GCX-Garbage Collected XQuery,Christoph Koch; Stefanie Scherzinger; Michael Schmidt,*,*,2007,*
Building a Native XML-DBMS as a Term Project in a Database Systems Course,Christoph Koch; Dan Olteanu; Stefanie Scherzinger,This is to report on a database systems course the first author held in the summer semesterof 2005 at Saarland University; Saarbrücken; Germany. This course was an experiment inseveral respects. For one; we wanted to teach a systems course with a practical part inwhich students apply the material taught to build the core of a database managementsystem. Such a systems building effort seems to be quite common in top-tier US universities;but it is rare in Europe. One main reason for this is that European curricula often requirestudents to take many small courses per term. Students then cannot be required to invest thetime necessary for such a systems-building effort into an individual course. In Saarbrücken;this fortunately does not apply and students are expected to take only about two maincourses per term.(The database systems course in Saarbrücken is worth 9 points in the …,*,2006,*
