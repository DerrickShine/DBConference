Lars: A location-aware recommender system,Justin J Levandoski; Mohamed Sarwat; Ahmed Eldawy; Mohamed F Mokbel,This paper proposes LARS; a location-aware recommender system that uses location-basedratings to produce recommendations. Traditional recommender systems do not considerspatial properties of users nor items; LARS; on the other hand; supports a taxonomy of threenovel classes of location-based ratings; namely; spatial ratings for non-spatial items; non-spatial ratings for spatial items; and spatial ratings for spatial items. LARS exploits userrating locations through user partitioning; a technique that influences recommendations withratings spatially close to querying users in a manner that maximizes system scalability whilenot sacrificing recommendation quality. LARS exploits item locations using travel penalty; atechnique that favors recommendation candidates closer in travel distance to querying usersin a way that avoids exhaustive access to all spatial items. LARS can apply these …,Data Engineering (ICDE); 2012 IEEE 28th International Conference on,2012,272,10
The Bw-Tree: A B-tree for new hardware platforms,Justin J Levandoski; David B Lomet; Sudipta Sengupta,The emergence of new hardware and platforms has led to reconsideration of how datamanagement systems are designed. However; certain basic functions such as key indexedaccess to records remain essential. While we exploit the common architectural layering ofprior systems; we make radically new design decisions about each layer. Our new form of B-tree; called the Bw-tree achieves its very high performance via a latch-free approach thateffectively exploits the processor caches of modern multi-core chips. Our storage manageruses a unique form of log structuring that blurs the distinction between a page and a recordstore and works well with flash storage. This paper describes the architecture and algorithmsfor the Bw-tree; focusing on the main memory aspects. The paper includes results of ourexperiments that demonstrate that this fresh approach produces outstanding performance.,Data Engineering (ICDE); 2013 IEEE 29th International Conference on,2013,148,10
Skyline query processing for incomplete data,Mohamed E Khalefa; Mohamed F Mokbel; Justin J Levandoski,Recently; there has been much interest in processing skyline queries for variousapplications that include decision making; personalized services; and search pruning.Skyline queries aim to prune a search space of large numbers of multi-dimensional dataitems to a small set of interesting items by eliminating items that are dominated by others.Existing skyline algorithms assume that all dimensions are available for all data items. Thispaper goes beyond this restrictive assumption as we address the more practical case ofinvolving incomplete data items (ie; data items missing values in some of their dimensions).In contrast to the case of complete data where the dominance relation is transitive;incomplete data suffer from non-transitive dominance relation which may lead to a cyclicdominance behavior. We first propose two algorithms; namely;" Replacement" and" …,Data Engineering; 2008. ICDE 2008. IEEE 24th International Conference on,2008,120,22
Deuteronomy: Transaction Support for Cloud Data.,Justin J Levandoski; David B Lomet; Mohamed F Mokbel; Kevin Zhao,Abstract The Deuteronomy system supports efficient and scalable ACID transactions in thecloud by decomposing functions of a database storage engine kernel into:(a) a transactionalcomponent (TC) that manages transactions and their “logical” concurrency control andundo/redo recovery; but knows nothing about physical data location and (b) a datacomponent (DC) that maintains a data cache and uses access methods to support a record-oriented interface with atomic operations; but knows nothing about transactions. TheDeuteronomy TC can be applied to data anywhere (in the cloud; local; etc.) with a variety ofdeployments for both the TC and DC. In this paper; we describe the architecture of our TC;and the considerations that led to it. Preliminary experiments using an adapted TPC-Wworkload show good performance supporting ACID transactions for a wide range of DC …,CIDR,2011,113,18
LARS*: An efficient and scalable location-aware recommender system,Mohamed Sarwat; Justin J Levandoski; Ahmed Eldawy; Mohamed F Mokbel,This paper proposes LARS*; a location-aware recommender system that uses location-based ratings to produce recommendations. Traditional recommender systems do notconsider spatial properties of users nor items; LARS*; on the other hand; supports ataxonomy of three novel classes of location-based ratings; namely; spatial ratings for non-spatial items; non-spatial ratings for spatial items; and spatial ratings for spatial items. LARS*exploits user rating locations through user partitioning; a technique that influencesrecommendations with ratings spatially close to querying users in a manner that maximizessystem scalability while not sacrificing recommendation quality. LARS* exploits itemlocations using travel penalty; a technique that favors recommendation candidates closer intravel distance to querying users in a way that avoids exhaustive access to all spatial …,IEEE Transactions on Knowledge and Data Engineering,2014,94,10
LARS*: An efficient and scalable location-aware recommender system,Mohamed Sarwat; Justin J Levandoski; Ahmed Eldawy; Mohamed F Mokbel,This paper proposes LARS*; a location-aware recommender system that uses location-based ratings to produce recommendations. Traditional recommender systems do notconsider spatial properties of users nor items; LARS*; on the other hand; supports ataxonomy of three novel classes of location-based ratings; namely; spatial ratings for non-spatial items; non-spatial ratings for spatial items; and spatial ratings for spatial items. LARS*exploits user rating locations through user partitioning; a technique that influencesrecommendations with ratings spatially close to querying users in a manner that maximizessystem scalability while not sacrificing recommendation quality. LARS* exploits itemlocations using travel penalty; a technique that favors recommendation candidates closer intravel distance to querying users in a way that avoids exhaustive access to all spatial …,IEEE Transactions on Knowledge and Data Engineering,2014,94,10
Toward context and preference-aware location-based services,Mohamed F Mokbel; Justin J Levandoski,Abstract The explosive growth of location-detection devices; wireless communications; andmobile databases has resulted in the realization of location-based services as commercialproducts and research prototypes. Unfortunately; current location-based applications (eg;store finders) are rigid as they are completely isolated from various concepts of user"preferences" and/or" context". Such rigidness results in nonsuitable services (eg; avegetarian user may get a restaurant with non-vegetarian menu). In this paper; we introducethe system architecture of a Context and Preference-Aware Location-based DatabaseServer (CareDB; for short); currently under development at University of Minnesota; thatdelivers personalized services to its customers based on the surrounding context. CareDBgoes beyond the traditional scheme of" one size fits all" of existing location-aware …,Proceedings of the Eighth ACM International Workshop on Data Engineering for Wireless and Mobile Access,2009,82,10
Identifying hot and cold data in main-memory databases,Justin J Levandoski; P-A Larson; Radu Stoica,Main memories are becoming sufficiently large that most OLTP databases can be storedentirely in main memory; but this may not be the best solution. OLTP workloads typicallyexhibit skewed access patterns where some records are hot (frequently accessed) but manyrecords are cold (infrequently or never accessed). It is more economical to store the coldestrecords on secondary storage such as flash. As a first step towards managing cold data indatabases optimized for main memory we investigate how to efficiently identify hot and colddata. We propose to log record accesses-possibly only a sample to reduce overhead-andperform offline analysis to estimate record access frequencies. We present four estimationalgorithms based on exponential smoothing and experimentally evaluate their efficiency andaccuracy. We find that exponential smoothing produces very accurate estimates; leading …,Data Engineering (ICDE); 2013 IEEE 29th International Conference on,2013,79,4
Application layer packet classifier for Linux,Justin Levandoski,CiNii 国立情報学研究所 学術情報ナビゲータ[サイニィ]. メニュー 検索 …,http://l7-filter. sourceforge. net/,2008,79,10
RDF data-centric storage,Justin J Levandoski; Mohamed F Mokbel,The vision of the Semantic Web has brought about new challenges at the intersection of webresearch and data management. One fundamental research issue at this intersection is thestorage of the Resource Description Framework (RDF) data: the model at the core of theSemantic Web. We present a data-centric approach for storage of RDF in relationaldatabases. The intuition behind our approach is that each RDF dataset requires a tailoredtable schema that achieves efficient query processing by (1) reducing the need for joins inthe query plan and (2) keeping null storage below a given threshold. Using a basic structurederived from the RDF data; we propose a two-phase algorithm involving clustering andpartitioning. The clustering phase aims to reduce the need for joins in a query. Thepartitioning phase aims to optimize storage of extra (ie; null) data in the underlying …,Web Services; 2009. ICWS 2009. IEEE International Conference on,2009,60,4
Sindbad: a location-based social networking system,Mohamed Sarwat; Jie Bao; Ahmed Eldawy; Justin J Levandoski; Amr Magdy; Mohamed F Mokbel,Abstract This demo presents Sindbad; a location-based social networking system. Sindbadsupports three new services beyond traditional social networking services; namely; location-aware news feed; location-aware recommender; and location-aware ranking. These newservices not only consider social relevance for its users; but they also consider spatialrelevance. Since location-aware social networking systems have to deal with large numberof users; large number of messages; and user mobility; efficiency and scalability areimportant issues. To this end; Sindbad encapsulates its three main services inside the queryprocessing engine of PostgreSQL. Usage and internal functionality of Sindbad; implementedwith PostgreSQL and Google Maps API; are demonstrated through user (ie; web/phone) andsystem analyzer GUI interfaces; respectively.,Proceedings of the 2012 ACM SIGMOD International Conference on Management of Data,2012,52,22
FlexPref: A framework for extensible preference evaluation in database systems,Justin J Levandoski; Mohamed F Mokbel; Mohamed E Khalefa,Personalized database systems give users answers tailored to their personal preferences.While numerous preference evaluation methods for databases have been proposed (eg;skyline; top-k; k-dominance; k-frequency); the implementation of these methods at the coreof a database system is a double-edged sword. Core implementation provides efficientquery processing for arbitrary database queries; however this approach is not practical aseach existing (and future) preference method requires a custom query processorimplementation. To solve this problem; this paper introduces FlexPref; a framework forextensible preference evaluation in database systems. FlexPref; implemented in the queryprocessor; aims to support a wide-array of preference evaluation methods in a singleextensible code base. Integration with FlexPref is simple; involving the registration of only …,Data Engineering (ICDE); 2010 IEEE 26th International Conference on,2010,49,10
StreamRec: a real-time recommender system,Badrish Chandramouli; Justin J Levandoski; Ahmed Eldawy; Mohamed F Mokbel,Research and development of recommender systems has been a vibrant field for over adecade; having produced proven methods for “preference-aware” computing.Recommenders use community opinion histories to help users identify interesting items froma considerably large search space (eg; inventory from Amazon [7]; movies from Netflix [9]).Personalization; recommendation; and the “human side" of data-centric applications arealso becoming important topics in the data management community [3]. A popularrecommendation method used heavily in practice is collaborative filtering; consisting of twophases:(1) An offline model-building phase that uses community opinions of items (eg;movie ratings;“Diggs”[6]) to build a model storing meaningful correlations between usersand items.(2) An on-demand recommendation phase that uses the model to produce a …,Proceedings of the 2011 ACM SIGMOD International Conference on Management of data,2011,47,10
Trekking through siberia: Managing cold data in a memory-optimized database,Ahmed Eldawy; Justin Levandoski; Per-Åke Larson,Abstract Main memories are becoming sufficiently large that most OLTP databases can bestored entirely in main memory; but this may not be the best solution. OLTP workloadstypically exhibit skewed access patterns where some records are hot (frequently accessed)but many records are cold (infrequently or never accessed). It is still more economical tostore the coldest records on secondary storage such as flash. This paper introduces Siberia;a framework for managing cold data in the Microsoft Hekaton main-memory databaseengine. We discuss how to migrate cold data to secondary storage while providing aninterface to the user to manipulate both hot and cold data that hides the actual data location.We describe how queries of different isolation levels can read and modify data stored in bothhot and cold stores without restriction while minimizing number of accesses to cold …,Proceedings of the VLDB Endowment,2014,37,10
Skyline query processing for uncertain data,Mohamed E Khalefa; Mohamed F Mokbel; Justin J Levandoski,Abstract Recently; several research efforts have addressed answering skyline queriesefficiently over large datasets. However; this research lacks methods to compute thesequeries over uncertain data; where uncertain values are represented as a range. In thispaper; we define skyline queries over continuous uncertain data; and propose a novel;efficient framework to answer these queries. Query answers are probabilistic; where eachobject is associated with a probability value of being a query answer. Typically; users specifya probability threshold; that each returned object must exceed; and a tolerance value thatdefines the allowed error margin in probability calculation to reduce the computationaloverhead. Our framework employs an efficient two-phase query processing algorithm.,Proceedings of the 19th ACM international conference on Information and knowledge management,2010,31,13
An Overview of the CareDB Context and Preference-Aware Database System.,Justin J Levandoski; Mohamed E Khalefa; Mohamed F Mokbel,*,IEEE Data Eng. Bull.,2011,30
Caredb: A context and preference-aware location-based database system,Justin J Levandoski; Mohamed F Mokbel; Mohamed E Khalefa,Abstract We demonstrate CareDB; a context and preference-aware database system.CareDB provides scalable personalized location-based services to users based on theirpreferences and current surrounding context. Unlike existing location-based databasesystems that answer queries based solely on proximity in distance; CareDB considers userpreferences and various types of context in determining the answer to location-basedqueries. To this end; CareDB does not aim to define new location-based queries; instead; itaims to redefine the answer of existing location-based queries. To achieve its goals; CareDBhas several distinguishing characteristics that revolve around a generic and extensiblepreference and context-aware query processing framework that addresses (a) scalable;efficient preference joins;(b) gracefully handling contextual attributes that are expensive …,Proceedings of the VLDB Endowment,2010,30,3
Structuring storage based on latch-free B-trees,*,A request to modify an object in storage that is associated with one or more computingdevices may be obtained; the storage organized based on a latch-free B-tree structure. Astorage address of the object may be determined; based on accessing a mapping table thatincludes map indicators mapping logical object identifiers to physical storage addresses. Aprepending of a first delta record to a prior object state of the object may be initiated; the firstdelta record indicating an object modification associated with the obtained request.Installation of a first state change associated with the object modification may be initiated viaa first atomic operation on a mapping table entry that indicates the prior object state of theobject. For example; the latch-free B-tree structure may include a B-tree like index structureover records as the objects; and logical page identifiers as the logical object identifiers.,*,2015,29,4
High Performance Transactions in Deuteronomy,Justin Levandoski; David Lomet; Sudipta Sengupta; Ryan Stutsman; Rui Wang,Abstract The Deuteronomy architecture provides a clean separation of transactionfunctionality (performed in a transaction component; or TC) from data managementfunctionality (performed in a data component; or DC). In prior work we implemented both aTC and DC that achieved modest performance. We recently built a high performance DC(the Bw-tree key value store) that achieves very high performance on modern hardware andis currently shipping as an indexing and storage layer in a number of Microsoft systems. Thisnew DC executes operations more than 100× faster than the TC we previously implemented.This paper describes how we achieved two orders of magnitude speedup in TCperformance and shows that a full Deuteronomy stack can achieve very high performanceoverall. Importantly; the resulting full stack is a system that caches data residing on …,CIDR,2015,25,12
LLAMA: A cache/storage subsystem for modern hardware,Justin Levandoski; David Lomet; Sudipta Sengupta,Abstract LLAMA is a subsystem designed for new hardware environments that supports anAPI for page-oriented access methods; providing both cache and storage management.Caching (CL) and storage (SL) layers use a common mapping table that separates a page'slogical and physical location. CL supports data updates and management updates (eg; forindex re-organization) via latch-free compare-and-swap atomic state changes on itsmapping table. SL uses the same mapping table to cope with page location changesproduced by log structuring on every page flush. To demonstrate LLAMA's suitability; wetailored our latch-free Bw-tree implementation to use LLAMA. The Bw-tree is a B-tree styleindex. Layered on LLAMA; it has higher performance and scalability using real workloadscompared with BerkeleyDB's B-tree; which is known for good performance.,Proceedings of the VLDB Endowment,2013,25,18
Personalization; socialization; and recommendations in location-based services 2.0,Mohamed Mokbel; Jie Bao; Ahmed Eldawy; Justin Levandoski; Mohamed Sarwat,Abstract The wide increase of web-based user-generated content and social networkingtechnologies have led to the wide popularity of the term Web 2.0; in which the World WideWeb has moved from being an interface for information retrieval to an interactive medium.Following Web 2.0; a flurry of 2.0 s have appeared including Library 2.0; Travel 2.0;Government 2.0; and even Revolution 2.0. In this paper; we present our vision of Location-based Services (LBS) 2.0; where users generate significant location-based content; andhave meaningful location-aware interactions with both the system and other users. Weaddress three main aspects of LBS 2.0; namely; personalization; socialization; andrecommendations. In terms of personalization; LBS 2.0 looks beyond the use of rigid nearest-neighbor queries to more personalized best-neighbor queries where user preferences …,5th international VLDB workshop on personalized access; profile management and context awareness in databases (PersDB). VLDB,2011,25,10
Preference query evaluation over expensive attributes,Justin J Levandoski; Mohamed F Mokbel; Mohamed E Khalefa,Abstract Most database systems allow query processing over attributes that are derived atquery runtime (eg; user-defined functions and remote data calls to web services); makingthem expensive to compute relative to relational data stored in a heap or index. In addition;core support for efficient preference query processing has become an important objective indatabase systems. This paper addresses an important problem at the intersection of thesetwo query processing objectives: efficient preference query evaluation involving expensiveattributes. We explore an efficient framework for processing skyline and multi-objectivequeries in a database when the data involves a mix of" cheap" and" expensive" attributes.Our solution involves a three-phase approach that evaluates a correct final preferenceanswer while aiming to minimizing the number of expensive attributes computations …,Proceedings of the 19th ACM international conference on Information and knowledge management,2010,24,4
Prefjoin: An efficient preference-aware join operator,Mohamed E Khalefa; Mohamed F Mokbel; Justin J Levandoski,Preference queries are essential to a wide spectrum of applications including multi-criteriadecision-making tools and personalized databases. Unfortunately; most of the evaluationtechniques for preference queries assume that the set of preferred attributes are stored inonly one relation; waiving on a wide set of queries that include preference computationsover multiple relations. This paper presents PrefJoin; an efficient preference-aware joinquery operator; designed specifically to deal with preference queries over multiple relations.PrefJoin consists of four main phases: Local Pruning; Data Preparation; Joining; andRefining that filter out; from each input relation; those tuples that are guaranteed not to be inthe final preference set; associate meta data with each non-filtered tuple that will be used tooptimize the execution of the next phases; produce a subset of join result that are relevant …,Data Engineering (ICDE); 2011 IEEE 27th International Conference on,2011,22,23
To lock; swap; or elide: on the interplay of hardware transactional memory and lock-free indexing,Darko Makreshanski; Justin Levandoski; Ryan Stutsman,Abstract The release of hardware transactional memory (HTM) in commodity CPUs hasmajor implications on the design and implementation of main-memory databases; especiallyon the architecture of high-performance lock-free indexing methods at the core of several ofthese systems. This paper studies the interplay of HTM and lock-free indexing methods.First; we evaluate whether HTM will obviate the need for crafty lock-free index designs byintegrating it in a traditional B-tree architecture. HTM performs well for simple data sets withsmall fixed-length keys and payloads; but its benefits disappear for more complex scenarios(eg; larger variable-length keys and payloads); making it unattractive as a general solutionfor achieving high performance. Second; we explore fundamental differences between HTM-based and lock-free B-tree designs. While lock-freedom entails design complexity and …,Proceedings of the VLDB Endowment,2015,19,22
Transaction support for distributed data,*,A distributed system with transaction support may have a transaction component and one ormore data components. The transaction component may manage a transaction using a logsequence number for each operation; and then transmit operations to one or more datacomponents with log sequence numbers. The data components may perform the dataoperations in an idempotent manner and return a reply. The transaction component maythen write the operation; its log sequence number; and information from the reply messageto its log. The transaction component is able to commit a transaction; as well as retry or undoportions of a transaction; by using the information stored on its log. This may be possibleeven when a single transaction uses multiple data components; which may be located ondifferent devices or manage separate and independent data sources.,*,2014,13,22
Flexible and extensible preference evaluation in database systems,Justin J Levandoski; Ahmed Eldawy; Mohamed F Mokbel; Mohamed E Khalefa,Abstract Personalized database systems give users answers tailored to their personalpreferences. While numerous preference evaluation methods for databases have beenproposed (eg; skyline; top-k; k-dominance; k-frequency); the implementation of thesemethods at the core of a database system is a double-edged sword. Core implementationprovides efficient query processing for arbitrary database queries; however; this approach isnot practical since each existing (and future) preference method requires implementationwithin the database engine. To solve this problem; this article introduces FlexPref; aframework for extensible preference evaluation in database systems. FlexPref; implementedin the query processor; aims to support a wide array of preference evaluation methods in asingle extensible code base. Integration with FlexPref is simple; involving the registration …,ACM Transactions on Database Systems (TODS),2013,12,3
Permjoin: An efficient algorithm for producing early results in multi-join query plans,Justin J Levandoski; Mohamed E Khalefa; Mohamed F Mokbel,This paper introduces an efficient algorithm for Producing Early Results in Multi-join queryplans (PermJoin; for short). While most previous research focuses only on the case of asingle join operator; PermJoin takes a radical step by addressing query plans with multiplejoin operators. PermJoin is optimized to maximize the early overall throughput and to adaptto fluctuations in data arrival rates. PermJoin is a non-blocking operator that is capable ofproducing join results even if one or more data sources are blocked due to slow or burstynetwork behavior. Furthermore; PermJoin distinguishes itself from all previous techniques asit:(1) employs a new flushing policy to write in-memory data to disk; once memory allotmentis exhausted; in a way that helps increase the probability of producing early resultthroughput in multi-join queries; and (2) employs a novel state manager module that …,Data Engineering; 2008. ICDE 2008. IEEE 24th International Conference on,2008,12,10
Multi-version range concurrency control in Deuteronomy,Justin Levandoski; David Lomet; Sudipta Sengupta; Ryan Stutsman; Rui Wang,Abstract The Deuteronomy transactional key value store executes millions of serializabletransactions/second by exploiting multi-version timestamp order concurrency control.However; it has not supported range operations; only individual record operations (eg;create; read; update; delete). In this paper; we enhance our multi-version timestamp ordertechnique to handle range concurrency and prevent phantoms. Importantly; we maintainhigh performance while respecting the clean separation of duties required by Deuteronomy;where a transaction component performs purely logical concurrency control (including rangesupport); while a data component performs data storage and management duties. Like therest of the Deuteronomy stack; our range technique manages concurrency information in alatch-free manner. With our range enhancement; Deuteronomy can reach scan speeds of …,Proceedings of the VLDB Endowment,2015,10,22
Schema-agnostic indexing with Azure DocumentDB,Dharma Shukla; Shireesh Thota; Karthik Raman; Madhan Gajendran; Ankur Shah; Sergii Ziuzin; Krishnan Sundaram; Miguel Gonzalez Guajardo; Anna Wawrzyniak; Samer Boshra; Renato Ferreira; Mohamed Nassar; Michael Koltachev; Ji Huang; Sudipta Sengupta; Justin Levandoski; David Lomet,Abstract Azure DocumentDB is Microsoft's multi-tenant distributed database service formanaging JSON documents at Internet scale. DocumentDB is now generally available toAzure developers. In this paper; we describe the DocumentDB indexing subsystem.DocumentDB indexing enables automatic indexing of documents without requiring aschema or secondary indices. Uniquely; DocumentDB provides real-time consistent queriesin the face of very high rates of document updates. As a multi-tenant service; DocumentDB isdesigned to operate within extremely frugal resource budgets while providing predictableperformance and robust resource isolation to its tenants. This paper describes theDocumentDB capabilities; including document representation; query language; documentindexing approach; core index support; and early production experiences.,Proceedings of the VLDB Endowment,2015,9,22
Indexing on modern hardware: hekaton and beyond,Justin Levandoski; David Lomet; Sudipta Sengupta; Adrian Birka; Cristian Diaconu,Abstract Recent OLTP support exploits new techniques; running on modern hardware; toachieve unprecedented performance compared with prior approaches. In SQL Server; theHekaton main-memory database engine embodies this new OLTP support. Hekaton usesthe Bw-tree to achieve its great indexing performance. The Bw-Tree is a latch-free B-treeindex that also exploits log-structured storage when used" beyond" Hekaton as a separatekey value store. It is designed from the ground up to address two hardware trends:(1) Multi-core and main memory hierarchy: the Bw-tree is completely latch-free; using an atomiccompare-and-swap instruction to install state changes on a" page address" mapping table; itperforms updates as" deltas" to avoid update-in-place. These improve performance byeliminating thread blocking while improving cache hit ratios.(2) Flash storage: the Bw-tree …,Proceedings of the 2014 ACM SIGMOD international conference on Management of data,2014,9,9
RecStore: an extensible and adaptive framework for online recommender queries inside the database engine,Justin J Levandoski; Mohamed Sarwat; Mohamed F Mokbel; Michael D Ekstrand,Abstract Most recommendation methods (eg; collaborative filtering) consist of (1) acomputationally intense offline phase that computes a recommender model based on users'opinions of items; and (2) an online phase consisting of SQL-based queries that use themodel (generated offline) to derive user preferences and provide recommendations forinteresting items. Current application usage trends require a completely onlinerecommender process; meaning the recommender model must update in real time as newopinions enter the system. To tackle this problem; we propose RecStore; a DBMS storageengine module capable of efficient online model maintenance. Externally; models managedby RecStore behave as relational tables; thus existing SQL-based recommendation queriesremain unchanged while gaining online model support. RecStore maintains internal …,Proceedings of the 15th International Conference on Extending Database Technology,2012,9,17
Latch-free; log-structured storage for multiple access methods,*,A data manager may include a data opaque interface configured to provide; to an arbitrarilyselected page-oriented access method; interface access to page data storage that includeslatch-free access to the page data storage. In another aspect; a swap operation may beinitiated; of a portion of a first page in cache layer storage to a location in secondary storage;based on initiating a prepending of a partial swap delta record to a page state associatedwith the first page; the partial swap delta record including a main memory address indicatinga storage location of a flush delta record that indicates a location in secondary storage of amissing part of the first page. In another aspect; a page manager may initiate a flushoperation of a first page in cache layer storage to a location in secondary storage; based onatomic operations with flush delta records.,*,2016,8,12
High performance transactions in database management systems,*,A transaction engine includes a multi-version concurrency control (MVCC) module thataccesses a latch-free hash table that includes respective hash table entries that includerespective buckets of respective bucket items. The bucket items represent respectiverecords; the respective bucket items each including a value indicating a temporal mostrecent read time of the item and a version list of descriptions that describe respectiveversions of the respective records; the MVCC module performing timestamp orderconcurrency control; using the latch-free hash table. Recovery log buffers may be used ascache storage for the transaction engine.,*,2014,8,10
RecBench: benchmarks for evaluating performance of recommender system architectures,Justin J Levandoski; Michael D Ekstrand; Michael J Ludwig; Ahmed Eldawy; Mohamed F Mokbel; John T Riedl,ABSTRACT Traditionally; recommender systems have been “hand-built”; implemented ascustom applications hard-wired to a particular recommendation task. Recently; the databasecommunity has begun exploring alternative DBMS-based recommender systemarchitectures; whereby a database both stores the recommender system data (eg; ratingsdata and the derived recommender models) and generates recommendations using SQLqueries. In this paper; we present a comprehensive experimental comparison of botharchitectures. We define a set of benchmark tasks based on the needs of a typicalrecommender-powered e-commerce site. We then evaluate the performance of the “hand-built” MultiLens recommender application against two DBMS-based implementations: anunmodified DBMS and RecStore; a DBMS modified to improve efficiency in incremental …,Proceedings of the VLDB Endowment,2011,8,4
High throughput data modifications using blind update operations,*,Users of electronic devices frequently need to access database systems to obtain various typesof information. Many different techniques have been devised for storage and retrieval of dataitems. For example; some recent hardware platforms have exploited recent hardware developmentssuch as multi-core processors; multi-tiered memory hierarchies; and secondary storage devicessuch as flash; in an effort to provide higher performance … According to one generalaspect; a system may include an apparatus that includes a computer-readable storage mediumstoring executable instructions; the executable instructions including a page update managerthat includes an update acquisition module that obtains update requests that specify updatesfor a logical page associated with a key-value store. An update posting engine posts the updatesusing the obtained update requests; without accessing the logical page via a read …,*,2016,5,4
Context awareness in mobile systems,Mohamed Sarwat; Jie Bao; Chi-Yin Chow; Justin Levandoski; Amr Magdy; Mohamed F Mokbel,Abstract Context represents any information that can be used to characterize the situation ofan entity. An entity is a person; place; or object that is considered relevant to the interactionbetween a user and an application; including the user and application themselves. Theubiquity of mobile devices (eg; smartphones; GPS devices) has in part motivated the use ofcontextual information in modern mobile applications. From one perspective; context inmobile systems can fall into three categories:(a) user context that includes the personalattributes of the user; eg; spatial location and budget;(b) point-of-interest (POI) context; eg;restaurant location; operating time; and rating; and (c) environmental context; eg; weatherand road conditions. Incorporating such context in applications provided to mobile usersmay significantly enhance the quality of service in terms of finding more related answers …,*,2015,5,10
The BW-Tree: A Latch-Free B-Tree for Log-Structured Flash Storage.,Justin J Levandoski; Sudipta Sengupta; WA Redmond,Abstract The Bw-Tree is a high performance latch-free B-tree index that exploits log-structured storage. Its design addresses two emerging hardware platform trends.(1) Multi-core and main memory hierarchy: the Bw-tree is completely latch-free; it performs statechanges (eg; record updates; splits) as “deltas” prepended to prior state; installing new statevia an atomic compare-and-swap instruction on an indirection page address mapping table.This improves performance by avoiding thread latch blocking while also improving multi-core cache behavior.(2) Flash storage: the Bw-tree organizes storage in a log-structuredmanner (using” delta” records) on flash to exploit fast sequential writes and mitigate adverseperformance impact of random writes. This also reduces write amplification and extendsdevice lifetime. This article provides an overview of the Bw-tree architecture and its …,IEEE Data Eng. Bull.,2013,5,10
On Producing High and Early Result Throughput in Multijoin Query Plans,Justin K Levandoski; Mohamed E Khalefa; Mohamed F Mokbel,This paper introduces an efficient framework for producing high and early result throughputin multijoin query plans. While most previous research focuses on optimizing for casesinvolving a single join operator; this work takes a radical step by addressing query planswith multiple join operators. The proposed framework consists of two main methods; a flushalgorithm and operator state manager. The framework assumes a symmetric hash join; acommon method for producing early results; when processing incoming data. In this way;our methods can be applied to a group of previous join operators (optimized for single-joinqueries) when taking part in multijoin query plans. Specifically; our framework can beapplied by 1) employing a new flushing policy to write in-memory data to disk; once memoryallotment is exhausted; in a way that helps increase the probability of producing early …,IEEE Transactions on Knowledge and Data Engineering,2011,4,10
Modern main-memory database systems,Per-Åke Larson; Justin Levandoski,Abstract This tutorial provides an overview of recent developments in main-memorydatabase systems. With growing memory sizes and memory prices dropping by a factor of10 every 5 years; data having a" primary home" in memory is now a reality. Main-memorydatabases eschew many of the traditional architectural tenets of relational database systemsthat optimized for disk-resident data. Innovative approaches to fundamental issues such asconcurrency control and query processing are required to unleash the full performancepotential of main-memory databases. The tutorial is focused around design issues andarchitectural choices that must be made when building a high performance database systemoptimized for main-memory: data storage and indexing; concurrency control; durability andrecovery techniques; query processing and compilation; support for high availability; and …,Proceedings of the VLDB Endowment,2016,3,23
Towards context and preference-aware location-based database systems,Mohamed F Mokbel; Justin J Levandoski,Abstract The explosive growth of location-detection devices; wireless communications; andmobile databases has resulted in the realization of location-based services as commercialproducts and research prototypes. Unfortunately; current locationbased applications (eg;store finders) are rigid as they are completely isolated from various concepts of user“preferences” and/or “context”. Such rigidness results in nonsuitable services (eg; avegetarian user may get a restaurant with non-vegetarian menu). In this paper; we introducethe system architecture of a Context and Preference-Aware Location-based DatabaseServer (CareDB; for short); currently under development at University of Minnesota; thatdelivers personalized services to its customers based on the surrounding context. CareDBgoes beyond the traditional scheme of “one size fits all” of existing location-aware …,In Proceedings of the ACM International Workshop on Data Engineering for Wireless and Mobile Access,2009,3,10
Main Memory Database Systems,Frans Faerber; Alfons Kemper; Per-Åke Larson; Justin Levandoski; Thomas Neumann; Andrew Pavlo,Abstract This article provides an overview of recent developments in mainmemory databasesystems. With growing memory sizes and memory prices dropping by a factor of 10 every 5years; data having a “primary home” in memory is now a reality. Main-memory databaseseschew many of the traditional architectural pillars of relational database systems thatoptimized for disk-resident data. The result of these memory-optimized designs are systemsthat feature several innovative approaches to fundamental issues (eg; concurrency control;query processing) that achieve orders of magnitude performance improvements overtraditional designs. Our survey covers five main issues and architectural choices that need tobe made when building a high performance main-memory optimized database: dataorganization and storage; indexing; concurrency control; durability and recovery …,Foundations and Trends® in Databases,2017,2,8
Ranking and new database architectures,Justin Levandoski,Abstract Database platform support for efficient ranking can have positive performanceimplications for a number of rank-aware applications; including data exploration; socialnetwork analysis; and keyword search. This talk highlights two pieces of work where rankingappears in the research area of database architectures for new hardware. First; we highlightthe Bw-tree; a new high-performance B+-tree supporting sorted key-sequential access. TheBw-tree is re-architected to run efficiently on new hardware: its in-memory operations arecompletely latch-free; removing blocking behavior while also improving multi-core cachebehavior; while its storage layer implements a novel log-structured flash storage layer forthat exploits fast sequential writes and mitigates adverse performance impact of randomwrites. Second; we highlight a new classification technique for identifying âĂIJcoldâĂİ …,Proceedings of the 7th International Workshop on Ranking in Databases,2013,2,10
The CareDB Context and Preference-Aware Database System,J Levandoski; MM Khalefa; Mohamed F Mokbel,Abstract This paper provides an overview of the CareDB context and preference-awaredatabase system. CareDB provides efficient and scalable personalized query answers tousers based on their preferences and current surrounding context. Traditional relationaldatabase system employ rigid" all or nothing" semantics when answering queries. CareDBmoves beyond such rigidness by providing support for" preference-aware" query processingmethods. Specifically; CareDB supports a plethora of multi-objective preference methodscapable of finding the" best alternatives" according to users' given preference objectives.This paper first describes the architecture of the CareDB system. It then describes the detailsfor three of CareDB's novel query processing characteristics:(1) a generic and extensiblepreference-aware query processing engine;(2) a framework to gracefully handle …,Proceedings of the International Workshop on Personalized Access; Profile Management; and Context Awareness in Databases. PersDB; Seattle; 2011,2011,2,4
READY: Completeness is in the Eye of the Beholder.,Badrish Chandramouli; Johannes Gehrke; Jonathan Goldstein; Donald Kossmann; Justin J Levandoski; Renato Marroquin; Wenlei Xie,ABSTRACT Modern database systems support one set of integrity constraints per database.Imagine you could specify multiple sets of integrity constraints per database; one for eachtype of application. This paper argues why this might be a good idea and introduces asystem that implements this idea.,CIDR,2017,1,22
Classification of data in main memory database systems,*,Various technologies described herein pertain to classifying data in a main memorydatabase system. A record access log can include a sequence of record accessobservations logged over a time period from a beginning time to an end time. Each of therecord access observations can include a respective record ID and read timestamp. Therecord access log can be scanned in reverse from the end time towards the beginning time.Further; access frequency estimate data for records corresponding to record IDs read fromthe record access log can be calculated. The access frequency estimate data can includerespective upper bounds and respective lower bounds of access frequency estimates foreach of the records. Moreover; the records can be classified based on the respective upperbounds and the respective lower bounds of the access frequency estimates; such that K …,*,2016,1,23
ICE: Managing cold state for big data applications,Badrish Chandramouli; Justin Levandoski; Eli Cortez,The use of big data in a business revolves around a monitor-mine-manage (M3) loop: datais monitored in real-time; while mined insights are used to manage the business and derivevalue. While mining has traditionally been performed offline; recent years have seen anincreasing need to perform all phases of M3 in real-time. A stream processing engine (SPE)enables such a seamless M3 loop for applications such as targeted advertising;recommender systems; risk analysis; and call-center analytics. However; these M3applications require the SPE to maintain massive amounts of state in memory; leading toresource usage skew: memory is scarce and over-utilized; whereas CPU and I/O are under-utilized. In this paper; we propose a novel solution to scaling SPEs for memory-bound M3applications that leverages natural access skew in data-parallel subqueries; where a …,Data Engineering (ICDE); 2016 IEEE 32nd International Conference on,2016,1,22
Controlling atomic updates of indexes using hardware transactional memory,*,A current state of one or more entries in a mapping table that are associated with latch-freeupdates of a data structure that uses indirection mapping tables is accessed. Atransformation of the current state of the one or more entries in the mapping table to atransformed state of the entries in the mapping table; is controlled. The controlling includesinitiating an atomic multi-word compare-and-swap (MWCAS) operation on a plurality ofwords using a hardware transactional memory (HTM) resident in a device processor; andthe MWCAS operation is performed using hardware primitive operations of the HTM; via thedevice processor. A transformation of a current state of the data structure to an updated stateof the data structure; is controlled; via the transformation of the current state of the one ormore entries in the mapping table to the transformed state of the entries in the mapping …,*,2015,1,6
Transactional access to records on secondary storage in an in-memory database,*,Various technologies described herein pertain to accessing records of an in-memorydatabase. A memory can include a primary storage and a data store can include asecondary storage. The primary storage includes a first subset of the records of thedatabase; and the secondary storage includes a second subset of the records of thedatabase. Moreover; the memory includes an update memo that includes timestamp notices.The timestamp notices specify statuses of records of the database having updates that spanthe primary storage and the secondary storage. The memory further includes a databasemanagement system that is executable by a processor. The database management systemprocesses a transaction. Further; the database management system includes a storageinterface component that accesses a record of the database for the transaction based on …,*,2014,1,23
The anatomy of Sindbad: a location-aware social networking system,Mohamed Sarwat; Jie Bao; Ahmed Eldawy; Justin J Levandoski; Amr Magdy; Mohamed F Mokbel,Abstract This paper features Sindbad; a location-based social networking system. Sindbadsupports three new services beyond traditional social networking services; namely; location-aware news feed; location-aware recommender; and location-aware ranking. These newservices not only consider social relevance for its users; but they also consider spatialrelevance. Since location-aware social networking systems have to deal with large numberof users; large number of messages; and user mobility; efficiency and scalability areimportant issues. To this end; Sindbad encapsulates its three main services inside the queryprocessing engine of PostgreSQL. Usage and internal functionality of Sindbad areimplemented with PostgreSQL and Google Maps API. Both a web and android phoneapplications are built on top of Sindbad for better interaction with the system users.,Proceedings of the 5th ACM SIGSPATIAL International Workshop on Location-Based Social Networks,2012,1,3
A demonstration of flexpref: Extensible preference evaluation inside the DBMS engine,Justin J Levandoski; Mohamed F Mokbel; Mohamed E Khalefa; Venkateshwar R Korukanti,Abstract This demonstration presents FlexPref; a framework implemented inside the DBMSquery processor that enables efficient and extensible preference query processing. FlexPrefprovides query processing support inside the database engine for a wide-array ofpreference evaluation methods (eg; skyline; top-k; k-dominance; k-frequency) in a singleextensible code base. Integration with FlexPref is simple; involving the registration of onlythree functions that capture the essence of the preference method. Once integrated; thepreference method" lives" at the core of the database; enabling the efficient execution ofpreference queries involving common database operations (eg; selection; join).Functionality of FlexPref; implemented inside PostgreSQL; is demonstrated through theimplementation and use of several state-of-the-art preference methods in a real …,Proceedings of the 2010 ACM SIGMOD International Conference on Management of data,2010,1,4
Data Management on New Hardware: 7th International Workshop on Accelerating Data Analysis and Data Management Systems Using Modern Processor and Stor...,Spyros Blanas; Rajesh Bordawekar; Justin Levandoski; Andrew Pavlo; Tirthankar Lahiri,*,*,2017,*
Log-structured storage for data access,*,A data manager may include a data opaque interface configured to provide; to an arbitrarilyselected page-oriented access method; interface access to page data storage that includeslatch-free access to the page data storage. In another aspect; a swap operation may beinitiated; of a portion of a first page in cache layer storage to a location in secondary storage;based on initiating a prepending of a partial swap delta record to a page state associatedwith the first page; the partial swap delta record including a main memory address indicatinga storage location of a flush delta record that indicates a location in secondary storage of amissing part of the first page. In another aspect; a page manager may initiate a flushoperation of a first page in cache layer storage to a location in secondary storage; based onatomic operations with flush delta records.,*,2016,*,10
In Memory Data Management and Analysis,Arun Jagatheesan; Justin Levandoski; Thomas Neumann; Andrew Pavlo,Over the last 30 years; memory prices have been dropping by a factor of 10 every 5 years.The number of I/O operations per second (IOPS) in DRAM is far greater than other storagemedia such as hard disks and SSDs. DRAM is readily available in the market at better pricepoint in comparison to DRAM-alternatives. These trends make DRAM a better storage mediafor latency-sensitive data management applications. For example; mobile applicationsrequire low-latency responses to user requests. The “hot set” of large transactionalworkloads fit comfortably in memory. Many largescale web applications such as Facebookand Amazon manage most of their active data in main memory. With the emergence of sucha diverse pool of latency-sensitive applications coupled with dropping DRAM prices; it istimely to explore main-memory optimized data management platforms. In addition; almost …,*,2015,*,23
Transaction Processing Techniques for Modern Hardware and the Cloud.,Justin J Levandoski; Sudipta Sengupta; Ryan Stutsman; Rui Wang,Abstract The Deuteronomy architecture provides a clean separation of transactionfunctionality (performed in a transaction component; or TC) from data storage functionality(performed in a data component; or DC). For the past couple of years; we have beenrethinking the implementation of both the TC and DC in order for them to perform as well; orbetter than; current high-performance database systems. The result of this work so far hasbeen a high-performance DC (the Bw-tree key value store) that currently ships in severalMicrosoft systems (the Hekaton main-memory database; Azure DocumentDB; and Bing).More recently; we have been completing the performance story by redesigning the TC. Weare driven by two main design goals:(1) ensure high performance in various deploymentscenarios; regardless of whether the TC and DC are co-located or distributed and (2) take …,IEEE Data Eng. Bull.,2015,*,7
LARS*,Justin J Levandoski; Ahmed Eldawy; Mohamed F Mokbel,*,IEEE Transactions on Knowledge and Data Engineering,2014,*
Extensible preference evaluation in database systems,Justin Jon Levandoski,Abstract Personalized database systems give users answers tailored to their personalpreferences. While numerous preference evaluation methods for databases have beenproposed (eg; skyline; top-k; k dominance; k-frequency); the implementation of thesemethods at the core of a database system is a double-edged sword. Core implementationprovides efficient query processing for arbitrary database queries; however this approach isnot practical as each existing (and future) preference method requires a custom queryprocessor implementation. To solve this problem; this thesis proposes FlexPref; a frameworkfor extensible preference evaluation in database systems. FlexPref; implemented in thequery processor; aims to support a wide-array of preference evaluation methods in a singleextensible code base. Integration with FlexPref is simple; involving the registration of only …,*,2011,*,16
Data Management on New Hardware,Spyros Blanas; Rajesh Bordawekar; Tirthankar Lahiri; Justin Levandoski; Andrew Pavlo,*,*,*,*
