Aspect-oriented programming,Gregor Kiczales; John Lamping; Anurag Mendhekar; Chris Maeda; Cristina Lopes; Jean-Marc Loingtier; John Irwin,Abstract We have found many programming problems for which neither procedural norobject-oriented programming techniques are sufficient to clearly capture some of theimportant design decisions the program must implement. This forces the implementation ofthose design decisions to be scattered throughout the code; resulting in “tangled” code thatis excessively difficult to develop and maintain. We present an analysis of why certaindesign decisions have been so difficult to clearly capture in actual code. We call theproperties these decisions address aspects; and show that the reason they have been hardto capture is that they cross-cut the system's basic functionality. We present the basis for anew programming technique; called aspect-oriented programming; that makes it possible toclearly express programs involving such aspects; including appropriate isolation …,European conference on object-oriented programming,1997,9795
An overview of AspectJ,Gregor Kiczales; Erik Hilsdale; Jim Hugunin; Mik Kersten; Jeffrey Palm; William G Griswold,Abstract AspectJ™ is a simple and practical aspect-oriented extension to Java.. With just afew new constructs; AspectJ provides support for modular implementation of a range ofcrosscutting concerns. In AspectJ's dynamic join point model; join points are well-definedpoints in the execution of the program; pointcuts are collections of join points; advice arespecial method-like constructs that can be attached to pointcuts; and aspects are modularunits of crosscutting implementation; comprising pointcuts; advice; and ordinary Javamember declarations. AspectJ code is compiled into standard Java bytecode. Simpleextensions to existing Java development environments make it possible to browse thecrosscutting structure of aspects in the same kind of way as one browses the inheritancestructure of classes. Several examples show that AspectJ is powerful; and that programs …,European Conference on Object-Oriented Programming,2001,4028
The art of the metaobject protocol,Gregor Kiczales; Jim Des Rivieres; Daniel Gureasko Bobrow,The authors introduce this new approach to programming language design; describe itsevolution and design principles; and present a formal specification of a metaobject protocolfor CLOS. The CLOS metaobject protocol is an elegant; high-performance extension to theCommonLisp Object System. The authors; who developed the metaobject protocol and whowere among the group that developed CLOS; introduce this new approach to programminglanguage design; describe its evolution and design principles; and present a formalspecification of a metaobject protocol for CLOS. Kiczales; des Rivi  res; and Bobrow showthat the" art of metaobject protocol design" lies in creating a synthetic combination of object-oriented and reflective techniques that can be applied under existing software engineeringconsiderations to yield a new approach to programming language design that meets a …,*,1991,1966
Design pattern implementation in Java and AspectJ,Jan Hannemann; Gregor Kiczales,Abstract AspectJ implementations of the GoF design patterns show modularityimprovements in 17 of 23 cases. These improvements are manifested in terms of better codelocality; reusability; composability; and (un) pluggability. The degree of improvement inimplementation modularity varies; with the greatest improvement coming when the patternsolution structure involves crosscutting of some form; including one object playing multipleroles; many objects playing one role; or an object playing roles in multiple pattern instances.,ACM Sigplan Notices,2002,872
Getting started with AspectJ,Gregor Kiczales; Erik Hilsdale; Jim Hugunin; Mik Kersten; Jeffrey Palm; William Griswold,C oncern about the risk of adopting new technology causes many organizations to bereluctant to do so. But simply waiting can lead to rushing to adopt the technology later; whichis itself risky. Instead; this article presents a staged approach based on identifying two broadcategories of aspects: development aspects facilitate tasks such as debugging; testing; andperformance tuning of applications; production aspects implement functionality intended tobe included in shipping applications. These categories are informal; and this ordering is notthe only way to adopt AspectJ. Some developers will want to use a production aspect rightaway; but experience with current AspectJ users has shown this ordering allows developersto derive benefits from AOP technology quickly; while also minimizing risk.,Communications of the ACM,2001,808
Common lisp object system specification,Daniel G Bobrow; Linda G DeMichiel; Richard P Gabriel; Sonya E Keene; Gregor Kiczales; David A Moon,Authors: Daniel G. Bobrow; Linda G. DeMichiel; Richard P. Gabriel; Sonya E. Keene; GregorKiczales; and David A. Moon … Draft Dated: June 15; 1988 All Rights Reserved … The distributionand publication of this document are not restricted. In order to preserve the integrity of thespecification; any publication or distribution must reproduce this document in its entirety; preserveits formatting; and include this title page … For information about obtaining the sources for thisdocument; send an Internet message to common-lisp-object-system-specification-request@sail.stanford.edu … The authors wish to thank Patrick Dussud; Kenneth Kahn; Jim Kempf; LarryMasinter; Mark Stefik; Daniel L. Weinreb; and Jon L White for their contributions to thisdocument … At the XJJ13 meeting on June 15; 1988; the following motion was adopted …"The X3J13 Committee hereby accepts chapters 1 and 2 of the Common Lisp Object …,ACM Sigplan Notices,1988,693
D: A language framework for distributed programming,Cristina Videira Lopes; Gregor Kiczales,Abstract Two of the most important issues in distributed systems are the synchronization ofconcurrent threads and the application-level data transfers between execution spaces. Atthe design level; addressing these issues typically requires analyzing the components undera different perspective than is required to analyze the functionality. Very often; it alsoinvolves analyzing several components at the same time; because of the way those twoissues cross-cut the units of functionality. At the implementation level; existing programminglanguages fail to provide adequate support for programming in terms of these different andcross-cutting perspectives. The result is that the programming of synchronization and remotedata transfers ends up being tangled throughout the components code in more or lessarbitrary ways. This thesis presents a language framework called D that untangles the …,*,1997,429
CommonLoops: Merging Lisp and object-oriented programming,Daniel G Bobrow; Kenneth Kahn; Gregor Kiczales; Larry Masinter; Mark Stefik; Frank Zdybel,Abstract CommonLoops blends object-oriented programming smoothly and tightly with theprocedure-oriented design of Lisp. Functions and methods are combined in a more generalabstraction. Message passing is invoked via normal Lisp function call. Methods are viewedas partial descriptions of procedures. Lisp data types are integrated with object classes. Withthese integrations; it is easy to incrementally move a program between the procedure andobject-oriented styles. One of the most important properties of CommonLoops is itsextensive use of meta-objects. We discuss three kinds of meta-objects: objects for classes;objects for methods; and objects for discriminators. We argue that these meta-objects makepractical both efficient implementation and experimentation with new ideas for object-oriented programming. CommonLoops' small kernel is powerful enough to implement the …,ACM Sigplan Notices,1986,420
Aspect-oriented programming and modular reasoning,Gregor Kiczales; Mira Mezini,Abstract Aspects cut new interfaces through the primary decomposition of a system. Thisimplies that in the presence of aspects; the complete interface of a module can only bedetermined once the complete configuration of modules in the system is known. While thismay seem anti-modular; it is an inherent property of crosscutting concerns; and using aspect-oriented programming enables modular reasoning in the presence of such concerns.,Proceedings of the 27th international conference on Software engineering,2005,390
Discussing aspects of AOP,Tzilla Elrad; Mehmet Aksit; Gregor Kiczales; Karl Lieberherr; Harold Ossher,34 October 2001/Vol. 44; No. 10 COMMUNICATIONS OF THE ACM goal of AOP is to makedesigns and code more modular; meaning the concerns are localized rather than scatteredand have well-defined interfaces with the rest of the system. This provides us with the usualbenefits of modularity; including making it possible to reason about different concerns inrelative isolation; making them (un) pluggable; amenable to separate development; and soforth.,Communications of the ACM,2001,359
Beyond the black box: Open implementation,Gregor Kiczales,Encapsulation; informally known as black-box abstraction; is a widely known and acceptedprinciple. It is a basic tenet of software design; underlying approaches to portability andreuse. However; many practitioners find themselves violating it in order to achieveperformance requirements in a practical manner. The gap between theory and practice mustbe filled. Open implementation is a controversial new approach that claims to do just that.The paper provides some ideas to spark further debate on black-box abstraction.,IEEE software,1996,304
A semantics for advice and dynamic join points in aspect-oriented programming,Mitchell Wand; Gregor Kiczales; Christopher Dutchyn,Abstract A characteristic of aspect-oriented programming; as embodied in Aspect J; is theuse of advice and point cuts to define behavior that crosscuts the structure of the rest of thecode. The events during execution at which advice may execute are called join points. Apointcut is a set of join points. An advice is an action to be taken at the join points in aparticular pointcut. In this model of aspect-oriented programming; join points are dynamic inthat they refer to events during the flow of execution of the program. We give a denotationalsemantics for a minilanguage that embodies the key features of dynamic join points;pointcuts; and advice. This is the first semantics for aspect-oriented programming thathandles dynamic join points and recursive procedures. It is intended as a baselinesemantics against which future correctness results may be measured.,ACM Transactions on Programming Languages and Systems (TOPLAS),2004,299
Using AspectC to improve the modularity of path-specific customization in operating system code,Yvonne Coady; Gregor Kiczales; Mike Feeley; Greg Smolyn,Abstract Layered architecture in operating system code is often compromised by executionpath-specific customizations such as prefetching; page replacement and schedulingstrategies. Path-specific customizations are difficult to modularize in a layered architecturebecause they involve dynamic context passing and layer violations. Effectively they arevertically integrated slices through the layers. An initial experiment using an aspect-orientedprogramming language to refactor prefetching in the FreeBSD operating system kernalshows significant benefits; including easy (un) pluggability of prefetching modes;independent development of prefetching modes; and overall improved comprehensibility.,ACM SIGSOFT Software Engineering Notes,2001,273
Modeling crosscutting in aspect-oriented mechanisms,Hidehiko Masuhara; Gregor Kiczales,Abstract Modeling four aspect-oriented programming mechanisms shows the way in whicheach supports modular crosscutting. Comparing the models produces a clear three partcharacterization of what is required to support crosscutting structure: a common frame ofreference that two (or more) programs can use to connect with each other and each providetheir semantic contribution.,European Conference on Object-Oriented Programming,2003,268
A compilation and optimization model for aspect-oriented programs,Hidehiko Masuhara; Gregor Kiczales; Chris Dutchyn,Abstract This paper presents a semantics-based compilation model for an aspect-orientedprogramming language based on its operational semantics. Using partial evaluation; themodel can explain several issues in compilation processes; including how to find places inprogram text to insert aspect code and how to remove unnecessary run-time checks. It alsoillustrates optimization of calling-context sensitive pointcuts (cflow); implemented in realcompilers.,International Conference on Compiler Construction,2003,211
Overcoming the prevalent decomposition in legacy code,Jan Hannemann; Gregor Kiczales,The potential benefits of advanced separation of concerns (ASOC) techniques are wellknown and many programmers find the idea of using them appealing. For new softwareengineering projects these modularization mechanisms offer guidelines of how to structurethe system modules. But how can legacy systems profit from them? Code related toconcerns not represented in the current modularization has to be carefully identified andextracted while preserving system integrity.,Workshop on Advanced Separation of Concerns,2001,211
Open implementation design guidelines,Gregor Kiczales; John Lamping; Christina Videira Lopes; Chris Maeda; Anurag Mendhekar; Gail Murphy,ABSTRACT Designing reusable software modules can be extremely difficult. The designmust be balanced between being general enough to address the needs of a wide range ofclients and being focused enough to truly satisfy the requirements of each specific client.One area where it can be particularly difficult to strike this balance is in the implementationstrategy of the module. The problem is that generalpurpose implementation strategies; tunedfor a wide range of clients; aren't necessarily optimal for each specific client-this is especiallyan issue for modules that are intended to be reusable and yet provide high-performance. Anexamination of existing software systems shows that an increasingly important technique forhandling this problem is to design the module's interface in such a way that the client canassist or participate in the selection of the module's implementation strategy. We call this …,Proceedings of the 19th international conference on Software engineering,1997,165
Back to the future: a retroactive study of aspect evolution in operating system code,Yvonne Coady; Gregor Kiczales,Abstract The FreeBSD operating system more than doubled in size between version 2 andversion 4. Many changes to primary modularity are easy to spot at a high-leveL For example;new device drivers account for 38% of the growth. Not surprisingly; changes to crosscuttingconcerns are more difficult to track. In order to better understand how an aspect-orientedimplementation would have fared during this evolution; we introduced several aspects toversion 2 code; and then rolled them forward into their subsequent incarnations in versions3 and 4 respectively. This paper describes the impact evolution had on these concerns; andprovides a comparative analysis of the changes required to evolve the tangled versusaspect-oriented implementations. Our results show that for the concerns we chose; theaspect-oriented implementation facilitated evolution in four key ways:(1) changes were …,Proceedings of the 2nd international conference on Aspect-oriented software development,2003,160
Towards a new model of abstraction in software engineering,Gregor Kiczales,Existing abstraction techniques lead to implementations which overly constrain their users.This happens because these techniques force the implementor to make all the decisionsabout how to implement the abstraction including some which would better be made by theuser. The author has developed a new model of abstraction; which he calls the two-viewapproach; the first view is the traditional one; it provides the functionality of the abstraction;the second view allows the user to participate in some implementation decisions. Thisapproach promises to be general enough to handle a wide range of applications.,Object Orientation in Operating Systems; 1991. Proceedings.; 1991 International Workshop on,1991,153
Separation of concerns with procedures; annotations; advice and pointcuts,Gregor Kiczales; Mira Mezini,Abstract There are numerous mechanisms for separation of concerns at the source codelevel. Three mechanisms that are the focus of recent attention–metadata annotations;pointcuts and advice–can be modeled together with good old-fashioned procedures asproviding different kinds of bindings: procedure calls bind program points to operations;annotations bind attributes to program points; pointcuts bind sets of points to variousdescriptions of those sets; named pointcuts bind attributes to sets of points; and advice bindthe implementation of an operation to sets of points. This model clarifies how themechanisms work together to separate concerns; and yields guidelines to help developersuse the mechanisms in practice.,European Conference on Object-Oriented Programming,2005,128
Role-based refactoring of crosscutting concerns,Jan Hannemann; Gail C Murphy; Gregor Kiczales,Abstract Improving the structure of code can help developers work with a software systemmore efficiently and more consistently. To aid developers in re-structuring theimplementation of crosscutting concerns using aspect-oriented programming; we introducea role-based refactoring approach and tool. Crosscutting concerns (CCCs) are described interms of abstract roles; and instructions for refactoring crosscutting concerns are written interms of those roles. To apply a refactoring; a developer maps a subset of the roles toconcrete program elements; a tool can then help complete the mapping of roles to theexisting program. Refactoring instructors are then applied to manipulate and modularize theconcrete elements corresponding to the crosscutting concern. Evaluation of the prototypetool on a graphical editing framework suggests that the approach helps planning and …,Proceedings of the 4th international conference on Aspect-oriented software development,2005,127
Issues in the design and specification of class libraries,Gregor Kiczales; John Lamping,Abstract The design and specification of an extensible class library presents a difficultchallenge: because extensibility comes from allowing the user to override parts of theimplementation; more of the internal structure must be exposed to the user than in a typicalprocedure library. This raises issues in both how the library is designed and how itsspecification is written. Specification of the CLOS Metaobject Protocol required acombination of new and existing techniques to address these issues. We present thosetechniques; and discuss their relation to the underlying issues.,ACM SIGPLAN Notices,1992,121
Aspect-oriented programming of sparse matrix code,John Irwin; Jean-Marc Loingtier; John R Gilbert; Gregor Kiczales; John Lamping; Anurag Mendhekar; Tatiana Shpeisman,Abstract The expressiveness conferred by high-level and object-oriented languages is oftenimpaired by concerns that cross-cut a program's basic functionality. Execution time; datarepresentation; and numerical stability are three such concerns that are of great interest tonumerical analysts. Using aspect-oriented programming we have created AML; a system forsparse matrix computation that deals with these concerns separately and explicitly whilepreserving the expressiveness of the original functional language. The resulting codemaintains the efficiency of highly tuned low-level code; yet is ten times shorter.,International Conference on Computing in Object-Oriented Parallel Environments,1997,104
Towards a new model of abstraction in the engineering of software,Gregor Kiczales,This is an abridged version of a longer paper in preparation. The eventual goal is to present;to those outside of the reflection and meta-level architectures community; the intuitionssurrounding open implementations and the use of meta-level architectures; particularlymetaobject protocols; to achieve them. The view of abstraction on which softwareengineering is based does not support the reality of practice: it suggests that abstractionshide their implementation; whereas the evidence is that this is not generally possible. Thisdiscrepancy between our basic conceptual foundations and practice appears to be at theheart of a number of portability and complexity problems.,International Workshop on Reflection and Meta-Level Architecture,1992,101
Efficient method dispatch in PCL,Gregor Kiczales; Luis Rodriguez,Efficient implementation of CLOS is critical to its success as a standard. Some excellent workon Lisp Machines [3; 71 ha. 5 demonstrated clearly that CLOS can be implementedefficiently using special-purpose hardware. This paper describes a mechanism forimplementing CLOS method dispatch efficiently on stock hardware; in the current generationof Common Lisp implementations. This mechanism is implemented in the newest version ofPCL; a portable implementation of CLOS; and runs in more than ten Common Lisps. l PCL isdesigned to support development; not delivery of CLOS programs. The goal is to provide notjust high runtime performance; but also rapid interactive response during development ofCLOS programs. This work is based on a careful analysis of the behavior of existing CLOSprograms. The method dispatch mechanism differs from previously published work in …,Proceedings of the 1990 ACM conference on LISP and functional programming,1990,96
Jim des Rivi eres; and Daniel G. Bobrow. The Art of the Metaobject Protocol,Gregor Kiczales,*,*,1991,94
Recent Developments in AspectJ™,Cristina Videira Lopes; Gregor Kiczales,Abstract This paper summarizes the latest developments in AspectJ; a general-purposeaspect-oriented programming (AOP) extension to Java. Some examples of aspects areshown. Based on our experience in designing language extensions for AOP; we alsopresent a design space for AOP languages that may be of interest to the AOP community.,European Conference on Object-Oriented Programming,1998,91
Compilation semantics of aspect-oriented programs,Hidehiko Masuhara; Gregor Kiczales; Chris Dutchyn,ABSTRACT This paper presents a semantics-based compilation framework for an aspect-oriented programming language based on its operational semantics model. Using partialevaluation; the framework can explain several issues in compilation processes; includinghow to find places in program text to insert aspect code and how to remove unnecessary run-time checks. It also illustrates optimization of calling-context sensitive pointcuts (cflow);implemented in real compilers.,Foundations of Aspect-Oriented Languages Workshop,2002,89
Metaobject protocols: Why we want them and what else they can do,Gregor Kiczales; J Michael Ashley; Luis Rodriguez; Amin Vahdat; Daniel G Bobrow,Originally conceived as a neat idea that could help solve problems in the design andimplementation of CLOS; the metaobject protocol framework now appears to haveapplicability to a wide range of problems that come up in high-level languages. This chaptersketches this wider potential; by drawing an analogy to ordinary language design; bypresenting some early design principles; and by presenting an overview of three newmetaobject protcols we have designed that; respectively; control the semantics of Scheme;the compilation of Scheme; and the static parallelization of Scheme programs.,Object-Oriented Programming: The CLOS Perspective,1993,88
J. des Rivi eres; and DG Bobrow. The Art of the Metaobject Protocol,G Kiczales,*,*,1991,84
An architecture for an open compiler,John Lamping; Gregor Kiczales; Luis Rodriguez; Erik Ruf,Abstract This is a progress report on an experiment to build a compile-time metaobjectprotocol for Scheme. The compilation setting raises issues not present in runtime orientedMOP's; due to the complexity of the domain and the coupling between di erent parts. Toaddress the complexity of the domain; we have developed a structure that decomposes thedescription of an implementation into a combination of many small; partially interacting;choices. To address the coupling; we have developed a decision making process thatallows implementation choices to be made by a collaboration between user interventionsand default decision making.,Proceedings of the IMSA’92 Workshop on Reflection and Meta-level Architectures,1992,81
Addressing practical software development issues in AspectJ with a pointcut interface,Stephan Gudmundson; Gregor Kiczales,In this paper; we consider the problems of large-scale systems; team development; andmaintenance in the context of AspectJ [3] programming. To our knowledge; these topicshave not been discussed in any detail in other studies. We propose a new kind of interfacebetween aspects and base code; explain how it is used by aspects; and then discuss theexpected benefits in the context of realistic software development.,Advanced Separation of Concerns,2001,70
Structuring operating system aspects: using AOP to improve OS structure modularity,Yvonne Coady; Gregor Kiczales; Mike Feeley; Norm Hutchinson; Joon Suan Ong,A process generates a page fault by accessing an address in virtual memory (VM) that is notresident in physical memory. Page fault handling begins in the VM layer as a request for apage associated with a VM object. This request is then translated into a differentrepresentation—a block associated with a file—and processed by the file system (FFS).Finally; the request is passed to the disk system; where it is specified in terms of cylinders;heads; and sectors associated with the physical disk. The division of responsibilities amongthese layers is centered around the management of their respective representations of data.Applications associate an access behavior; typically normal or sequential; with each VMobject. Prefetching uses this declared behavior to plan which pages to prefetch; andallocates physical memory pages according to this plan. Allocating pages involves VM …,Communications of the ACM,2001,67
Aspect-oriented programming workshop report,Kim Mens; Cristina Lopes; Bedir Tekinerdogan; Gregor Kiczales,Abstract Whereas it is generally acknowledged that code tangling reduces the quality ofsoftware and that aspect-oriented programming (AOP) is a means of addressing thisproblem; there is—as yet—no clear definition or characterisation of AOP. Therefore; themain goal of the ECOOP'97 AOP workshop was to identify the “good questions” for exploringthe idea of AOP.,European Conference on Object-Oriented Programming,1997,67
High-level loop fusion,*,A processor is provided with a software program specifying an overall computation thatincludes operations. Each operation implies a set of subcomputations; without explicitlyspecifying a control structure for carrying out the subcomputations according to a particularsequencing. The operations include a first and a second operation; and the providedsoftware program further specifies how the first and second operations are combined in theoverall computation. For example; the first and second operations can each imply;respectively; a first and a second computational loop; the first loop including thesubcomputations of the first operation; the second loop including the subcomputations of thesecond operation. A description of possible sequencings of subcomputations of the first andsecond operations is provided; to be used in implementing the specified combination of …,*,1998,66
The fun has just begun,Gregor Kiczales,CiNii 国立情報学研究所 学術情報ナビゲータ[サイニィ]. メニュー 検索 …,Keynote talk at International Conference on Aspect-Oriented Software Development (AOSD 2003),2003,56
Avoiding confusion in metacircularity: The meta-helix,Shigeru Chiba; Gregor Kiczales; John Lamping,Abstract A system with a metaobject protocol (MOP) allows programmers to extend it andthen use the extended system as naturally as the original non-extended one. Suchmetaobject protocols often use a metacircular architecture to make the extensions easier towrite. Unfortunately; this use of metacircularity can lead to problems stemming from aconflation of the extended and non-extended functionalities. We present a new architecture;called the meta-helix; that preserves the advantages of metacircularity but also addressesthe problems with conflation.,International Symposium on Object Technologies for Advanced Software,1996,53
Operating systems: Why object-oriented?,Gregor Kiczales; John Lamping,The implementor of an operating system service faces inherent dilemmas in choosingimplementation strategies. A new approach to operating system design is emerging inwhich; rather than attempting to hide these dilemmas; they are exposed to clients; using ameta-protocols. Object-oriented programming techniques play an important role in enablingmeta-protocols to expose these dilemmas to the client in a principled and modular fashion.,Object Orientation in Operating Systems; 1993.; Proceedings of the Third International Workshop on,1993,45
Integrated development environment for aspect-oriented programming,*,A set of development tools is provided as part of an integrated development environment forsupporting aspect-oriented programming such that aspects may easily be defined forembodying functionality which cross-cuts main program functionality in such a way thataspects transparently force their behavior on the main program. The editor and debugger ofthe integrated development environment embody functionality for accommodating thistransparency.,*,2003,42
The need for customizable operating systems,Gregor Kiczales; John Lamping; Chris Maeda; David Keppel; D NcManee,Although modern operating systems provide powerful abstractions to application programs;they often fail to implement those abstractions in a way that provides applications programs;especially specialized application programs; with the best utilization of the physicalresources of the computer system. The operating system community has implicitlyrecognized this problem by providing mechanisms that give client programmers moreaccess to the physical substrate. The Mach External Pager allows clients to replace thepaging mechanism. More recent work allows client replacement of the paging policy as well.Scheduler activations share the job of thread management between clients and the system.Apertos allows these and other aspects of operating system implementation to be client-controlled. Object-oriented operating systems under development also provide these …,Workstation Operating Systems; 1993. Proceedings.; Fourth Workshop on,1993,39
The common Lisp object system metaobject kernel: a status report,Daniel G Bobrow; Gregor Kiczales,Abstract The metaobject kernel of the Common Lisp Object System (CLOS) comprises theclasses and methods that define and implement the behavior of the system. Since CLOS isan object-oriented program itself; exposing this kernel allows people to make usefulintegrated extensions to CLOS without changing the behavior of the system for ordinaryprograms; and without unwarranted loss of efficiency. This paper is organized around theclasses used to implement CLOS; describing reasons for the class organization chosen; andhow these classes participate in some protocols of the system.,Proceedings of the 1988 ACM conference on LISP and functional programming,1988,39
Open implementations and metaobject protocols,George Kiczales; Andreas Paepcke; Gregor Kiczales,*,*,1994,35
Aspect-oriented system monitoring and tracing,*,An aspect oriented system for implementing system monitoring and tracing is provided inwhich the monitoring and tracing functionality needs not be coded into the resources beingmonitored or traced. Rather; an aspect is provided which encapsulates themonitoring/tracing behavior. This behavior may easily and transparently be forced onto theresource by compiling the object class for the resource along with the monitoring/tracingaspect. When the monitoring/tracing is no longer needed; it is removed simply byrecompiling the resource object classes without the aspect.,*,2002,32
Open implementation analysis and design,Chris Maeda; Arthur Lee; Gail Murphy; Gregor Kiczales,ABSTRACT This paper describes a methodology for designing Open Implementations--software modules that can adapt or change their internals to accommodate the needs ofdifferent clients. Analysis techniques are used for capturing domain knowledge; userrequirements; and domain properties that influence the module's eventual implementation.Design techniques are used for determining and refining the interfaces by which clientscontrol the modules implementation strategies. The methodology has evolved over the pasttwo years in several pilot projects.,ACM SIGSOFT Software Engineering Notes,1997,30
Expressive programs through presentation extension,Andrew D Eisenberg; Gregor Kiczales,Abstract Most approaches to programming language extensibility have worked by pairingsyntactic extension with semantic extension. We present an approach that works through acombination of presentation extension and semantic extension. We also present anarchitecture for this approach; an Eclipse-based implementation targeting the Javaprogramming language; and examples that show how presentation extension; both with andwithout semantic extension; can make programs more expressive.,Proceedings of the 6th international conference on Aspect-oriented software development,2007,29
Fluid aop join point models,Terry Hon; Gregor Kiczales,Abstract Aspect-oriented programming (AOP) allows programmers to modularize theimplementation of crosscutting concerns. AspectJ and related languages achieve this with alinguistic approach; which enables different modules of the program to have a crosscuttingstructural relationship. In fluid AOP the development environment temporarily shifts aprogram to an alternative crosscutting module structure to enable specific editing orreasoning tasks. The program text can appear to have different crosscutting modularitiessimultaneously; as opposed to just having modules that crosscut each other. In thisdemonstration we show three possible fluid AOP designs; and compare their look and feelusing common examples.,Companion to the 21st ACM SIGPLAN symposium on Object-oriented programming systems; languages; and applications,2006,29
Aspect-oriented programming: The fun has just begun,Gregor Kiczales,We are on the verge of a fundamental change in software development. A central idea in allscience and engineering–the idea of working with a system through multiple perspectives orviews–is being enabled in software development in a powerful new way. In the past;software developers have had good technology for programming at different levels ofabstraction or; in other words; working with views at different levels of detail. But morerecently we have learned how to program through different crosscutting views. Theimmediate impact of this change has been to make it possible to modularize aspects of asystem's implementation that previously could not be modularized. This is leading tosoftware that is significantly more flexible; adaptable; and in all likelihood more robust thanwhat we could previously develop. But the fun has just begun. Within the framework of …,Workshop on New Visions for Software Design and Productivity: Research and Applications; Vanderbilt University; Nashville; Tennessee,2001,26
A new model of abstraction for operating system design,Gregor Kiczales; Marvin Theimer; Brent Welch,This historical basis of operating systems work has been the concept of black-boxabstraction. But this traditional notion of abstraction fails to support emerging practice in theoperating system community where; more and more; one seems to want to give clientsaccess to previously internal aspects of the implementation. The authors present a newmodel of abstraction; dual-abstraction; and show how to think about existing work under thatmodel. They also discuss some issues for future work that the new model makes evident.,Object Orientation in Operating Systems; 1992.; Proceedings of the Second International Workshop on,1992,26
Traces (a cut at the “make isn't generic” problem),Gregor Kiczales,Abstract Object-oriented techniques are a powerful tool for making a system end-programmer specializable. But; in cases where the system not only accepts objects as input;but also creates objects internally; specialization has been more difficult. This has beenreferred to as the “make isn't generic problem.” We present a new object-oriented languageconcept; called traces; that we have used successfully to support specialization in cases thatwere previously cumbersome. The concept of traces makes a fundamental separationbetween two kinds of inheritance in object-oriented languages: inheritance of defaultimplementation—an aspect of code sharing; and inheritance of specialization; a sometimesstatic; sometimes dynamic phenomena.,International Symposium on Object Technologies for Advanced Software,1993,24
A semantics for advice and dynamic join points in aspect-oriented programming,Mitchell Wand; Gregor Kiczales; Christopher Dutchyn,Abstract A characteristic of aspect-oriented programming; as embodied in AspectJ; is theuse of advice to incrementally modify the behavior of a program. An advice declarationspecifies an action to be taken whenever some condition arises during the execution of theprogram. The condition is specified by a formula called a pointcut designator or pcd. Theevents during execution at which advice may be triggered are called join points. In thismodel of aspect-oriented programming; join points are dynamic in that they refer to eventsduring the execution of the program. We give a denotational semantics for a minilanguagethat embodies the key features of dynamic join points; pointcut designators; and advice. Thisis the first semantics for aspect-oriented programming that handles dynamic join points andrecursive procedures. It is intended as a baseline semantics against which future …,SAIG,2001,22
Issues in the pragmatics of qualitative modeling: lessons learned from a xerographics project,Jeff Shrager; Daniel S Jordan; Thomas P Moran; Gregor Kiczales; Daniel M Russell,Abstract The photocopier is one of the most complex machines because xerographyinvolves many types of physical phenomena. ARIA is a qualitative simulation of xerographythat is intended to teach technicians the reasons behind some of the subtle problems thatoccur in copiers. This effort to model xerography exposed shortcomings in the techniques ofqualitative modeling as applied to complex systems and helped to better understand theimpact of certain basic modeling decisions.,Communications of the ACM,1987,21
Uniform support for modeling crosscutting structure,Maria Tkatchenko; Gregor Kiczales,Abstract We propose bottom-up support for modeling crosscutting structure in UML byadding a simple join point model to the meta-model. This supports built-in crosscuttingmodeling constructs such as sequence diagrams. It also facilitates adding new kinds ofcrosscutting modeling constructs such as role bindings; inter-type declarations; and advice.A simple weaver produces a uniform representation of the crosscutting structure; which canthen be displayed or analyzed in a variety of ways.,International Conference on Model Driven Engineering Languages and Systems,2005,19
Illustrations of crosscutting,Cristina Lopes; Erik Hilsdale; Jim Hugunin; Mik Kersten; Gregor Kiczales,Crosscutting poses some challenges in terms of clean separation of concerns. Aspect-oriented programming [2] is intended to address those challenges. This position paperpresents a couple of examples of situations that involve crosscutting. The first exampleillustrates some basic crosscutting that all technologies for advanced separation of concernsshould be able to handle gracefully. We show how this example is handled using AspectJ™0.6 [1]. The second example shows a more complex crosscutting situation; and we presenthow it might be handled in a future version of AspectJ.,International workshop on aspects and dimensional computing at ECOOP,2000,18
Semantics-based crosscutting in AspectJ,Gregor Kiczales; Jim Hugunin; Mik Kersten; John Lamping; Cristina Lopes; William G Griswold,A central issue in aspect-oriented programming is the design of mechanisms for specifyingthe crosscutting. Early systems used explicit enumeration of names of messages or methods[…]. Recent versions of AspectJ go beyond this by allowing a crosscut to be describedbased on semantic properties of the operations involved. We intend for future versions ofAspectJ to go even farther in this direction. In this short paper we describe the full range ofcrosscut specification mechanisms we currently plan. The paper is intended to serve as afoundation for discussion of this important issue.,Workshop on Multi-Dimensional Separation of Concerns in Software Engineering (ICSE 2000),2000,18
Efficient method dispatch in PCL,Gregor Kiczales; Luis H Rodriguez Jr,*,Object-oriented programming,1993,18
Aspect-Oriented Programming with AspectJ™,Bill Griswold; Erik Hilsdale; Jim Hugunin; Wes Isberg; Gregor Kiczales; Mik Kersten,/**==================================================================**The Apache Software License; Version 1.1* Copyright (c) 1999 The Apache SoftwareFoundation. All rights* reserved.** Redistribution and use in source and binary forms; with orwithout* modification; are permitted provided that the following conditons* are met:** 1.Redistributions of source code must retain the above copyright* notice; this list of conditionsand the following disclaimer.** 2. Redistributions in binary form must reproduce the abovecopyright* notice; this list of conditions and the following disclaimer in* the documentationand/or other materials provided with the* distribution.** 3. The end-user documentationincluded with the redistribution; if* any; must include the following acknowlegement:*" Thisproduct includes software developed by the* Apache Software Foundation (http://www …,AspectJ. org; Xerox PARC,2001,17
AspectJ™: aspect-oriented programming using Java™ technology,Gregor Kiczales,*,JavaOne; June,2000,17
AspectJ (tm): Aspect-oriented programming in Java,Gregor Kiczales,Abstract Aspect-oriented programming (AOP) gives software developers a powerful new toolfor structuring the design and code of software systems. AOP simplifies development ofsystem aspects that previously were among the most difficult to handle; including failurehandling strategies; synchronization policies; change propagation; security checking;distribution; policy enforcement and many others. AOP using AspectJ makes it possible todescribe; in just one place in the system; the implementation of such crosscutting aspects.This reduces development time; improves software quality; and makes software moreflexible. This talk will show what it is like to design and implement with AspectJ; and whatimplications this has for software developers in terms of time-to-market; software quality; andproduct flexibility. For more info about AOP and AspectJ go to http://aspectj. org/servlets …,Revised Papers from the International Conference NetObjectDays on Objects; Components; Architectures; Services; and Applications for a Networked World,2002,16
Exploring an Aspect-Oriented approach to OS code,Yvonne Coady; Gregor Kiczales; Michael Feeley; Norman Hutchinson; Joon Suan Ong; Stephan Gudmundson,Operating system code is complex. But; while substantial complexity is inherent to thisdomain; we believe that other complexity is caused by modularity problems. In this paper;we explore aspect-oriented programming as a means of making this kind of complexityunnecessary. We show that simple linguistic constructs can be used to modularizeprefetching–an aspect of the system that is otherwise unclear because its implementation isspread out in the code.,systems research,2001,16
Exploring an aspect-oriented approach to operating system code,Yvonne Coady; Gregor Kiczales; Michael Feeley,Abstract This paper presents the initial results of our experiment using an aspect-orientedapproach to simplify operating system code. The intuition behind this work is that complexitycomes from crosscutting concerns. In this experiment; we re-implemented prefetching forpage fault handling and file system read requests using a hypothetical language; AspectC–avariant of AspectJ for C–and hand-compiled the code to C. We believe that the aspect-oriented code is easier to understand; and in particular that it is easier to understand theinteraction between the virtual memory and file system prefetching mechanisms.,Position paper for the Advanced Separation of Concerns Workshop at the Conference on Object-Oriented Programming Systems; Languages; and Applications (OOPSLA). ACM; Minneapolis; Minnesota; USA,2000,15
Registration-based language abstractions,Samuel Davis; Gregor Kiczales,Abstract Programming language innovation has been hindered by the difficulty of makingchanges to existing languages. A key source of difficulty is the tyrannical nature of existingapproaches to realizing languages--adding a new language construct means that any tool;document or programmer that works with the language must be prepared to deal with thatconstruct. A registration-based approach makes it possible to define language constructsthat are not tyrannical. They are instead transient--the program appears to be written usingthe constructs only so long as a given programmer wants to see it that way. This approachmay have the potential to greatly facilitate programming language innovation.,ACM Sigplan Notices,2010,14
Brittle systems will break-not bend: can aspect-oriented programming help?,Yvonne Coady; Gregor Kiczales; Joon Suan Ong; Andrew Warfield; Michael Feeley,Abstract As OS code moves to new settings; it must be continually reshaped. Kernel codehowever; is notoriously brittle--a small; seemingly localized change can break disparateparts of the system simultaneously. The problem is that the implementation of some systemconcerns are not modular because they naturally crosscut the system structure. Aspect-oriented programming proposes new mechanisms to enable the modular implementation ofcross-cutting concerns. This paper evaluates aspect-oriented programming in the context oftwo crosscutting concerns in a FreeBSD 4.4 kernel--page daemon activation and diskquotas. The ways in which aspects allowed us to make these implementations modular; theimpact they have on comprehensibility and configurability; and the costs associated withsupporting a prototype of an aspect-oriented runtime environment are presented.,Proceedings of the 10th workshop on ACM SIGOPS European workshop,2002,14
Software constructs that facilitate partial evaluation of source code,*,A partial evaluator; or pre-compiler; for a computer program enables a user to provide; atsuitable places within a program; language constructs which cause certain expressionswithin the program to be evaluated at runtime or at partial evaluation time. These languageconstructs can be used to shorten runtime; such as by avoiding unnecessary duplication ofcode at runtime.,*,2001,14
Lightweight virtual machine support for AspectJ,Ryan M Golbeck; Samuel Davis; Immad Naseer; Igor Ostrovsky; Gregor Kiczales,Abstract Advice weaving can be efficiently supported with only lightweight enhancements toexisting Virtual Machines. Performing weaving at the Java bytecode (JBC) level whilepreserving appropriate metadata enables the VM to understand the AspectJ-specificsemantics of the code and optimize it. This allows the overhead of advice weaving andperforming non-local advice dispatch optimization to occur prior to runtime. It also allows theVM to perform optimizations that are unavailable to a bytecode level weaver. Anexperimental implementation shows that this approach can take advantage of previouslyknown macro optimizations of expensive constructs; including cflow; as well as microoptimizations including those based on improved type analysis unavailable to JBC-basedadvice dispatch. A thorough benchmark evaluation confirms that the use of this …,Proceedings of the 7th international conference on Aspect-oriented software development,2008,13
Aspect-oriented and component-based software engineering,Awais Rashid,Aspect-oriented softwarc engineering and componentbased software engineering arefinding increasing interest among both researchers and practitioners. The inception andadoption of these new technologics has becn led by the drive to improve productivity; qualityand rcusability and reducc maintenance overheads; impact of customisations or extensionsand thc timc to market. Aspectoriented software engincering employs special abstractionsknown as aspects to separate crosscutting concerns throughout the software life cycle.Crosscutting concerns are features which cannot otherwise be cleanly encapsulated in onedevelopment artifact and are tangled over several artifacts. Special composition rulescombine the aspects with artifacts (crosscut by features encapsulated by the aspccts) withrespect to reference points in the artifacts. These referencc points are termed as; join …,IEE Proceedings-Software,2001,13
Can AOP support extensibility in client-server architectures,Yvonne Coady; Alex Brodsky; Dima Brodsky; Jody Pomkoski; Stephan Gudmundson; Joon Suan Ong; Gregor Kiczales,Abstract Extensible client-server software requires a clear separation of core services fromthose that are customizable. This separation is difficult; as these customizable features tendto crosscut the primary functionality of the core services. We believe that an aspect-orientedapproach to client-server architectures supports extensibility in a way that is more flexiblethan traditional approaches. Our experiment focuses on clients within a distributed filesystem that dynamically negotiate with servers for adaptive delayed-write and prefetchingbehaviour.,Proceedings; ECOOP Aspect-Oriented Programming Workshop,2001,13
Modularity in the new millenium: A panel summary,Premkumar Devanbu; Bob Balzer; Don Batory; Gregor Kiczales; John Launchbury; David Parnas; Peri Tarr,Parnas' seminal work [2] on separation of concerns in design has led to diverse innovations inprogramming language design; to support modularity. However; there has been a growing sentimentin many quarters that there are some concerns that stubbornly resist tidy confinement; whenusing established modularization mechanisms in pro- gramming languages. A diverse set ofnew approaches have emerged in response: aspects [1]; monads [5]; mixin lay- ers [3]; andmulti-dimensional separation of concerns [4]. These approaches arose more or less independentlyof each other; and have (to varying degrees) developed technical maturity; real-world credibilityand strong user bases. We are also now beginning to see strong scholarly comparisions of theintellectual foundations and practical utility of these different aproaches. This panel aims to supportthis trend. In this panel; we bring together leading experts (Profs. Batory; Kiczales; and …,Proceedings of the 25th International Conference on Software Engineering,2003,12
Aspect-Oriented Programming with Aspectj.,Erik Hilsdale; Gregor Kiczales,/**====================================================================**The Apache Software License; Version 1.1** Copyright (c) 1999 The Apache SoftwareFoundation. All rights* reserved.** Redistribution and use in source and binary forms; with orwithout* modification; are permitted provided that the following conditions* are met:** 1.Redistributions of source code must retain the above copyright* notice; this list of conditionsand the following disclaimer.** 2. Redistributions in binary form must reproduce the abovecopyright* notice; this list of conditions and the following disclaimer in* the documentationand/or other materials provided with the* distribution.** 3. The end-user documentationincluded with the redistribution; if* any; must include the following acknowlegement:*" Thisproduct includes software developed by the* Apache Software Foundation (http://www …,TOOLS (39),2001,12
The art of the metaobject protocol,D Bobrow; G Kiczales; J Rivieres,*,*,1991,12
A modeling framework for aspect-oriented mechanisms,Hidehiko Masuhara; Gregor Kiczales,*,Proc. of ECOOP. Springer,2003,11
An overview of AspectJ,M Kersten J Palm WG Griswold; G Kiczales E Hilsdale J Hugunin,*,Proceedings of 15th European Conference on Object-Oriented Programming,2001,11
What a metaobject protocol based compiler can do for lisp,Gregor Kiczales; John Lamping; Anurag Mendhekar,Abstract A new kind of metaobject protocol; that controls the compilation of programs; allowsusers to participate in the compilation in a principled and modular way. Such a compilermakes it possible to program in a high-level language and still maintain control over crucialimplementation issues. This result is that a number of simple and elegant Scheme programscan be compiled as efficiently as if they had been written with special purpose primitives.,Unpublished report. A modified version to be presented at the OOPSLA,1994,11
The scalability of AspectJ,Arjun Singh; Gregor Kiczales,Abstract To assess the scalability of AspectJ; we refactored concerns that crosscut over halfof the plug-ins that comprise the Eclipse IDE. Eclipse is a suitable candidate for furtheringother scalability studies of AspectJ because it is not only large; but also has an additionalmodularization mechanism typical of large systems that introduces new complexities fordefining advice and aspects. We evaluated our AO refactored system quantitatively byexamining changes in execution time and memory usage; as well as qualitatively byexamining changes in scattering; coupling; and abstractions. We conclude that AspectJscales well in that it can be used in large systems; but that the system may requiremodifications to the build and class loading procedures in order to cope with defining advicethat cross system boundaries.,Proceedings of the 2007 conference of the center for advanced studies on Collaborative research,2007,10
A machine code model for efficient advice dispatch,Ryan M Golbeck; Gregor Kiczales,Abstract The primary implementations of AspectJ to date are based on a compile-or load-time weaving process that produces Java byte code. Although this implementation strategyhas been crucial to the adoption of AspectJ; it faces inherent performance constraints thatstem from a mismatch between Java byte code and AspectJ semantics. We discuss thesemismatches and show their performance impact on advice dispatch; and we present amachine code model that can be targeted by virtual machine JIT compilers to alleviate thisinefficiency. We also present an implementation based on the Jikes RVM which targets thismachine code model. Performance evaluation with a set of micro benchmarks shows thatour machine code model provides improved performance over translation of advice dispatchto Java byte code.,Proceedings of the 1st workshop on Virtual machines and intermediate languages for emerging modularization mechanisms,2007,10
Software constructs that facilitate partial evaluation of source code,*,A partial evaluator; or pre-compiler; for a computer program enables a user to provide; atsuitable places within a program; language constructs which cause certain expressionswithin the program to be evaluated at runtime or at partial evaluation time. These languageconstructs can be used to shorten runtime; such as by avoiding unnecessary duplication ofcode at runtime.,*,2003,9
A Discussion on Aspect-Oriented Programming: Frequently-Asked Questions,Mehmet Aksit; Tzilla Elrad; Gregor Kiczales; Karl Lieberherr; Harold Ossher,Powered by Pure; Scopus & Elsevier Fingerprint Engine™ © 2017 Elsevier BV.,Communications of the ACM,2001,8
Coding issues in AspectJ,Brian De Alwis; Stephan Gudmundson; Greg Smolyn; Gregor Kiczales,AOP [1] has been proposed as a way to write programs that elegantly implementcrosscutting concerns. This paper presents initial results of an exploration into whether thisis true for AspectJ [2]. During this this exploration we have written several small and mediumscale systems using AspectJ.,Proceedings of Workshop on Advanced Separation of Concerns in Object-Oriented Systems at the Conference on Object-Oriented Programming; Systems; Languages; and Applications,2000,8
Separation of concerns and operating systems for highly heterogeneous distributed computing,Yasuhiko Yokote; Gregor Kiczales; John Lamping,Abstract Highly heterogeneous distributed computing applications present a tremendouschallenge for operating system implementors. These applications present an extremely widerange of demands and must run in an extremely wide range of environments. In order torecognize the wide range of environments; without losing the benefits of traditionalmodularity; we propose a separation of concerns approach to the design of operatingsystems for this domain. In this paper; we first discuss importance of separation of concernsparticularly in highly heterogeneous distributed computing. The discussion is based on theissues we encounter when programming of distributed applications such as for networkedcopiers; settop boxes for cablenets; networked analyzers/oscilloscopes; or palmtopcomputers. We then propose a way to solve them without sacrifice of performance. This …,Proceedings of the 6th workshop on ACM SIGOPS European workshop: Matching operating systems to application needs,1994,8
Apostle: A simple incremental weaver for a dynamic aspect language,Brian De Alwis; Gregor Kiczales,ABSTRACT This paper describes the incremental weaving implementation of Apostle; anaspect-oriented language extension to Smalltalk modelled on AspectJ. Apostle implementsincremental weaving in order to make aspect-oriented programming (AOP) a naturalextension of the incremental edit-run-debug cycle of Smalltalk environments. The paperanalyzes build dependencies for aspect declarations; and shows that two simpledependency table structures are sufficient to produce reasonable re-weaving efficiency. Theresulting incremental weaver provides re-weaving performance proportional to the changein the program.,University of British Columbia; Canada,2003,7
Using AspectJ for programming the detection and handling of exceptions,Cristina Lopes; Jim Hugunin; Mik Kersten; Martin Lippert; Erik Hilsdale; Gregor Kiczales,Abstract We took an existing framework written in Java™; the JWAM framework; and partiallyreengineered some of its exception detection and handling aspects using AspectJ™; anaspect-oriented programming extension to Java. The results of this reengineering projectare reported in [5].,Proceedings of the ECOOP Exception Handling in Object Oriented Systems Workshop,2000,7
Why black boxes are so hard to reuse: A new approach to abstraction for the engineering of software,Gregor Kiczales,*,*,1994,7
Retroactive aspects: programming in the past,Robin Salkeld; Wenhao Xu; Brendan Cully; Geoffrey Lefebvre; Andrew Warfield; Gregor Kiczales,Abstract We present a novel approach to the problem of dynamic program analysis: writinganalysis code directly into the program source; but evaluating it against a recording of theoriginal program's execution. This approach allows developers to reason about theirprogram in the familiar context of its actual source; and take full advantage of programsemantics; data structures; and library functionality for understanding execution. It also givesthem the advantage of hindsight; letting them easily analyze unexpected behavior after ithas occurred. Our position is that writing offline analysis as retroactive aspects provides aunifying approach that developers will find natural and powerful.,Proceedings of the Ninth International Workshop on Dynamic Analysis,2011,6
Griswold. An overview of aspectj,Gregor KICZALES,CiNii 国立情報学研究所 学術情報ナビゲータ[サイニィ]. メニュー 検索 …,ECOOP'01: Proceedings of the 15th European Conference on Object-Oriented Programming; London; UK,2001,6
A simple edit-time metaobject protocol,Andrew Eisenberg; Gregor Kiczales,ABSTRACT We present a simple edit-time metaobject protocol (ETMOP) which runs as partof a code editor and enables metadata annotations to customize the rendering and editing ofcode. The protocol is layered; so that simple render/edit customizations are easy toimplement; while more substantial customizations are still manageable. Experiments with aprototype implementation of the protocol as an Eclipse plug-in show that the ETMOP isflexible enough to allow easy customization of the rendering and editing of a number ofannotations being used in current practice. The flexibility and performance of the prototypesuggest that the ETMOP approach is viable and warrants further study.,Workshop on Open and Dynamic Aspect Languages (OAL),2006,5
Aspect-oriented incremental customization of middleware services,Alex Brodsky; Dima Brodsky; Ida Chan; Yvonne Coady; Jody Pomkoski; Gregor Kiczales,Abstract As distributed applications evolve; incremental customization of middlewareservices is often required; these customizations should be unpluggable; modular; andefficient. This is difficult to achieve because the customizations depend on both application-specific needs and the services provided. Although middleware allows programmers toseparate application-specific functionality from lower-level details; traditional methods ofcustomization do not allow efficient modularization. Currently; making even minor changesto customize middleware is complicated by the lack of locality. Programmers may have tocompromise between the two extremes: to interpose a simple; well-localized layer offunctionality between the application and middleware; or to make a large number of small;poorly localized; invasive changes to all execution points which interact with middleware …,University of British Columbia; Vancouver; BC; Canada,2001,5
Aspect-oriented programming,Cristina Lopes; Gregor Kicales,*,Proceedings of the Technology of Object-Oriented Languages and Systems (TOOLS 34'00),2000,5
Aspectj: the language and support tools,Erik Hilsdale; Jim Hugunin; Mik Kersten; Gregor Kiczales; Cristina Lopes; Jeffrey Palm,Abstract Complex systems usually contain design units that are logically related to severalobjects in the system. Some examples include: tracing; propagation of interrupts; multi-object protocols; security enforcement etc. This crosscutting between those design units andthe objects is a natural phenomenon. But; using traditional implementation techniques; thesource code—ie the classes—becomes tangled with the implementation of the crosscuttingconcerns.,Addendum to the 2000 proceedings of the Conference on Object-oriented Programming; Systems; Languages; and Applications (Addendum),2000,5
The Common Lisp Object System,LG DeMichel; RP Gabriel,*,Proceedings of the European Conference on Object-Oriented Programming (ECOOP'87),1987,5
Interacting with dead objects,Robin Salkeld; Gregor Kiczales,Abstract Debugging and analyzing a snapshot of a crashed program's memory is far moredifficult than working with a live program; because debuggers can no longer execute code tohelp make sense of the program state. We present an architecture that supports therestricted execution of ordinary code starting from the snapshot; as if the dead objects withinit had been restored; but without access to their original external environment. Wedemonstrate the feasibility of this approach via an implementation for Java that does notrequire a custom virtual machine; show that it performs competitively with live execution; anduse it to diagnose an unresolved memory leak in a mature mainstream application.,ACM SIGPLAN Notices,2013,4
Understanding registration-based abstractions: A quantitative user study,John-Jose Nunez; Gregor Kiczales,The adoption of programming language innovation is impeded because all programprocessing tools in the tool chain must support any new or altered language features.Registration-based abstractions (RBAs) were proposed to address this difficulty by allowingthe editor to transiently superimpose new language abstractions on existing code. Individualprogrammers can choose where and when to see a new language abstraction; while at alltimes the underlying code remains written in the original language. Prior work demonstratedthe feasibility of RBAs; but left important questions unanswered regarding how users wouldinteract with such an approach. We asked 50 undergraduate students to answer basicprogram comprehension questions with and without RBAs. Our results show thatparticipants can quickly and easily understand new abstractions without additional …,Program Comprehension (ICPC); 2012 IEEE 20th International Conference on,2012,4
Late binding of AspectJ advice,Ryan M Golbeck; Peter Selby; Gregor Kiczales,Abstract The non-local nature of advice applicability in AspectJ means that in manyimplementations small changes to aspects can require much of the program code to bescanned and possibly rewritten. This can slow down application startup; including the edit-compile-debug development cycle. Late binding of advice has been suggested to improvethe situation; at the potential cost of runtime performance. We propose and evaluate twovirtual machine (VM) internal late binding approaches; that operate at whole-class andwhole-method granularity. Our evaluation shows that in VMs that allow bytecode mutationthe preferred approach is to scan and rewrite methods the first time they are executed. Inother VMs; whole-class scanning and rewriting at load time performs better. A separateinterpreter based approach has startup performance similar to that of the whole-class …,International Conference on Modelling Techniques and Tools for Computer Performance Evaluation,2010,4
A simple edit-time metaobject protocol: controlling the display of metadata in programs,Andrew D Eisenberg; Gregor Kiczales,Abstract I will present a prototype tool that enables Java annotations to serve as anextension point for making programs more visually expressive. Thus; programmers can viewand edit code in a way that more closely resembles the intention of the code; rather than theraw text. Examples that we have applied the tool to are JDBC 4.0; getters; setters andconstraints; JSR 181Webservices; AspectJ; and state charts.,Companion to the 21st ACM SIGPLAN symposium on Object-oriented programming systems; languages; and applications,2006,4
Position summary: Aspect-Oriented system structure,Yvonne Coady; Gregor Kiczales; Michael Feeley; Norman Hutchinson; Joon Suan Ong; Stephan Gudmundson,Abstract Operating system structure is important–it leads to understandable; maintainable;'pluggable'code. But despite our best efforts; some system elements have been difficult tostructure. We propose a new analysis of this problem; and a new technology that canstructure these elements. Primary functionality in system code has a well defined structureas layered abstractions. Other key elements naturally defy these structural boundaries–wesay that they crosscut the layered structure. For example; prefetching for mapped filesinvolves coordinated activity at three levels: predicting the pattern of access and allocatingpages in the VM layer; determining the contiguity of blocks in the disk layer; and reconcilingthe costs of retrieval in the file system layer. Because of its inherent crosscutting structure;the implementation of prefetching is scattered,*,2001,4
Aspect-oriented system structure,Yvonne Coady; Gregor Kiczales; Michael Feeley; Norman Hutchinson; Joon Suan Ong; Stephan Gudmundson,Operating system structure is important; it leads to understandable; maintainable;'pluggable'code. But despite our best efforts; some system elements have been difficult to structure. Wepropose a new analysis of this problem; and a new technology that can structure theseelements. Aspect-oriented programming (AOP)(G. Kiczales et al.; 1997) uses linguisticmechanisms to support the separation of crosscutting elements; or aspects of the system;from primary functionality. We have developed a proof-of-concept AOP implementation ofprefetching in FreeBSD (www. cs. ubc. ca/labs/spl/aspects/aspectc. html). In ourimplementation; we have been able to modularize prefetching.,Hot Topics in Operating Systems; 2001. Proceedings of the Eighth Workshop on,2001,4
Aspectc,Gregor Kiczales; Yvonne Coady,*,*,2001,4
Aspects: passing fad or new foundation?,Adrian Colyer; Jack Greenfield; Ivar Jacobson; Gregor Kiczales; Dave Thomas,Abstract Aspect-oriented software development (AOSD) has a lot of interest in the researchcommunity. It has also found early adopters in application development and middleware.This panel discusses the potential expansion and use of AOP into mainstream softwaredevelopment. This question is not just directed to the aspect research community; but also topracticing software development teams and organizations. The panel will explore theappropriate position and awareness of aspect-orientation amidst other advances in softwareengineering; how to prepare organizations for adoption; and what additional research anddevelopment is necessary. The panel discussion will help the OO community to understandthe appropriate use of aspect-orientation. It will also highlight areas where additional effortsby AOSD researchers and professionals are required.,Companion to the 20th annual ACM SIGPLAN conference on Object-oriented programming; systems; languages; and applications,2005,3
Report on An Overview of Aspectj,Gregor Kiczales; Erik Hilsdale; Jim Hugunin; Mik Kersten; Jeffrey Palm; William G Grisworld,AspectJ is an aspect-oriented extension to JAVA program language. It enables a differentway to further and cleaner modularize all concerns of interest in a complex systemscomparing with the object-oriented mechanism. The AOP approach has a number ofbenefits. First; it improves performance because the operations are more succinct. Second; itallows programmer to spend less time rewriting the same code. Overall; AOP enables betterencapsulation of distinct procedures and promotes future interoperation. The current designand implementation of AspectJ is upward compatible; platform compatible; tool compatibleand programmer compatible. All these compatibilities let AspectJ could work with the currentJAVA platform without any modification to the JVM. Also it could be seamlessly integratedinto existing JAVA tools; such as JBuilder; Ant Builder; and Eclipse; etc.,Notes by Tai Hu; CMSC631 Fall,2002,3
Aspect-oriented programming,Lodewijk Bergmans; Cristina Videira Lopes,Abstract Aspect-oriented programming is a promising idea that can improve the quality ofsoftware by reduce the problem of code tangling and improving the separation of concerns.At ECOOP'97; the first AOP workshop brought together a number of researchers interestedin aspectorientation. At ECOOP'98; during the second AOP workshop the participantsreported on progress in some research topics and raised more issues that were furtherdiscussed. This year; the ideas and concepts of AOP have been spread and adopted morewidely; and; accordingly; the workshop received many submissions covering areas fromdesign and application of aspects to design and implementation of aspect languages.,European Conference on Object-Oriented Programming,1999,3
Compilation Strategies as Objects,Anurag Mendhekar; Gregor Kiczales; John Lamping,Abstract In this paper we present an overview of the metaobject protocol approach tocompilation. We take the position that object orientation in a compiler can be put to e ectiveuse in opening up the compiler for modi cation by the user. Interestingly; the natural scopesof e ect of user intervention don't respect syntactic boundaries; so we require objects that arenot just elements of the abstract syntax tree. We introduce a new kind of intermediate objectfor the process of compilation so that user modi cation of compilation strategies can becarried out in a coherent manner. We give some examples of user customizations; andoutline the architecture of our Scheme compiler based on these principles.,Informal Proceedings on the OOPSLA 1994 Workshop on Object-Oriented Compilation,1994,3
The Art of the Metaobject Protocol,Jim Des Rivières; Gregor Kiczales,*,*,1992,3
Making the Code Look Like the Design-Aspects and Other Recent Work,Gregor Kiczales,Summary form only given. The idea that programs should clearly reflect the design decisionsthey embody has a long history. Higher-level languages; syntactic macros; domain-specificlanguages; and intentional programming are different approaches to this common goal.Recent work from several areas; including aspect-oriented programming; has significantlyadvanced our ability to make code expressive. At the same time; it forces us to reconsider anumber of basic assumptions; including what is a program; what is a module; what is alanguage; and what is an editor.,Program Comprehension; 2007. ICPC'07. 15th IEEE International Conference on,2007,2
A little goes a long way,Gregor Kiczales,*,Software Development,2004,2
Improving design and source code modularity using AspectJ (tutorial session),Cristina Videira Lopes; Gregor Kiczales,Abstract Using only traditional techniques the implementation of concerns like exceptionhandling; multi-object protocols; synchronization constraints; and security policies tends tobe spread out in the code. The lack of modularity for these concerns makes them moredifficult to develop and maintain. This tutorial shows how to use Aspect-orientedprogramming (AOP)[2; 3] to implement concerns like these in a concise modular way. Wediscuss the effect aspects have on software design and on code modularity. The concreteexamples in the tutorial use AspectJ [1]; a freely available aspect-oriented extension to theJava™ programming language.,Proceedings of the 22nd international conference on Software engineering,2000,2
Aspect Oriented Programming,K Mens; C Lopes; B Tekinerdogan; G Kiczales,Page 1. ASPECT-ORIENTED PROGRAMING LINGI2252 – PROF. KIM MENS * Slides partlybased on presentations by Dr. M. D'Hondt; Dr. W. De Meuter & Dr. J. Brichau * (These slidesare part of the course LINGI2252 “Software Maintenance and Evolution”; given by Prof. KimMens at UCL; Belgium) Page 2. ASPECT-ORIENTED PROGRAMMING OVERVIEW OF THISTALK Modularity Crosscutting concerns Scattering and Tangling Aspects Conclusion AspectJWorked-out example 2 Page 3. ASPECT-ORIENTED PROGRAMMING OVERVIEW OF THISTALK Modularity Crosscutting concerns Scattering and Tangling Aspects Conclusion AspectJWorked-out example 3 Page 4. Machiavelli Divide et impera How to construct “good” softwaresystems? that can be used over an extended period of years that are easy to understand ofwhich parts can be reused in other software systems …,Workshop Report; ECOOP'97 Workshop on AOP,1997,2
Аспектно-ориентированное программирование,Gregor Kiczales; John Lamping; Anurag Mendhekar; Chris Maeda; Cristina Videira Lopes; Jean-Marc Loingtier; John Irwin,представляем анализ таких характеристик и называем свойства; адресованные дляэтих решений. Мы покажем что основная причина трудностей лежит в пересечениифункциональности; которая делает невозможным (с использованием существующихпарадигм) чётко инкапсулировать функциональность. В данной статье мы представимоснову для новой техники программирования; называемой аспектно-ориентированнымпрограммированием; которая делает возможным чёткое выражение структурыпрограмм включающих в себя такую" сквозную функциональность". Мы покажем; что спомощью применения" аспектов" реализация имеет может приобрести необходимуюизоляцию; логичную композицию при этом не исключая повторное использование кодааспектов. Решение базируется на системе; которую мы построили; используя …,Kiczales; J. Lamping; A. Mndheker; C. Maeda; C. Lopes; J. Loingtier; J. Irwin. European conference on Object-Oriented programming; June.–Finland: Springer-Verlag,1997,2
Macros that Reach Out and Touch Somewhere,Gregor Kiczales; John Lamping; Luis H Rodriguez Jr; Erik Ruf,By providing a macro facility; languages such as Scheme and Common Lisp allow users todefine new special forms as local; syntactic program transformations. This allows users toabstract away what would otherwise be repetitive or cumbersome syntax. One limitation tothe power of macro facilities is that only textually local transformations can be defined—theuser cannot; for example; define a delay macro which automatically inserts calls to force atall required points in the program. In this paper; we present a new kind of macro; called adata path macro; in which transformations can take place at any point along the dataflowpath that includes the macro invocation. The heart of the data path macro facility is adataflow analysis mechanism that allows the user to easily request powerful data flowanalyses.,*,1992,2
Design Methodology for Object-Oriented Programming,Henry A Sowizral; R SMITH; W CUNNINGHAM; N KERTH; G KICZALES; B MEYER; N MEYROWITZ,*,SIGPLAN NOTICES,1988,2
The magazine archive includes every article published in Communications of the ACM for over the past 50 years.,Sandy Behrens,We know them as shadow systems; workaround systems; and even feral systems. Operatingat the fringes of an organization; they covertly replicate the data and functionality of formallysanctioned systems. Because of their duplicative acts; they are often said to have negativeconsequences for their hosts: undermining official systems; 12 sapping valuable resourcesand corrupting organizational data and processes. 7 But not all shadow systems live up totheir bad reputations. Some shadow systems offer an effective and efficient way for users tocope with the deficiencies of formal systems. 1; 4 This article reports on an ethnographicinvestigation of a shadow system used in a higher educational institution; CentralQueensland University (CQU); whose findings challenge conventional views of theseorganizational outlaws. The study explored how the system was built; implemented; and …,Communications of the ACM,*,2
Interpreter Implementation of Advice Weaving,Muhammad Immad Naseer,Description Implementing advice weaving using code rewriting can cause performanceproblems during application startup and incremental development. We present aninterpreter based (non-rewriting) approach using a simple table and cache structure formatching pointcuts against dynamic join points together with a simple mechanism for callingthe matched advice. An implementation in the JikesRVM; an open source research virtualmachine; shows the approach is straightforward to implement. Internal micro-benchmarksshow dynamic join point execution overhead of approximately 28% in the common casewhere no advice is applicable. Comparative micro-benchmarks with ajc load time weavingshow startup time reductions equivalent to the interpreted execution of 100-117 millionunadvised dynamic join points. The cache and table structures could be used during later …,*,2009,1
Context; perspective; and programs,Gregor Kiczales,Abstract Context plays a large role in our perspective on the world around us--people seethings differently depending on background; role; task at hand; and many other variables.How do different contexts affect developer perspectives on software? What different ways dodevelopers want to see a program? What different ways do they want to work with aprogram? How does a program mean different things to different people? How does contextinfluence perspective? How do different contexts and perspectives interact? Can theseinteractions be reified; controlled; and parameterized?.,Companion to the 22nd ACM SIGPLAN conference on Object-oriented programming systems and applications companion,2007,1
Effectiveness sans formality,Gregor Kiczales,• Goal is to draw connections and possible directions• breadth of topics• for each some ofyou will be more expert• trying to be informed; but will surely make mistakes• Will use work Iknow best as examples• Mylyn; AOP; Fluid AOP; DPRG; role-based refactoring• not claimingthat these are the best examples• just the ones I know best,Keynote talk at OOPSLA,2007,1
The ultra challenge: software systems beyond big,Steven Fraser; Gregor Kiczales; Ricardo Lopez; Peter G Neumann; Linda Northrop; Martin Rinard; Douglas Schmidt; Kevin Sullivan,Abstract How can the ultra large systems (ULS) of the future be built if they will have thecomplexity of trillions of lines of code; maintain continuous 24x7 operations with nodowntime; and live in a hostile environment with unpredictably changing requirements? Thispanel will discuss and debate the challenges posed by ultra large systems in terms of theirdesign; growth; deployment and dynamics.,Companion to the 21st ACM SIGPLAN symposium on Object-oriented programming systems; languages; and applications,2006,1
Aspects and/versus modularity the grand debate,Richard P Gabriel; Guy L Steele Jr; Friedrich Steimann; Jim Waldo; Gregor Kiczales; Kevin Sullivan,Abstract Aspect-Oriented Programming (AOP) and Aspect-Oriented Software Development(AOSD) endeavor to aid programmers in the separation of concerns; specifically crosscuttingconcerns; as an advance in modularization. AOP does so using primarily languagechanges; while AOSD uses a combination of language; environment; and methodology. Butthe concepts of obliviousness-not universally accepted as part of AOP-and parameterizationappear to contradict the well-established principles of modularity and encapsulation thatDavid Parnas and other greats of the past laid out and on which software engineering hasdepended for the last 40 years. Are we moving forward with better understandings ofsoftware engineering; modularity; and design/development principles; or are we losing ourway? This debate is the postscript to Friedrich Steinmann's OOPSLA Essay;" The …,Companion to the 21st ACM SIGPLAN symposium on Object-oriented programming systems; languages; and applications,2006,1
CROSSCUT-It's Not Metaprogramming-AOP was a move away from explicit metaprogramming to a direct semantics for coding crosscutting concerns. But metaprogr...,Gregor Kiczales,*,Software Development,2004,1
Data abstraction in AspectJ,Stephan Gudmundson; Gregor Kiczales,Abstract The AspectJ project [1] is exploring language support to enable programmers toimplement crosscutting concerns in a modular fashion. Previous work in this area hasprimarily examined the expressiveness of AspectJ; to further aspect-oriented programminglanguage research. In our work we focus on critical software engineering issues related tosystem modularity. In particular; we want to understand how use of AspectJ interacts with thewell-known data abstraction principle [2]. In this abstract; we describe some of our work inidentifying the explicit and implicit ways that modules can become dependent upon designdecisions of another module in AspectJ. We hope that this information will provide a usefulperspective to aspect-oriented programming language designers and will help users ofAspectJ make informed design decisions. Given the space constraints; we must assume …,International Conference on Metalevel Architectures and Reflection,2001,1
Aspect-oriented programming with AspectJ. Tutorial,E Hilsdale; G Kiczales,Search all the public and authenticated articles in CiteULike. Include unauthenticated resultstoo (may include "spam") Enter a search phrase. You can also specify a CiteULike article id(123456);. a DOI (doi:10.1234/12345678). or a PubMed ID (pmid:12345678). Click Help foradvanced usage. CiteULike; Group: RiSE; Search; Register; Log in …,*,2001,1
Aspect-Oriented Progrannning,Gregor Kiczales; John Lamping; Anurag Mendhekar; Chris Maeda; Cristina Lopes; Jean-Marc Loingtier; John Irwin,We have found many programming problems for which neither procedural nor object-oriented programming techniques are sufﬁcient to clearly capture some of the importantdesign decisions the program must implement. This forces the implementation of thosedesign decisions to be scattered throughout the code; resulting in “tangled” code that isexcessively difficult to develop and maintain. We present an analysis of why certain designdecisions have been so difficult to clearly capture in actual code. We call the propertiesthese decisions address aspects; and show that the reason they have been hard to captureis that they cross-cut the system's basic functionality. We present the basis for a newprogramming technique; called aspect-oriented program-ming; that makes it possible toclearly express programs involving such as-pects; including appropriate isolation …,*,1997,1
Initial design concepts for quality of service,C Maeda; A Lee; G Murphy; G Kiczales,*,International working conference on dependable computing for critical applications,1997,1
Foil for the Workshop on Open Implementation; internet publication,G Kiczales,CiNii 国立情報学研究所 学術情報ナビゲータ[サイニィ]. メニュー 検索 …,http://www. par. xerox. com,1994,1
IBM rational software,M Ib; Oliver Hummel; Colin Atkinson; D Hughes; P Greenwood; Reid Holmes; Gail C Murphy; Robert Holibaugh; Sholom Cohen; Kio C Kang; Spencer Peterson; Christine Hofmeister; Robert Nord; Dilip Soni; A van der Hoek; CAR Hoare; Robert Hirschfeld; E Hilsdale; G Kiczales,Abstract Large cooperative work systems require work coordination; context awareness andprocess modelling and enactment mechanisms to be effective. Support for processmodelling and work coordination in such systems also needs to support informal aspects ofwork which are difficult to codify. Computer-Supported Cooperative Work (CSCW) facilities;such as inter-person communication and collaborative editing; also need to be well-integrated into both process-modelling tools and tools used to perform work. Serendipity isan environment which provides high-level; visual process modelling and event-handlinglanguages;...,Journal: IEEE Software,1994,1
Programming with the Common Lisp object system,D Bobrow; G Kiczales,*,*,1988,1
MOOCs and on-campus learning,Gregor Kiczales,Description What will higher education become as the MOOC innovation era plays out?Setting dire predictions aside it seems likely that students will have a vast range of resourcesfor learning at their disposal. With MOOCs; MOORs; badge systems; learning communitiesand other innovations coming on line students will be able to get content delivery; activelearning support; office hours and assessment from a variety of different sources. All of thesewill be available these at a wider range of price points and qualities than is possible today.What do we do with our on-campus courses in this environment? How can we use theseinnovations to offer students a better education than ever before? What will it be like runningcourses that make extensive use of open online resources? What will open online coursesbe best at? Worst? What must we excel at?,*,2013,*
A Review of The Art of the Metaobject Protocol,Gregor Kiczales; Jim des Rivieres; Daniel G Bobrow,MIT AI Lab playroom; 1973: We sit on the floor; legs crossed. Some of us are in the wellalong the back wall; someone is curled in the quarter-circle cutout next to the well.Beanbags form pillows. Then we hear his voice in the hall; talking loud; fast. His short legswork fast; an Olympic-style—and-speed—shuffle. He strides into the playroom; stops just atthe overhead projector and says curtly;“Hi.” To those in the room he has a smile as wide ashis head; to ordinary people he wears a slight smirk. His shirt pocket bulges. And he swivelsfrom side to side; checking the audience. Behind his wire rims his eyes are mirth-squinted.He reaches into his shirt pocket; fishes around; looks down pushing aside the glasses case;and pulls out a pen. Which he holds up for view in the tips of his left-hand fingers while hepulls the pen tip with his right-hand fingers; producing a pointer. He continues;“I'm here to …,*,2010,*
CROSSCUT-Double Decker-Two new books explore what it's like to build enterprise applications with aspects and offer a methodology for designing AOP-implemen...,Gregor Kiczales,*,Software Development,2005,*
CROSSCUT: Once More; From the Top-What is aspect-oriented programming? How is it used? The basics of AOP are worth repeating; as are the realities that count...,Gregor Kiczales,*,Software Development,2005,*
CROSSCUT-Show Me the Structure-Aspect-oriented programming is all about crosscutting structure. Understand that; and it's clear what direction AOP tools need to...,Gregor Kiczales; Mik Kersten,*,Software Development,2004,*
CROSSCUT-Common Misconceptions-Whether you focus on the generalities; the utility or the functionality of AOP some false concepts may get in your way.,Gregor Kiczales,*,Software Development,2004,*
Palpable Progress From the podium to the hallways; the third annual Aspect-Oriented Software Development Conference in Lancaster; England; was suffused with t...,G Kiczales,*,SOFTWARE DEVELOPMENT-SAN FRANCISCO-,2004,*
CROSSCUT-The AOP Report Card-AOP training and tool support are key issues for future growth.,Gregor Kiczales,*,Software Development,2004,*
CROSSCUT-It's the Crosscutting-Understanding how to separate concerns and avoid scattering will help you develop better software--whether you use aspect-orien...,Gregor Kiczales,*,Software Development,2004,*
CROSSCUT-The More the Merrier-When Bill Gates recently declared his designs on aspect-oriented programming; the response was mixed-while some feared dea...,Gregor Kiczales,*,Software Development,2004,*
CROSSCUT-A Little Goes a Long Way-Attributes in C# and annotations in Java provide a hook for principled macros and metaprogramming in the C family. Lisp has...,Gregor Kiczales,*,Software Development,2004,*
CROSSCUT-The New Modularity-Aspects open up new possibilities for previously locked-down parts of platforms.,Gregor Kiczales,*,Software Development,2004,*
CROSSCUT-Three Steps; No Fail-AOP adoption starts small before spreading through your organization; but that's the secret to its success at IBM; CapitalOne; ARI...,Gregor Kiczales,*,Software Development,2004,*
CROSSCUT-Thinking Aspects-The biggest impact has already begun-like object-oriented programming before it; AOP is changing the way we think about the eleme...,Gregor Kiczales,*,Software Development,2004,*
CROSSCUT-Testing the Waters-With new tools emerging and the buzz increasing; it's time to start working with aspect-oriented programming. Here's a plan for doin...,Gregor Kiczales,*,Software Development,2003,*
CROSSCUT-The Key to AOP,Gregor Kiczales,*,Software Development,2003,*
Discussing Aspects of AOP [AOP におけるアスペクトについて議論する],Tzilla Elrad; Mehmet Aksit; Gregor Kiczales; Karl Lieberherr; Harold Ossher,照) を表現した UML を考えてみましょう. ここには; 図形要素を表現する具象クラスとして点 (Point)と線 (Line) の 2 つのクラスがあります. これらのクラスは優れたモジュール性を兼ね備えています.各クラス中のソースコードは密接に関連していますし; 明確で適切に定義されたインタフェースを持っています. しかし;「スクリーンマネージャは図形要素が移動するたびに通知を受けなければならない」というコンサーンを考えるとどうなるでしょうか? この場合; 図形要素を移動するメソッドはすべてそのことをスクリーンマネージャに通知しなければなりません. 図-1 の太線で表示した箱は;このコンサーンの実装に関連するすべてのメソッドの周りを線で囲んだものです. Point ボックスとLine ボックスは; このコンサーンを実装するメソッドを中にとり囲んでいます. DisplayUpdatingボックスは図中の他のボックスには関係がないことに注意してください. その代わり;DisplayUpdating は 2 つのボックスを横切っています. これが; 横断的コンサーンと呼ぶものです …,情報処理,2002,*
An aspect-oriented extension to Java enables plug-and-play implementations of crosscutting.,Gregor Kiczales; Erik Hilsdale; Jim Hugunin; Mik Kersten; Jeffrey Palm; William G Griswold,*,COMMUNICATIONS OF THE ACM,2001,*
Wrap-Up,Gregor Kiczales,*,Proceedings of the Workshop on Object-Oriented Technology,1999,*
Aspect-Oriented Programming Workshop,Cristina Lopes; Kim Mens; Bedir Tekinerdogan; Gregor Kiczales,Abstract Building software from reusable components is considered important in reducingdevelopment costs. Object-oriented languages such as C++; Smalltalk and Java; however;are not capable of expressing certain aspects of applications in a reusable way. Softwareengineers may experience difficulties in composing and reusing applications fromcomponents; for example if components implement code for multiple views; dynamicinheritance and synchronization [6]. If these aspects have to be programmed; then object-oriented languages may require a considerable amount of redefinition although this may notbe intuitively necessary. Several researchers termed these problems as inheritanceanomalies; cross-cutting; etc.[12][8][10][11]. Aspectoriented programming aims at addressingthese problems by specifying and composing the aspects of a program in a systematic …,*,1998,*
Position paper: Initial Design Concepts for Quality of Service,C Maeda; A Lee; G Murphy; G Kiczales,*,DEPENDABLE COMPUTING AND FAULT TOLERANT SYSTEMS,1998,*
The OT idea life-cycle (panel): from eureka! to shrink wrap,Laura Hill; Bruce Anderson; Adele Goldberg; Gregor Kiczales; Colin Scott; Kevin Tyson,Abstract Over the past years; the Object Technology community has seen the birth of anumber of new technology ideas that have changed the way we do computing. These ideashave affected compiler design; analysis approaches; project management techniques; userinterface design; deployment strategies and implementation tactics. But where do theseideas come from? And how do they evolve? Do they address the needs as specified bymembers of the Object Community? Is there a way we can nurture the introduction andassimilation of these ideas to and by the community at large? And what are the marketforces that bend ideas to their will. This panel will look at new ideas in Object Technologyfrom a variety of perspectives and will attempt to get to the heart of the way that we; astechnologists; create; buy; sell and grow ideas.,ACM SIGPLAN Notices,1997,*
Tutorial" Aspect-Oriented Programming" Improved Support for Separation of Concerns in Software Design and Implementation,Gregor Kiczales,CiNii 国立情報学研究所 学術情報ナビゲータ[サイニィ]. メニュー 検索 …,情報処理学会研究報告ソフトウェア工学 (SE),1997,*
What can programming languages contribute to software engineering; and vice versa?(panel),Gregor Kiczales,Many would argue that programming languages are essentially irrelvant to softwareengineers: the real problems are not in the way we code our implementations but theprocesses; environments; and methods that we use to carry out system developmentthroughout the lifecycle. On the other hand; a number of programming languages andsystems have recently been developed with specific problems of software engineering inmind; by including advanced modularization capabilities; support for dynamic systemcomposition; and the ability to create new applications from widely distributed componentry.This panel examines the extent to which such new language capabilities are likely to affectthe practice of software engineering.,ACM SIGSOFT Software Engineering Notes,1996,*
Xerox Palo Alto Research Center June 11; 1994,Gregor Kiczales,*,*,1994,*
Xerox Palo Alto Research Center* July 26; 1993,Gregor Kiczales,Abstract Object-oriented techniques are a powerful tool for making a system end-programmer specializable. But; in cases where the system not only accepts objects as input;but also creates objects internally; specialization has been more difficult. This has beenreferred to as the" make isn't generic problem." We present a new objectoriented languageconcept; called traces; that we have used successfully to support specialisation in cases thatwere previously cumbersome. The concept of traces makes a fundamental separationbetween two kinds of inheritance in object-oriented languages: inheritance of defaultimplementation-an aspect of code sharing; and inheritance of specialization; a sometimesstatic; sometimes dynamic phenomena.,Object Technologies for Advanced Software: First JSSST International Symposium; Kanazawa; Japan; November 4-6; 1993. Proceedings,1993,*
Xerox Palo Alto Research Center September 2; 1993,Gregor Kiczales,Abstract Object-oriented techniques are a powerful tool for making a system end-programmer specializable. But; in cases where the system not only accepts objects as input;but also creates objects internally; specialization has been more di cult. This has beenreferred to as the\make isn't generic problem." We present a new objectoriented languageconcept; called traces; that we have used successfully to support specialization in cases thatwere previously cumbersome. The concept of traces makes a fundamental separationbetween two kinds of inheritance in object-oriented languages: inheritance of defaultimplementation {an aspect of code sharing; and inheritance of specialization; a sometimesstatic; sometimes dynamic phenomenon.,*,1993,*
A Cut at the Make Isn't Generic" Problem,Gregor Kiczales,Abstract Object-oriented techniques are a powerful tool for making a system end-programmer specializable. But; in cases where the system not only accepts objects as input;but also creates objects internally; specialization has been more di cult. This has beenreferred to as the make isn't generic problem." We present a new objectoriented languageconcept; called traces; that we have used successfully to support specialization in cases thatwere previously cumbersome. The concept of traces makes a fundamental separationbetween two kinds of inheritance in object-oriented languages: inheritance of defaultimplementation an aspect of code sharing; and inheritance of specialization; a sometimesstatic; sometimes dynamic phenomena.,*,1993,*
OPEN IMPLEMENTATIONS AND OS STRUCTURE,Andrew Myers; Richard Draves; Gregor Kiczales; John Lamping; Chris Maeda; David Keppel; Dylan McNamee,Page 1. OPEN IMPLEMENTATIONS AND OS STRUCTURE Resolving the IntegritylPerformanceConflict Andrew Myers The Case for Run-Time Replaceable Kernel Modules Richard DravesThe Need for Customizable Operating Systems Gregor Kiczales; John Lamping; Chris Maeda;David Keppel; and Dylan McNamee Service without Servers Chris Maeda; Brian Bershad,Fourth Workshop on Workstation Operating System; October 14-15; 1993; Napa; California: Proceedings,1993,*
Towards a New Model of Abstraction,Gregor Kiczales,Abstract We now come to the decisive step of mathematical abstraction: we forget aboutwhat the symbols stand for...[The mathematician] need not be idle; there are manyoperations he can carry out with these symbols; without ever having to look at the things theystand for. Hermann Weyl;“The Mathematical Way of Thinking”(This appears at the beginningof the Building Abstractions With Data chapter of “Structure and Interpretation,*,1992,*
Xerox Palo Alto Research Center,Gregor Kiczales; John Lamping,*,*,1992,*
OBJECT-ORIENTED LANGUAGES-PREMISES AND PROMISES-DISCUSSION,DG BOBROW; P DEUTSCH; G KICZALES; B STROUSTRUP,*,SIGPLAN NOTICES,1989,*
and o: m@ t! s; such that c= resolvedyn (o: m@ t; Mmeth).,L Tanca; R Zicari Integrating; S Keene; G Kiczales; D Moon Common,7 Conclusion In this paper; methods and object-oriented views are provided within a simpleextension of datalog. Several approaches to inheritance are introduced and compared. Thiswork can be extended in several directions. One may introduce very naturally multipleinheritance in the model. Indeed; because of the declarative nature of the language; multipleinheritance seems to open wide possibilities in terms of modeling comfort.(It is much less soin procedural languages.) Another possible extension is to consider resolution based on allthe arguments of method calls as in CLOS]. This can be achieved using techniques ofAKW90]. Another issue is the development of speci c optimization techniques fordatalogmeth computations.,*,1988,*
Xerographics Project,JEFF SHRAGER; DANIEL S JORDAN; THOMAS P MORAN; GREGOR KICZALES; DANIEL M RUSSELL,The photocopier is one of the most complex machines because xerography involves manytypes of physical phenomena. ARIA is a qualitative simulation of xerography that is intendedto teach technicians the reasons behind some of the subtle problems that occur in copiers.This effort to model xerography exposed shortcomings in the techniques of qualitativemodeling as applied to complex systems and helped to better understand the impact ofcertain basic modeling decisions.,*,1937,*
Aspect-oriented programming and modular reasoning,M Mezini; G Kiczales,*,27th International Conference on Software Engineering,*,*
Palo Alto Research Center,Daniel G Bobrow; David Boggs; Anita Borg; John Seely Brown; Bill Buxton; Stuart Card; Robert Carr; Lynn Conway; Franklin C Crow; Pavel Curtis; Steve Deering; L Peter Deutsch; Paul Dourish; Clarence Ellis; David Em; David Eppstein; Charles Geschke; Adele Goldberg; Jack Goldman; Timothy A Gonsalves; Bill Gosper; Rich Gossweiler; Rebecca Grinter; Neil Gunther; Bruce Horn; Bernardo Huberman; Dan Ingalls; Van Jacobson; Natalie Jeremijenko; Ronald Kaplan; Alan Kay; Martin Kay; Gregor Kiczales; Ralph Kimball; Butler Lampson; Cristina Lopes; Jock D Mackinlay; David Maynard; Edward M McCreight; Ralph Merkle; Diana Merry; Robert Metcalfe; Jim Mitchell; Thomas P Moran; James H Morris; Martin Newell; Geoffrey Nunberg; Severo Ornstein; George Pake; Randy Pausch; Ashwin Ram; Prasad Ram; Trygve Reenskaug; George G Robertson; Eric Schmidt; Bertrand Serlet; Scott Shenker; John Shoch; Charles Simonyi; Brian Cantwell Smith; Robert Spinrad; Bob Sproull; Gary Starkweather; Lucy Suchman; Bert Sutherland; Robert Taylor; Shang-Hua Teng; Larry Tesler; Chuck Thacker; Bill Verplank; John Warnock; Mark Weiser; Niklaus Wirth; Frances Yao; Annie Zaenen,PARC (Palo Alto Research Center Incorporated); formerly Xerox PARC; is a research anddevelopment company in Palo Alto; California;[1][2][3] with a distinguished reputation for itscontributions to information technology and hardware systems.Founded in 1970 as adivision of Xerox Corporation; PARC has been responsible for such well known andimportant developments as laser printing; Ethernet; the modern personal computer;graphical user interface (GUI); object-oriented programming; ubiquitous computing;amorphous silicon (a-Si) applications; and advancing very-large-scale-integration (VLSI) forsemiconductors.,*,*,*
Forum Hotel Gołębiewski-Mikołajki; Wisła; Karpacz; Białystok-TAGO. Strona Główna Hotel Gołębiewski-Mikołajki; Wisła; Karpacz; Białystok-TAGO. opinie,Daniel G Bobrow; David Boggs; Anita Borg; John Seely Brown; Bill Buxton; Stuart Card; Robert Carr; Ed Chi; Elizabeth F Churchill; Lynn Conway; Franklin C Crow; Pavel Curtis; Steve Deering; L Peter Deutsch; Paul Dourish; Clarence Ellis; David Em; William English; David Eppstein; Matthew K Franklin; Sean R Garner; Charles Geschke; Adele Goldberg; Jack Goldman; Timothy A Gonsalves; Bill Gosper; Rich Gossweiler; Rebecca Grinter; Neil Gunther; Bruce Horn; Bernardo Huberman; Dan Ingalls; Van Jacobson; Natalie Jeremijenko; Ronald Kaplan; Lauri Karttunen; Alan Kay; Martin Kay; Gregor Kiczales; Ralph Kimball; Butler Lampson; Cristina Lopes; Andrew K Ludwick; Jock D Mackinlay; David Maynard; Edward M McCreight; Ralph Merkle; Diana Merry; Robert Metcalfe; Jim Mitchell; Thomas P Moran; James H Morris; Martin Newell; Geoffrey Nunberg; Severo Ornstein; George Pake; Randy Pausch; Ashwin Ram; Prasad Ram; Trygve Reenskaug; George G Robertson; Eric Schmidt; Ronald V Schmidt; Bertrand Serlet; Scott Shenker; John Shoch; Charles Simonyi; Brian Cantwell Smith; Robert Spinrad; Bob Sproull; Gary Starkweather; Maureen C Stone; Lucy Suchman; Bert Sutherland; Robert Taylor; Shang-Hua Teng; Larry Tesler; Chuck Thacker; Bill Verplank; John Warnock; Mark Weiser; Niklaus Wirth; Frances Yao; Annie Zaenen,PARC (company)[img]//upload. wikimedia. org/wikipedia/commons/thumb/5/52/Parcentrance. jpg/220px-Parcentrance. jpg [/img] PARC entrance.[img]//upload. wikimedia.org/wikipedia/en/thumb/4/48/XeroxPARC. png/220px-XeroxPARC. png [/img] Xerox PARCold logo. PARC (Palo Alto Research Center Incorporated); formerly Xerox PARC; is aresearch and development company in Palo Alto; California; with a distinguished reputationfor its contributions to information technology and hardware systems.Founded in 1970 as adivision of Xerox Corporation; PARC has been responsible for such well known andimportant developments as laser printing; Ethernet; the modern personal computer;graphical user interface (GUI); object-oriented programming; ubiquitous computing;http://www. cy-pr. com/analysis/www. lereve. pl amorphous silicon (a-Si) applications; and …,*,*,*
Forum Classic Honda Owners Club Strona Główna Classic Honda Owners Club,Daniel G Bobrow; David Boggs; Anita Borg; John Seely Brown; Bill Buxton; Stuart Card; Robert Carr; Ed Chi; Elizabeth F Churchill; Lynn Conway; Franklin C Crow; Pavel Curtis; Steve Deering; L Peter Deutsch; Paul Dourish; Clarence Ellis; David Em; William English; David Eppstein; Matthew K Franklin; Sean R Garner; Charles Geschke; Adele Goldberg; Jack Goldman; Timothy A Gonsalves; Bill Gosper; Rich Gossweiler; Rebecca Grinter; Neil Gunther; Bruce Horn; Bernardo Huberman; Dan Ingalls; Van Jacobson; Natalie Jeremijenko; Ronald Kaplan; Lauri Karttunen; Alan Kay; Martin Kay; Gregor Kiczales; Ralph Kimball; Butler Lampson; Cristina Lopes; Andrew K Ludwick; Jock D Mackinlay; David Maynard; Edward M McCreight; Ralph Merkle; Diana Merry; Robert Metcalfe; Jim Mitchell; Thomas P Moran; James H Morris; Martin Newell; Geoffrey Nunberg; Severo Ornstein; George Pake; Randy Pausch; Ashwin Ram; Prasad Ram; Trygve Reenskaug; George G Robertson; Eric Schmidt; Ronald V Schmidt; Bertrand Serlet; Scott Shenker; John Shoch; Charles Simonyi; Brian Cantwell Smith; Robert Spinrad; Bob Sproull; Gary Starkweather; Maureen C Stone; Lucy Suchman; Bert Sutherland; Robert Taylor; Shang-Hua Teng; Larry Tesler; Chuck Thacker; Bill Verplank; John Warnock; Mark Weiser; Niklaus Wirth; Frances Yao; Annie Zaenen,PARC (company)[img]//upload. wikimedia. org/wikipedia/commons/thumb/5/52/Parcentrance. jpg/220px-Parcentrance. jpg [/img] PARC entrance.[img]//upload. wikimedia.org/wikipedia/en/thumb/4/48/XeroxPARC. png/220px-XeroxPARC. png [/img] Xerox PARCold logo. PARC (Palo Alto Research Center Incorporated); formerly Xerox PARC; is aresearch and development company in Palo Alto; California; with a distinguished reputationfor its contributions to information technology and hardware systems.Founded in 1970 as adivision of Xerox Corporation; PARC has been responsible for such well known andimportant developments as laser printing; Ethernet; the modern personal computer;graphical user interface (GUI); object-oriented programming; ubiquitous computing;http://www. cy-pr. com/analysis/www. lereve. pl amorphous silicon (a-Si) applications; and …,*,*,*
Honda; Yasuaki; 355 Hudak; Paul; 284–285,Willie Hunt; JH Jacobs; Suresh Jagannathan; Nigel Jagger; Stanley Jefferson; Mark P Jones; Neil D Jones; Simon L Peyton Jones; Jesper Jørgensen; Kenneth Kahn; Samuel N Kamin; Yukio Kaneda; Peter D Karp; Sonya E Keene; Richard A Kelsey; James Kempf; Robert R Kessler; Gregor Kiczales; Andreas Kind; Jürgen Kopp; Timothy Koschmann; Jed J Krohnfeldt; Sanjeev Kumar; Richard Lamson; Kevin J Lang; Guy Lapalme; James R Larus; Mario Latendresse; John Launchbury; Arthur H Lee; Elgin Lee; Peter Lee; Shinn-Der Lee; Karl J Lieberherr; Mark Lillibridge; Gary Lindstrom; John D Lowrance; Jacques Malenfant; Karoline Malmkjær; Luis Mandel; Larry Masinter; Ian A Mason; Hideo Matsuda; Satoshi Matsuoka; Wendy L Milner; David A Moon; Lockwood Morris; Roger Nasr; Greg Nuyens; Martin Odersky; John T O’Donnell; Atsushi Ohori; Chris Okasaki; Dino P Oliva; Walter Olthoff; Randy Osborne; Eric Ost; Julian Padget; Jens Palsberg; Barak A Pearlmutter; James Philbin; Kent M Pitman; Keith Playford; Mohammad Pourheidari; John D Ramsdell; Uday S Reddy; Jonathan A Rees; John C Reynolds; Guillermo J Rozas; Erik Ruf; Colin Runciman; Amr Sabry; David A Schmidt; Thekla Schneider; Peter Sestoft; Zhong Shao; Dorai Sitaram; Randall B Smith; Scott Smith; Harald Søndergaard; Jonathan Springer; Ian Stark; Mark Stefik; L Stoller,Båge; Göran; 301–302 Baker; Henry G.; 313; 318–319 Baker-Finch; Clement A.; 347Berrington; Neil; 328 Birkedal; Lars; 345 Bloss; Adrienne; 284–285 Bobrow; Daniel G.; 287; 288Bonzon; Pierre E.; 298 Borning; Alan; 320 Bradford; Russell; 325–326 Brand; Heiner; 312; 313Bretthauer; Harry; 325; 326 Broadbery; Peter; 327; 328 Bromley; Hank; 282 Bruggeman;Carl; 322; 365 Burdorf; Christopher; 327 … Carr; Harold; 296; 316 Cengarle; Marıa Victoria;312; 313 Chakrabarti; Soumen; 336 Chambers; Craig; 309–311 Chang; Bay-Wei; 309–310Charniak; 290 Cheng; Gang; 318 Chin; Wei-Ngan; 356 Cointe; Pierre; 353 Conery; John S.;315–316; 335 Consel; Charles; 322–323 … Däßler; Klaus; 312; 313 Danvy; Olivier;322–323; 345–346; 362 Darlington; John; 356 Davis; Al; 315 Davis; Harley; 326 Davis; Kei; 347DeMichiel; Linda G.; 287; 288 … Derbyshire; Margaret H.; 298–299 De Roure; David …,*,*,*
for the IBM PC; Willis. I. Tomkins; Prentice Hall; Englewood Cliffs; NJ.; 1993; 400 pp.,Gregor Kiczales; Jim des Rivieres; Kamesh Ramakrishna,*,*,*,*
EXPERIENCE REPORTS COMMITTEE,Dave Thomas; Alan Cameron Wills; Bruce Anderson; Andrew Hunt; Bret Pettichord; Don Wells; Erich Gamma; Gary Evans; Gregor Kiczales; Helen Sharp; James Bach; Jutta Eckstein; Ken Schwaber; Laurie Williams; John Lamping; Larry Constantine; Brian Marick; Mary Poppendieck; Martine Devos; Pete McBreen; Peter Bailey; Robert D Austin; Linda Rising; Sherman Alpert; Scott W Ambler; Peri Tarr; Robert C Martin; Ward Cunningham; Brian Barry; Lars Mathiassen; Bjorn N Freeman-Benson; Richard P Gabriel; Gunnar Overgaard; Rebecca Wirfs-Brock,*,*,*,*
Workshop on Aspect-Oriented Programming,Cristina Videira Lopes; Gail Murphy; Arthur Lee; Gregor Kiczales,Page 1. PROCEEDINGS OF THE ASPECT-ORIENTED PROGRAMMING WORKSHOP ATICSE'98 Organizers: Cristina Lopes; Gail Murphy; and Gregor Kiczales http://www.parc.xerox.com/aop/icse98 Includes an overview of the workshop the position papers. The overview of theworkshop was published in Proceedings of the 20th International Conference on SoftwareEngineering; Volume II; April 1998; Kyoto; Japan. IEEE Computer Society. The position papersare copyrighted by their authors. All rights are reserved. Page 2. Workshop on Aspect-OrientedProgramming Cristina Videira Lopes Gail Murphy Arthur Lee Gregor Kiczales University of BritishColumbia Korea University Xerox Palo Alto Research Center Dept. of Computer Science Dept.of Computer Science 3333 Coyote Hill Rd. Vancouver Seoul 136-701 Palo Alto; CA 94304; USACanada Korea +1 (650) 812-4498 +82-2-3290-3196 …,*,*,*
Reflections on the paper:“Design Pattern Implementation in Java and AspectJ”,J Hannemann; G Kiczales; Benjamin Stopford,As an example let us consider a telecommunications application. This might have a coreconcern of “routing calls”; but code for other operations such as “timing” and “billing” thosecalls might be intertwined in the whole “routing” object hierarchy. Here the “billing concern”overlays the “routing concern” meaning that the code that implements each is crosscut (Fig.1 (a)). This intertwining of code for separate concerns; know as Cross-Cutting; cannot beremoved with regular programming methods.,*,*,*
