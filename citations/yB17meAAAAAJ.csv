Microsoft CEP server and online behavioral targeting,Mohamed H Ali; Ciprian Gerea; Balan Sethu Raman; Beysim Sezgin; Tiho Tarnavski; Tomer Verona; Ping Wang; Peter Zabback; A Ananthanarayan; A Kirilov; Ming Lu; Alex Raizman; Ramkumar Krishnan; Roman Schindlauer; Torsten Grabs; Sharon Bjeletich; Badrish Chandramouli; Jonathan Goldstein; Sudin Bhat; Ying Li; Vincenzo Di Nicola; Xianfang Wang; David Maier; S Grell; Olivier Nano; I Santos,Abstract In this demo; we present the Microsoft Complex Event Processing (CEP) Server;Microsoft CEP for short. Microsoft CEP is an event stream processing system featured by itsdeclarative query language and its multiple consistency levels of stream query processing.Query composability; query fusing; and operator sharing are key features in the MicrosoftCEP query processor. Moreover; the debugging and supportability tools of Microsoft CEPprovide visibility of system internals to users. Web click analysis has been crucial to behavior-based online marketing. Streams of web click events provide a typical workload for a CEPserver. Meanwhile; a CEP server with its processing capabilities plays a key role in web clickanalysis. This demo highlights the features of Microsoft CEP under a workload of web clickevents.,Proceedings of the VLDB Endowment,2009,104
Temporal analytics on big data for web advertising,Badrish Chandramouli; Jonathan Goldstein; Songyun Duan," Big Data" in map-reduce (MR) clusters is often fundamentally temporal in nature; as aremany analytics tasks over such data. For instance; display advertising uses BehavioralTargeting (BT) to select ads for users based on prior searches; page views; etc. Previouswork on BT has focused on techniques that scale well for offline data using MR. However;this approach has limitations for BT-style applications that deal with temporal data:(1) manyqueries are temporal and not easily expressible in MR; and moreover; the set-orientednature of MR front-ends such as SCOPE is not suitable for temporal processing;(2) ascommercial systems mature; they may need to also directly analyze and react to real-timedata feeds since a high turnaround time can result in missed opportunities; but it is difficultfor current solutions to naturally also operate over real-time streams. Our contributions are …,Data Engineering (ICDE); 2012 IEEE 28th International Conference on,2012,92
Trill: A high-performance incremental query processor for diverse analytics,Badrish Chandramouli; Jonathan Goldstein; Mike Barnett; Robert DeLine; Danyel Fisher; John C Platt; James F Terwilliger; John Wernsing,Abstract This paper introduces Trill--a new query processor for analytics. Trill fulfills acombination of three requirements for a query processor to serve the diverse big dataanalytics space:(1) Query Model: Trill is based on a tempo-relational model that enables it tohandle streaming and relational queries with early results; across the latency spectrum fromreal-time to offline;(2) Fabric and Language Integration: Trill is architected as a high-levellanguage library that supports rich data-types and user libraries; and integrates well withexisting distribution fabrics and applications; and (3) Performance: Trill's throughput is highacross the latency spectrum. For streaming data; Trill's throughput is 2-4 orders of magnitudehigher than comparable streaming engines. For offline relational queries; Trill's throughput iscomparable to a major modern commercial columnar DBMS. Trill uses a streaming …,Proceedings of the VLDB Endowment,2014,81
Asynchronous transfer of state information between continuous query plans,*,Described herein are technologies pertaining to migrating state information of operators in afirst continuous query plan to a second continuous query plan in an asynchronous manner;such that the first continuous query plan need not cease executing during the migrating ofthe state information. State information pertaining to stateful operators; such as joinoperators; is migrated from the first continuous query plan to the second continuous queryplan by way of a transformation plan. State matching is utilized to generate thetransformation plan.,*,2013,51
Sqlvm: Performance isolation in multi-tenant relational database-as-a-service,Vivek Narasayya; Sudipto Das; Manoj Syamala; Badrish Chandramouli; Surajit Chaudhuri,Abstract A relational Database-as-a-Service provider; such as Microsoft SQL Azure; canshare resources of a single database server among multiple tenants. This multi-tenancyenables cost reduction for the cloud service provider which it can pass on as savings to thetenants. However; resource sharing can adversely affect a tenant's performance due toresource demands of other tenants' workloads. Service providers today do not provide anyassurances to a tenant in terms of isolating its performance from other co-located tenants.We present SQLVM; an abstraction for performance isolation which is built on a promise ofreservation of key database server resources; such as CPU; I/O and memory; for eachtenant. The key challenge is in supporting this abstraction within a DBMS without staticallyallocating resources to tenants; while ensuring low overheads and scaling to large …,*,2013,49
StreamRec: a real-time recommender system,Badrish Chandramouli; Justin J Levandoski; Ahmed Eldawy; Mohamed F Mokbel,Research and development of recommender systems has been a vibrant field for over adecade; having produced proven methods for “preference-aware” computing.Recommenders use community opinion histories to help users identify interesting items froma considerably large search space (eg; inventory from Amazon [7]; movies from Netflix [9]).Personalization; recommendation; and the “human side" of data-centric applications arealso becoming important topics in the data management community [3]. A popularrecommendation method used heavily in practice is collaborative filtering; consisting of twophases:(1) An offline model-building phase that uses community opinions of items (eg;movie ratings;“Diggs”[6]) to build a model storing meaningful correlations between usersand items.(2) An on-demand recommendation phase that uses the model to produce a …,Proceedings of the 2011 ACM SIGMOD International Conference on Management of data,2011,47
Real-time-ready behavioral targeting in a large-scale advertisement system,*,A “Real-Time-Ready Analyzer” combines a data stream management system (DSMS) with amap-reduce (MR) framework to construct a streaming map-reduce framework that is suitablefor real-time Behavioral Targeting (BT)(or other temporal queries). The Real-Time-ReadyAnalyzer allows users to write “dual-intent” temporal analysis queries for BT. These queriesare succinct and easy to express; scale well on large-scale offline data; and can also workover real-time data. Further; the Real-Time-Ready Analyzer uses the aforementionedstreaming map-reduce framework to provide dual-intent algorithms for end-to-end BTphases. Experiments using real data from an advertisement system show that the Real-Time-Ready Analyzer is very efficient and incurs orders-of-magnitude lower development effortthan conventional systems.,*,2013,46
The extensibility framework in Microsoft StreamInsight,Mohamed Ali; Badrish Chandramouli; Jonathan Goldstein; Roman Schindlauer,Microsoft StreamInsight (StreamInsight; for brevity) is a platform for developing anddeploying streaming applications; which need to run continuous queries over high-data-ratestreams of input events. StreamInsight leverages a well-defined temporal stream model andoperator algebra; as the underlying basis for processing long-running continuous queriesover event streams. This allows StreamInsight to handle imperfections in event delivery andto provide correctness guarantees on the generated output. StreamInsight natively supportsa diverse range of off-the-shelf streaming operators. In order to cater to a much broaderrange of customer scenarios and applications; StreamInsight has recently introduced a newextensibility infrastructure. With this infrastructure; StreamInsight enables developers tointegrate their domain expertise within the query pipeline in the form of user defined …,Data Engineering (ICDE); 2011 IEEE 27th International Conference on,2011,46
High-performance dynamic pattern matching over disordered streams,Badrish Chandramouli; Jonathan Goldstein; David Maier,Abstract Current pattern-detection proposals for streaming data recognize the need to movebeyond a simple regular-expression model over strictly ordered input. We continue in thisdirection; relaxing restrictions present in some models; removing the requirement forordered input; and permitting stream revisions (modification of prior events). Further;recognizing that patterns of interest in modern applications may change frequently over thelifetime of a query; we support updating of a pattern specification without blocking input orrestarting the operator. Our new pattern operator (called AFA) is a streaming adaptation of anon-deterministic finite automaton (NFA) where additional schema-based user-definedinformation; called a register; is accessible to NFA transitions during execution. AFAssupport dynamic patterns; where the pattern itself can change over time. We propose …,Proceedings of the VLDB Endowment,2010,43
Spatio-temporal stream processing in microsoft streaminsight,Mohamed Ali1 Badrish Chandramouli2 Balan Sethu; Raman1 Ed Katibah,Abstract Microsoft StreamInsight is a platform for developing and deploying streamingapplications. StreamInsight embraces a temporal stream model to unify and further enrichquery language features; handle imperfections in event delivery and define consistencyguarantees on the output. With its extensibility framework; StreamInsight enables developersto integrate their domain expertise within the query pipeline as user defined functions;operators and aggregates. Also; the Microsoft SQL Server Spatial Library deliverscomprehensive spatial support that enables organizations to seamlessly consume; use; andextend location-based data. This paper covers two approaches to support spatio-temporalstream processing in StreamInsight. First; the paper describes the ongoing effort at MicrosoftSQL Server to bring together the temporal aspect of StreamInsight and the spatial support …,Data Engineering,2010,43
Efficient logical merging over physically divergent streams,*,A logical merge module is described herein for producing an output stream which is logicallycompatible with two or more physically divergent input streams. Representative applicationsof the logical merge module are also set forth herein … A data processing module (such asa data stream management system) may receive and process redundant data streams in variousscenarios. For reasons set forth herein; the data processing module may confront various challengesin performing this task … Functionality is set forth herein for logically merging physically divergentinput streams. In one implementation; the functionality operates by receiving the input streamsfrom any respective sources. The functionality then uses a logical merge module to producean output stream which is logically compatible with each of the input streams … According toanother illustrative aspect; the logical merge module represents an operator that may be …,*,2012,42
Query suspend and resume,Badrish Chandramouli; Christopher N Bond; Shivnath Babu; Jun Yang,Abstract Suppose a long-running analytical query is executing on a database server andhas been allocated a large amount of physical memory. A high-priority task comes in and weneed to run it immediately with all available resources. We have several choices. We couldswap out the old query to disk; but writing out a large execution state may take too muchtime. Another option is to terminate the old query and restart it after the new task completes;but we would waste all the work already performed by the old query. Yet another alternativeis to periodically checkpoint the query during execution; but traditional synchronouscheckpointing carries high overhead. In this paper; we advocate a database-centricapproach to implementing query suspension and resumption; with negligible executionoverhead; bounded suspension cost; and efficient resumption. The basic idea is to let …,Proceedings of the 2007 ACM SIGMOD international conference on Management of data,2007,39
Dynamic pattern matching over ordered and disordered data streams,*,Architecture introduces a new pattern operator referred to as called an augmented transitionnetwork (ATN); which is a streaming adaptation of non-reentrant; fixed-state ATNs fordynamic patterns. Additional user-defined information is associated with automaton statesand is accessible to transitions during execution. ATNs are created that directly modelcomplex pattern continuous queries with arbitrary cycles in a transition graph. Thearchitecture can express the desire to ignore some events during pattern detection; and canalso detect the absence of data as part of a pattern. The architecture facilitates efficientsupport for negation; ignorable events; and state cleanup based on predicate punctuations.,*,2014,36
End-to-end support for joins in large-scale publish/subscribe systems,Badrish Chandramouli; Jun Yang,Abstract We address the problem of supporting a large number of select-join subscriptionsfor wide-area publish/subscribe. Subscriptions are joins over different tables; with varyinginterests expressed as range selection conditions over table attributes. Naive schemes; suchas computing and sending join results from a server; are inefficient because they produceredundant data; and are unable to share dissemination costs across subscribers and events.We propose a novel; scalable scheme that group-processes and disseminates a generalmix of multi-way select-join subscriptions. We also propose a simple and application-agnostic extension to content-driven networks (CN); which further improves sharing ofdissemination costs. Experimental evaluations show that our schemes can generate ordersof magnitude lower network traffic at very low processing cost. Our extension to CN can …,Proceedings of the VLDB Endowment,2008,35
Estimating latencies for query optimization in distributed stream processing,*,A “Query Optimizer” provides a cost estimation metric referred to as “Maximum AccumulatedOverload”(MAO). MAO is approximately equivalent to maximum system latency in a datastream management system (DSMS). Consequently; MAO is directly relevant for use inoptimizing latencies in real-time streaming applications running multiple continuous queries(CQs) over high data-rate event sources. In various embodiments; the Query Optimizercomputes MAO given knowledge of original operator statistics; including “operatorselectivity” and “cycles/event” in combination with an expected event arrival workload.Beyond use in query optimization to minimize worst-case latency; MAO is useful foraddressing problems including admission control; system provisioning; user latencyreporting; operator placements (in a multi-node environment); etc. In addition; MAO; as a …,*,2010,34
On-the-fly progress detection in iterative stream queries,Badrish Chandramouli; Jonathan Goldstein; David Maier,Abstract Multiple researchers have proposed cyclic query plans for evaluating iterativequeries over streams or rapidly changing input. The Declarative Networking community usescyclic plans to evaluate Datalog programs that track reachability and other graph traversalson networks. Cyclic query plans can also evaluate pattern-matching and other queriesbased on event sequences. An issue with cyclic queries over dynamic inputs is knowingwhen the query result has progressed to a certain point in the input; since the number ofiterations is data dependent. One option is a" strictly staged" computation; where the queryplan quiesces between inputs. This option introduces significant latency; and may also"underload" inter-operator buffers. An alternative is to settle for soft guarantees; such as"eventual consistency". Such imprecision can make it difficult; for example; to know when …,Proceedings of the VLDB Endowment,2009,32
Stat!: An interactive analytics environment for big data,Mike Barnett; Badrish Chandramouli; Robert DeLine; Steven Drucker; Danyel Fisher; Jonathan Goldstein; Patrick Morrison; John Platt,Abstract Exploratory analysis on big data requires us to rethink data management across theentire stack--from the underlying data processing techniques to the user experience. Wedemonstrate Stat!--a visualization and analytics environment that allows users to rapidlyexperiment with exploratory queries over big data. Data scientists can use Stat! to quicklyrefine to the correct query; while getting immediate feedback after processing a fraction ofthe data. Stat! can work with multiple processing engines in the backend; in this demo; weuse Stat! with the Microsoft StreamInsight streaming engine. StreamInsight is used togenerate incremental early results to queries and refine these results as more data isprocessed. Stat! allows data scientists to explore data; dynamically compose multiplequeries to generate streams of partial results; and display partial results in both textual …,Proceedings of the 2013 ACM SIGMOD International Conference on Management of Data,2013,31
Scalable progressive analytics on big data in the cloud,Badrish Chandramouli; Jonathan Goldstein; Abdul Quamar,Abstract Analytics over the increasing quantity of data stored in the Cloud has become veryexpensive; particularly due to the pay-as-you-go Cloud computation model. Data scientiststypically manually extract samples of increasing data size (progressive samples) usingdomain-specific sampling strategies for exploratory querying. This provides them with user-control; repeatable semantics; and result provenance. However; such solutions result intedious workflows that preclude the reuse of work across samples. On the other hand;existing approximate query processing systems report early results; but do not offer theabove benefits for complex ad-hoc queries. We propose a new progressive analytics systembased on a progress model called Prism that (1) allows users to communicate progressivesamples to the system;(2) allows efficient and deterministic query processing over …,Proceedings of the VLDB Endowment,2013,29
Accurate latency estimation in a distributed event processing system,Badrish Chandramouli; Jonathan Goldstein; Roger Barga; Mirek Riedewald; Ivo Santos,A distributed event processing system consists of one or more nodes (machines); and canexecute a directed acyclic graph (DAG) of operators called a dataflow (or query); over long-running high-event-rate data sources. An important component of such a system is costestimation; which predicts or estimates the “goodness” of a given input; ie; operator graphand/or assignment of individual operators to nodes. Cost estimation is the foundation forsolving many problems: optimization (plan selection and distributed operator placement);provisioning; admission control; and user reporting of system misbehavior. Latency is asignificant user metric in many commercial real-time applications. Users are usuallyinterested in quantiles of latency; such as worst-case or 99 th percentile. However; existingcost estimation techniques for event-based dataflows use metrics that; while they may …,Data Engineering (ICDE); 2011 IEEE 27th International Conference on,2011,28
On the database/network interface in large-scale publish/subscribe systems,Badrish Chandramouli; Junyi Xie; Jun Yang,Abstract The work performed by a publish/subscribe system can conceptually be divided intosubscription processing and notification dissemination. Traditionally; research in thedatabase and networking communities has focused on these aspects in isolation. Theinterface between the database server and the network is often overlooked by previousresearch. At one extreme; database servers are directly responsible for notifying individualsubscribers; at the other extreme; updates are injected directly into the network; and thenetwork is solely responsible for processing subscriptions and forwarding notifications.These extremes are unsuitable for complex and stateful subscription queries. A primary goalof this paper is to explore the design space between the two extremes; and to devisesolutions that incorporate both database-side and network-side considerations in order to …,Proceedings of the 2006 ACM SIGMOD international conference on Management of data,2006,28
Value-based notification conditions in large-scale publish/subscribe systems?,Badrish Chandramouli; Jeff M Phillips; Jun Yang,Abstract We address the problem of providing scalable support for subscriptions withpersonalized value-based notification conditions in wide-area publish/subscribe systems.Notification conditions can be fine-tuned by subscribers; allowing precise and flexiblecontrol of when events are delivered to the subscribers. For example; a user may specify thatshe should be notified if and only if the price of a particular stock moves outside a" radius"around her last notified value. Naive techniques for handling notification conditions are notscalable. It is challenging to share subscription processing and notification dissemination ofsubscriptions with personalized value-based notification conditions; because twosubscriptions may see two completely different sequences of notifications even if theyspecify the same radius. We develop and experimentally evaluate scalable processing …,Proceedings of the 33rd international conference on Very large data bases,2007,27
Data stream management systems for computational finance,Badrish Chandramouli; Mohamed Ali; Jonathan Goldstein; Beysim Sezgin; Balan Sethu Raman,Because financial applications rely on a continual stream of time-sensitive data; any datamanagement system must be able to process complex queries on the fly. Although manyorganizations turn to custom solutions; data stream management systems can offer the samelow-latency processing with the flexibility to handle a range of applications.,Computer,2010,21
Cloud-edge topologies,*,The description relates to cloud-edge topologies. Some aspects relate to cloud-edgeapplications and resource usage in various cloud-edge topologies. Another aspect of thepresent cloud-edge topologies can relate to the specification of cloud-edge applicationsusing a temporal language. A further aspect can involve an architecture that runs datastream management systems (DSMSs) engines on the cloud and cloud-edge computers torun query parts.,*,2015,19
Patience is a virtue: Revisiting merge and sort on modern processors,Badrish Chandramouli; Jonathan Goldstein,Abstract The vast quantities of log-based data appearing in data centers has generated aninterest in sorting almost-sorted datasets. We revisit the problem of sorting and merging datain main memory; and show that a long-forgotten technique called Patience Sort can; withsome key modifications; be made competitive with today's best comparison-based sortingtechniques for both random and almost sorted data. Patience sort consists of two phases:the creation of sorted runs; and the merging of these runs. Through a combination ofalgorithmic and architectural innovations; we dramatically improve Patience sort for bothrandom and almost-ordered data. Of particular interest is a new technique called ping-pongmerge for merging sorted runs in main memory. Together; these innovations produce anextremely fast sorting technique that we call P3 Sort (for Ping-Pong Patience+ Sort) …,Proceedings of the 2014 ACM SIGMOD international conference on Management of data,2014,18
ProSem: Scalable wide-area publish/subscribe,Badrish Chandramouli; Jun Yang; Pankaj K Agarwal; Albert Yu; Ying Zheng,Abstract We demonstrate ProSem; a scalable wide-area publish/subscribe system thatsupports complex; stateful subscriptions as well as simple ones. One unique feature ofProSem is its cost-based joint optimization of both subscription processing and notificationdissemination. ProSem uses novel reformulation techniques to expose new alternatives forprocessing and disseminating data using standard stateless content-driven networkcomponents.,Proceedings of the 2008 ACM SIGMOD international conference on Management of data,2008,15
Efficient episode mining of dynamic event streams,Debprakash Patnaik; Srivatsan Laxman; Badrish Chandramouli; Naren Ramakrishnan,Discovering frequent episodes over event sequences is an important data mining problem.Existing methods typically require multiple passes over the data; rendering them unsuitablefor streaming contexts. We present the first streaming algorithm for mining frequent episodesover a window of recent events in the stream. We derive approximation guarantees for ouralgorithm in terms of:(i) the separation of frequent episodes from infrequent ones; and (ii) therate of change of stream characteristics. Our parameterization of the problem provides a newsweet spot in the tradeoff between making distributional assumptions over the stream andalgorithmic efficiencies of mining. We illustrate how this yields significant benefits whenmining practical streams from neuroscience and telecommunications logs.,Data Mining (ICDM); 2012 IEEE 12th International Conference on,2012,13
RACE: Real-time applications over cloud-edge,Badrish Chandramouli; Joris Claessens; Suman Nath; Ivo Santos; Wenchao Zhou,Abstract The Cloud-Edge topology-where multiple smart edge devices such as phones areconnected to one another via the Cloud-is becoming ubiquitous. We demonstrate RACE; anovel framework and system for specifying and efficiently executing distributed real-timeapplications in the Cloud-Edge topology. RACE uses LINQ for StreamInsight to succinctlyexpress a diverse suite of useful real-time applications. Further; it exploits the processingpower of edge devices and the Cloud to partition and execute such queries in a distributedmanner. RACE features a novel cost-based optimizer that efficiently finds the optimalplacement; minimizing global communication cost while handling multi-level join queriesand asymmetric network links.,Proceedings of the 2012 ACM SIGMOD International Conference on Management of Data,2012,12
Deterministic progressive big data analytics,*,A plurality of data items that are annotated with progress markers may be obtained. Theprogress markers may indicate progress points associated with atemporal processingprogress of the respective data items. Deterministic; massively parallel; progressiveprocessing may be initiated on the plurality of data items on a plurality of devices; theprogress markers indicating which of the plurality of data items are to be incorporated intoresults of the progressive processing; the progress markers further indicating an ordering forincorporation of the respective data items into the results.,*,2016,11
Real-time spatio-temporal analytics using Microsoft StreamInsight,Mohamed Ali; Badrish Chandramouli; Balan S Raman; Ed Katibah,Abstract Microsoft StreamInsight (StreamInsight; for brevity) is a platform for developing anddeploying streaming applications that run continuous queries over high-rate streamingevents. StreamInsight adopts a temporal stream model to handle imperfections in eventdelivery and define consistency guarantees on the output. This demo highlights the ability ofStreamInsight to monitor; analyze and correlate spatio-temporal stream data that isgenerated by moving objects. The demo scenario is based on the Microsoft Shuttle Servicewhere GPS readings are generated and streamed by shuttles as they move around theMicrosoft main campus in Redmond; WA. The demo presents a set of relational continuousqueries as well as various real-time analytics that help improve the efficiency of the shuttleservice in terms of the average wait time per passenger and the average daily mileage …,Proceedings of the 18th SIGSPATIAL International Conference on Advances in Geographic Information Systems,2010,11
Operator state checkpoint markers and rehydration,*,A checkpoint marker can be received at a first operator. The first operator can process thecheckpoint marker by sending the checkpoint marker to a second operator and sendingstate checkpoint information representing a state of the first operator to a checkpoint writer.The checkpoint information can be used to rehydrate the state of one or more operators. Forexample; after a system failure; system shutdown; etc.; checkpoint information can bereceived from a reader unit at a checkpoint information input queue of the first operator. Astate of the first operator can be rehydrated using the checkpoint information. Processing ofinformation in a data input queue of the first operator can be suspended while thecheckpoint information is used to rehydrate the state of the first operator. Other operators in asystem with the first operator (eg; the second operator) may be checkpointed and …,*,2014,10
DiAl: distributed streaming analytics anywhere; anytime,Ivo Santos; Marcel Tilly; Badrish Chandramouli; Jonathan Goldstein,Abstract Connected devices are expected to grow to 50 billion in 2020. Through ourindustrial partners and their use cases; we validated the importance of inflight dataprocessing to produce results with low latency; in particular local and global data analyticscapabilities. In order to cope with the scalability challenges posed by distributed streaminganalytics scenarios; we propose two new technologies:(1) JStreams; a low footprint andefficient JavaScript complex event processing engine supporting local analytics onheterogeneous devices and (2) DiAlM; a distributed analytics management service thatleverages cloud-edge evolving topologies. In the demonstration; based on a realmanufacturing use case; we walk through a situation where operators supervisemanufacturing equipment through global analytics; and drill down into alarm cases on the …,Proceedings of the VLDB Endowment,2013,10
Online visualization of geospatial stream data using the worldwide telescope,Mohamed Ali; Badrish Chandramouli; Jonathan Fay; Curtis Wong; Steven Drucker; Balan Sethu Raman,ABSTRACT This demo presents the ongoing effort to meld the stream query processingcapabilities of Microsoft StreamInsight with the visualization capabilities of the WorldWideTelescope. This effort provides visualization opportunities to manage; analyze; and processreal-time information that is of spatio-temporal nature. The demo scenario is based ondetecting; tracking and predicting interesting patterns over historical logs and real-time feedsof earthquake data.,Proceedings of the VLDB Endowment,2011,10
Tempe: an interactive data science environment for exploration of temporal and streaming data,Danyel Fisher; Badrish Chandramouli; Robert DeLine; Jonathan Goldstein; Andrei Aron; Mike Barnett; John C Platt; James F Terwilliger; John Wernsing,ABSTRACT Over the last two decades; data scientists performed increasingly sophisticatedanalyses on larger data sets; yet their tools and workflows remain low-level. A typicalanalysis involves different tools for different stages of the work; requiring file transfers andconsiderable care to keep everything organized. Temporal data adds additional complexity:users typically must write queries offline before porting them to production systems. Toaddress these problems; this paper introduces Tempe; a web application providing anintegrated; collaborative environment for both real-time and offline temporal data analysis.Tempe's central concept is a persistent research notebook retaining data sources; analysissteps and results. Analysis steps are carried out in script editor that uses a live programmingapproach to display interactive; progressively updated visualizations. Tempe uses a …,Tech. Rep. MSR-TR-2014–148,2014,9
Distributed network querying with bounded approximate caching,Badrish Chandramouli; Jun Yang; Amin Vahdat,Abstract As networks continue to grow in size and complexity; distributed network monitoringand resource querying are becoming increasingly difficult. Our aim is to design; build; andevaluate a scalable infrastructure for answering queries over distributed measurements; atreduced costs (in terms of both network traffic and query latency) while maintaining requiredprecision. In this infrastructure; each network node owns a set of numerical measurementsand actively maintains bounds on these values cached at other nodes. We can answerqueries approximately; using bounds from nearby caches to avoid contacting the ownersdirectly. We focus on developing efficient and scalable techniques to place; locate; andmanage bounded approximate caches across a large network. We have developed twoapproaches: One uses a recursive partitioning of the network space to place caches in a …,International Conference on Database Systems for Advanced Applications,2006,8
The trill incremental analytics engine,Badrish Chandramouli; Jonathan Goldstein; Mike Barnett; Robert DeLine; Danyel Fisher; John C Platt; James F Terwilliger; John Wernsing,ABSTRACT This technical report introduces Trill–a new query processor for analytics. Trillfulfills a combination of three requirements for a query processor to serve the diverse bigdata analytics space:(1) Query Model: Trill is based on a tempo-relational model thatenables it to handle streaming and relational queries with early results; across the latencyspectrum from real-time to offline;(2) Fabric and Language Integration: Trill is architected asa highlevel language library that supports rich data-types and user libraries; and integrateswell with existing distribution fabrics and applications; and (3) Performance: Trill'sthroughput is high across the latency spectrum. For streaming data; Trill's throughput is 2-4orders of magnitude higher than today's comparable streaming engines. For offlinerelational queries; Trill's throughput is comparable to a major modern commercial …,*,2014,7
Extensibility model for stream-based operators and aggregates,*,An extensibility framework that allows a user to write user-defined modules that include user-defined operators (UDO) and user-defined aggregators (UDA) in a non-temporal fashionwithout the need to worry about temporal attributes of events (or event types). The temporaldomain is managed on behalf of the user; and allows the user to write operators andaggregates in the temporal data streaming domain as well as to port existing libraries of non-temporal UDOs/UDAs to the temporal data streaming domain. Temporal attributes and eventtypes are managed for non-temporal UDOs/UDAs by the extensibility framework on behalf ofthe UDO/UDA writer. Windows can be employed to bridge the gap between the non-temporal domains and temporal domains. Support for complex event processing (CEP) isprovided in UDOs/UDAs for base classes related to a CEP operator; CEP aggregate; CEP …,*,2013,7
An extensible test framework for the Microsoft StreamInsight query processor.,Alex Raizman; Asvin Ananthanarayan; Anton Kirilov; Badrish Chandramouli; Mohamed H Ali,ABSTRACT Microsoft StreamInsight (StreamInsight; for brevity) is a platform for developingand deploying streaming applications. StreamInsight adopts a deterministic stream modelthat leverages a temporal algebra as the underlying basis for processing longrunningcontinuous queries. In most streaming applications; continuous query processing demandsthe ability to cope with high input rates that are characterized by imperfections in eventdelivery (ie; incomplete or out-of-order data). StreamInsight is architected to handleimperfections in event delivery; to generate real-time low-latency output; and to providecorrectness guarantees on the resultant output. On one hand; streaming operators aresimilar to their wellunderstood relational counterparts-with a precise algebra as the basis oftheir behavior. On the other hand; streaming operators are unique in their non-blocking …,DBTest,2010,7
Semantic tuplespace,Liangzhao Zeng; Hui Lei; Badrish Chandramouli,Abstract The tuplespace system is a popular cooperative communication paradigm inservice-oriented computing. Tuple matching in existing tuplespace systems is either type-based or object-based. It requires that both tuple writers and readers adhere to the sameapproach of information organization (ie; same terminologies or class hierarchy). Further; itexamines the value of the tuple contents only. As such; these tuplespace systems areinadequate for supporting communication among services in heterogeneous and dynamicenvironments; because services are forced to adopt the same approach to organizing theinformation exchanged. In order to overcome these limitations and constraints; we propose asemantic tuplespace system. Our system uses ontologies to understand the semantics oftuple contents; and correlates tuples using relational operators as part of tuple matching …,International Conference on Service-Oriented Computing,2005,7
Supporting distributed feed-following apps over edge devices,Badrish Chandramouli; Suman Nath; Wenchao Zhou,Abstract In feed-following applications such as Twitter and Facebook; users (consumers)follow a large number of other users (producers) to get personalized feeds; generated byblending producers-feeds. With the proliferation of Cloud-connected smart edge devicessuch as smartphones; producers and consumers of many feed-following applications resideon edge devices and the Cloud. An important design goal of such applications is to minimizecommunication (and energy) overhead of edge devices. In this paper; we abstractdistributed feed-following applications as a view maintenance problem; with the goal ofoptimally placing the views on edge devices and in the Cloud to minimize communicationoverhead between edge devices and the Cloud. The view placement problem for generalnetwork topology is NP Hard; however; we show that for the special case of Cloud-edge …,Proceedings of the VLDB Endowment,2013,6
System and method for application initiated user interaction,*,A system; method and computer program product of using peer collaboration tools to extendthe reach of applications by enabling the application to specify a modality policy that ispredicated on end-user context when pushing an interaction to the end-user. Variouscollaboration technologies—including cell phones; email; instant messaging (IM); the shortmessage service (SMS); and pagers—have emerged that people can use to interact witheach other even when they are remote and/or mobile. Using collaboration tools as theinterface to Web applications eliminates the applications' dependency on Web browsers andallows applications to be accessed even when a Web browser is not available. In addition;collaboration tools are capable of receiving “calls”; which can be exploited by applications toproactively initiate and push an interaction to end users.,*,2007,6
A general streaming algorithm for pattern discovery,Debprakash Patnaik; Srivatsan Laxman; Badrish Chandramouli; Naren Ramakrishnan,Abstract Discovering frequent patterns over event sequences is an important data miningproblem. Existing methods typically require multiple passes over the data; rendering themunsuitable for streaming contexts. We present the first streaming algorithm for miningfrequent patterns over a window of recent events in the stream. We derive approximationguarantees for our algorithm in terms of:(i) the separation of frequent patterns from theinfrequent ones; and (ii) the rate of change of stream characteristics. Our parameterization ofthe problem provides a new sweet spot in the tradeoff between making distributionalassumptions over the stream and algorithmic efficiencies of mining. We illustrate how thisyields significant benefits when mining practical streams from neuroscience andtelecommunications logs.,Knowledge and information systems,2013,5
Streaming algorithms for pattern discovery over dynamically changing event sequences,Debprakash Patnaik; Naren Ramakrishnan; Srivatsan Laxman; Badrish Chandramouli,Abstract: Discovering frequent episodes over event sequences is an important data miningtask. In many applications; events constituting the data sequence arrive as a stream; atfurious rates; and recent trends (or frequent episodes) can change and drift due to thedynamical nature of the underlying event generation process. The ability to detect and tracksuch the changing sets of frequent episodes can be valuable in many application scenarios.Current methods for frequent episode discovery are typically multipass algorithms; makingthem unsuitable in the streaming context. In this paper; we propose a new streamingalgorithm for discovering frequent episodes over a window of recent events in the stream.Our algorithm processes events as they arrive; one batch at a time; while discovering the topfrequent episodes over a window consisting of several batches in the immediate past. We …,arXiv preprint arXiv:1205.4477,2012,5
Analytical data processing engine,*,Some examples include high-performance query processing of real-time and offlinetemporal-relational data. Further; some implementations include processing streaming dataevents by annotating individual events with a first timestamp (eg; a “sync-time”) and secondtimestamp that may identify additional event information. The stream of incoming data eventsmay be organized into a sequence of data batches that each include multiple data events.The individual data batches in the sequence may be processed in a non-decreasing “sync-time” order.,*,2017,4
Tempe: Live scripting for live data.,Robert DeLine; Danyel Fisher; Badrish Chandramouli; Jonathan Goldstein; Michael Barnett; James F Terwilliger; John Wernsing,Data scientists are increasingly working with live streaming data; for example; businesstelemetry and signals from wearable devices and the Internet of Things. Unfortunately;current tools for exploratory data analysis provide poor support for streaming data. Thispaper presents Tempe; a data science environment for temporal and streaming data.Tempe's extensible scripting environment allows for live programming; displays interactive;continually updating visualizations; and provides a uniform query language for both storedand live data. We discuss the streaming features of Tempe and evaluate our design choiceswith a deployment study at Microsoft with a product team who used Tempe continuously forsix months.,VL/HCC,2015,4
On suspending and resuming dataflows,Badrish Chandramouli; Christopher N Bond; Shivnath Babu; Jun Yang,Consider a long-running; resource-intensive query Q running on a database managementsystem (DBMS). Suppose another task T with much higher priority arrives; and we need toprocess T as quickly as possible and with all available resources. Ideally; the system shouldsuspend the execution of Q; quickly release all resources held by Q; and start T using allresources. Query Q can be resumed once T finishes execution; ideally without losing anysignificant fraction of the work that Q had done prior to suspend. Beyond supporting mixed-priority DBMS workloads; suspend/resume of queries; or dataflows in general; is important inmany other settings: Utility and grid: Dataflows now run frequently on computational utilitiesand grids composed of autonomous resources. When the owner of resources wants to usethem; dataflows running on these resources must release control quickly; and migrate to …,Data Engineering; 2007. ICDE 2007. IEEE 23rd International Conference on,2007,4
Pushing the envelope of pervasive access,Badrish Chandramouli; Hui Lei; Kumar Bhaskaran; Henry Chang; Michael Dikun; Terry Heath,This paper presents the design and implementation of the Puma middleware system. Pumaenables pervasive access to Web applications from a wide range of clients. In addition totraditional; browser-equipped client devices such as laptops and PDAs; Puma supports theuse of peer collaboration tools such as instant messengers; SMS devices; email clients andtelephones. While those collaboration tools were initially intended for free-form interactionbetween people; Puma leverages them for structured interaction between people andcomputers in order to offer more flexibility; convenience and intimacy to end users. Inaddition to user-initiated; or pull-based; interactions; Puma allows an application toproactively push an interaction to a user; in a manner sensitive to the application's needsand the user's current context. Architecturally; Puma employs various Modality Bots to …,Pervasive Services; 2005. ICPS'05. Proceedings. International Conference on,2005,4
The Quill Distributed Analytics Library and Platform,Badrish Chandramouli; Raul Castro Fernandez; Jonathan Goldstein; Ahmed Eldawy; Abdul Quamar,ABSTRACT This technical report introduces Quill (stands for a quadrillion tuples per day); alibrary and distributed platform for relational and temporal analytics over large datasets inthe cloud. Quill exposes a new abstraction for parallel datasets and computation; calledSharded-Streamable. This abstraction provides the ability to express efficient distributedphysical query plans that are transferable; ie; movable from offline to real-time and viceversa. ShardedStreamable decouples incremental query logic specification; a small but richset of data movement operations; and keying; this allows Quill to express a broad space ofplans with complex querying functionality; while leveraging existing temporal libraries suchas Trill. Quill's layered architecture provides a careful separation of responsibilities withindependently useful components; while retaining high performance. We built Quill for the …,*,2016,3
Enabling signal processing over data streams,Milos Nikolic; Badrish Chandramouli; Jonathan Goldstein,Abstract Internet of Things applications analyze the data coming from large networks ofsensor devices using relational and signal processing operations and running the samequery logic over groups of sensor signals. To support such increasingly important scenarios;many data management systems integrate with numerical frameworks like R. Suchsolutions; however; incur significant performance penalties as relational data processingengines and numerical tools operate on fundamentally different data models with expensiveinter-communication mechanisms. In addition; none of these solutions supports efficient real-time and incremental analysis. In this paper; we advocate a deep integration of signalprocessing operations and general-purpose query processors. We aim to reconcile thedisparate data models and provide a common query language that allows users to …,Proceedings of the 2017 ACM International Conference on Management of Data,2017,2
Isolating resources and performance in a database management system,*,Techniques for tenant performance isolation in a multiple-tenant database managementsystem are described. These techniques may include providing a reservation of serverresources. The server resources reservation may include a reservation of a centralprocessing unit (CPU); a reservation of Input/Output throughput; and/or a reservation ofbuffer pool memory or working memory. The techniques may also include a meteringmechanism that determines whether the resource reservation is satisfied. The meteringmechanism may be independent of an actual resource allocation mechanism associatedwith the server resource reservation.,*,2016,2
Building Engines and Platforms for the Big Data Age,Badrish Chandramouli,Abstract Big data analytics involves the collection of real-time operational data into largeclusters; followed by the execution of analytics queries to derive insights from the data. Theresults of these insights are periodically deployed into the real-time pipeline; in order toperform business actions or raise alerts. We are currently witnessing a move towards fastdata analytics; where some of the offline activities may be performed in memory; directlyover the real-time input streams; in order to reduce the time taken to derive and exploitinsights from the data. Further; there is an increasing emphasis on enabling data scientiststo derive quick approximate insights from large volumes of offline data interactively and atlow cost; ie; without having to process the entire dataset each time. Such hybrid andinterconnected workflows across offline and real-time data; stored and processed across …,*,2015,2
Stream operator,*,Aspects of the subject matter described herein relate to stream operators. In aspects; astream event is received. Based on a timestamp associated with the stream event and thenumber of stream operators that have asked to be activated prior to or at the timestamp; zeroor more stream objects are informed of one or more time events and torn down if no longerneeded. In addition; a destination stream operator is instantiated; if needed; data (eg; thetimestamp and packet; if any) corresponding to the stream event is provided to a streamoperator; output data; if any; is received from the stream operator; and the stream operator istorn down if it no longer needs state data between invocations.,*,2014,2
Cloud-edge topologies,*,Abstract The description relates to cloud-edge topologies. Some aspects relate to cloud-edge applications and resource usage in various cloud-edge topologies. Another aspect ofthe present cloud-edge topologies can relate to the specification of cloud-edge applicationsusing a temporal language. A further aspect can involve an architecture that runs datastream management systems (DSMSs) engines on the cloud and cloud-edge computers torun query parts.,*,2018,1
READY: Completeness is in the Eye of the Beholder,Badrish Chandramouli; Johannes Gehrke; Jonathan Goldstein; Moritz Hoffmann; Donald Kossmann; Justin Levandoski; Renato Marroquin; Wenlei Xie,ABSTRACT Modern database systems support one set of integrity constraints per database.Imagine you could specify multiple sets of integrity constraints per database; one for eachtype of application. This paper argues why this might be a good idea and introduces asystem that implements this idea.,Biennial Conference on Innovative Data Systems Research (CIDR 2017),2017,1
ICE: Managing cold state for big data applications,Badrish Chandramouli; Justin Levandoski; Eli Cortez,The use of big data in a business revolves around a monitor-mine-manage (M3) loop: datais monitored in real-time; while mined insights are used to manage the business and derivevalue. While mining has traditionally been performed offline; recent years have seen anincreasing need to perform all phases of M3 in real-time. A stream processing engine (SPE)enables such a seamless M3 loop for applications such as targeted advertising;recommender systems; risk analysis; and call-center analytics. However; these M3applications require the SPE to maintain massive amounts of state in memory; leading toresource usage skew: memory is scarce and over-utilized; whereas CPU and I/O are under-utilized. In this paper; we propose a novel solution to scaling SPEs for memory-bound M3applications that leverages natural access skew in data-parallel subqueries; where a …,Data Engineering (ICDE); 2016 IEEE 32nd International Conference on,2016,1
Trill: Engineering a Library for Diverse Analytics.,Badrish Chandramouli; Jonathan Goldstein; Mike Barnett; James F Terwilliger,Abstract Trill is a streaming query processor that fulfills three requirements to serve thediverse big data analytics space:(1) Query Model: Trill is based on the tempo-relationalmodel that enables it to handle streaming and relational queries with early results; acrossthe latency spectrum from real-time to offline;(2) Fabric and Language Integration: Trill isarchitected as a high-level language library that supports rich data-types and user libraries;and integrates well with existing distribution fabrics and applications; and (3) Performance:Trill's throughput is high across the latency spectrum. For streaming data; Trill's throughput is2-4 orders of magnitude higher than comparable traditional streaming engines. For offlinerelational queries; Trill's throughput is comparable to modern columnar database systems.Trill uses a streaming batched-columnar data representation with a new dynamic …,IEEE Data Eng. Bull.,2015,1
Physically Independent Stream Merging,Badrish Chandramouli; David Maier; Jonathan Goldstein,A facility for merging equivalent data streams can support multiple capabilities in a datastream management system (DSMS); such as query-plan switching and high availability.One can logically view a data stream as a temporal table of events; each associated with alifetime (time interval) over which the event contributes to output. In many applications; the"same" logical stream may present itself physically in multiple physical forms; for example;due to disorder arising in transmission or from combining multiple sources; andmodifications of earlier events. Merging such streams correctly is challenging when thestreams may differ physically in timing; order; and composition. This paper introduces a newstream operator called Logical Merge (LMerge) that takes multiple logically consistentstreams as input and outputs a single stream that is compatible with all of them. LMerge …,Data Engineering (ICDE); 2012 IEEE 28th International Conference on,2012,1
Efficient Sorting for a Stream Processing Engine,*,Abstract The techniques and systems described herein are directed to incremental sorting ina stream processing engine. For example; because of network delays; streaming data canbe received at a stream processing engine that is out-of-order with respect to the timestampof the event generation. Streaming data can be incrementally sorted by partitioning eventsinto ordered runs; which provide intermediate arrays of ordered elements. Upon anassertion of a punctuation event (eg; a progress indicator); partial runs can be output andmerged to form sorted streaming data. Further; the sorted streaming data can be used toprovide speculative outputs based on speculation latencies; which improves throughput andcompleteness of processing on the streaming data.,*,2017,*
Digital Signal Processing Over Data Streams,*,The techniques and systems described herein are directed to providing deep integration ofdigital signal processing (DSP) operations with a general-purpose query processor. Thetechniques and systems provide a unified query language for processing tempo-relationaland signal data; provide mechanisms for defining DSP operators; and support incrementalcomputation in both offline and online analysis. The techniques and systems includereceiving streaming data; aggregating and performing uniformity processing to generate auniform signal; and storing the uniform signal in a batched columnar representation. Datacan be copied from the batched columnar representation to a circular buffer; where DSPoperations are applied to the data. Incremental processing can avoid redundant processing.Improvements to the functioning of a computer are provided by reducing an amount of …,*,2017,*
Modeling resiliency strategies for streaming queries,*,Costs associated with deploying a streaming query according to one or more resiliencystrategies given a particular service level agreement (SLA) specification are modeled toenable selection and/or recommendation of a particular resiliency strategy. A baseline costmodel represents costs associated with deploying the streaming query non-resiliently. Foreach of any number of resiliency strategies; a resiliency model represents additional costsassociated with deploying the streaming query according to a particular resiliency strategy.,*,2017,*
High Performance Query Processing and Data Analytics,*,High performance query processing and data analytics can be performed acrossarchitecturally diverse scales; such as single core; multi-core and/or multi-nodes. The highperformance query processing and data analytics can include a separation of querycomputation; keying data; and data movement and parallel computation; thereby enhancingthe capabilities of the query processing and data analytics; while allowing the specificationof complex forms of data parallel computation that may execute across real-time and offline.The decoupling of data movement and parallel computation; as described herein canimprove query processing and data analytics speed; can provide for the optimization ofsearches in a plurality of computing environments; and can provide the ability to searchthrough a larger space of execution plans.,*,2017,*
Enabling Deep Analytics in Stream Processing Systems,Milos Nikolic; Badrish Chandramouli; Jonathan Goldstein,Abstract Real-time applications often analyze data coming from sensor networks usingrelational and domain-specific operations such as signal processing and machine learningalgorithms. To support such increasingly important scenarios; many data managementsystems integrate with numerical frameworks like R. Such solutions; however; incursignificant performance penalties as relational engines and numerical tools operate onfundamentally different data models with expensive inter-communication mechanisms. Inaddition; none of these solutions supports efficient real-time and incremental analysis. In thiswork; we advocate a deep integration of domain-specific operations into general-purposequery processors with the goal of providing unified query and data models for both onlineand offline processing. Our proof-of-concept system tightly integrates relational and digital …,British International Conference on Databases,2017,*
Mison: a fast JSON parser for data analytics,Yinan Li; Nikos R Katsipoulakis; Badrish Chandramouli; Jonathan Goldstein; Donald Kossmann,Abstract The growing popularity of the JSON format has fueled increased interest in loadingand processing JSON data within analytical data processing systems. However; in manyapplications; JSON parsing dominates performance and cost. In this paper; we present anew JSON parser called Mison that is particularly tailored to this class of applications; bypushing down both projection and filter operators of analytical queries into the parser. Toachieve these features; we propose to deviate from the traditional approach of buildingparsers using finite state machines (FSMs). Instead; we follow a two-level approach thatenables the parser to jump directly to the correct position of a queried field without having toperform expensive tokenizing steps to find the field. At the upper level; Mison speculativelypredicts the logical locations of queried fields based on previously seen patterns in a …,Proceedings of the VLDB Endowment,2017,*
Progressive query computation using streaming architectures,*,The described implementations relate to processing of electronic data. One implementationis manifest as a technique that can include obtaining a relational query that references oneor more data items and associating progress intervals with the data items. The techniquecan also include converting the relational query into a corresponding streaming query; andproviding the streaming query and the data items with the progress intervals to a streamengine that produces incremental results of the query. For example; the progress intervalscan be based on row numbers of a relational database table. The progress intervals can beused to define event lifetimes of streaming events that are provided as inputs to the streamengine.,*,2017,*
Complex event processor for historic/live/replayed data,*,A complex event processor is described which has a communications interface configured toretrieve event data by pulling it from one or more sources and to receive at least one liveevent stream pushed to the interface. An event processing pipeline connected to thecommunications interface comprises a plurality of operator nodes connected between thecommunications interface and a combiner node which is a node configured to combineevent data from the source and from the live event stream. The communications interface isconfigured to retrieve events from the source and to push the events retrieved from thesource along the event processing pipeline towards the combiner node. Thecommunications interface is configured to retrieve and push the retrieved events only inresponse to request messages passed in an upstream direction from the combiner node …,*,2017,*
Progressive query computation using streaming architectures,*,The described implementations relate to processing of electronic data. One implementationis manifest as a technique that can include obtaining a relational query that references oneor more data items and associating progress intervals with the data items. The techniquecan also include converting the relational query into a corresponding streaming query; andproviding the streaming query and the data items with the progress intervals to a streamengine that produces incremental results of the query. For example; the progress intervalscan be based on row numbers of a relational database table. The progress intervals can beused to define event lifetimes of streaming events that are provided as inputs to the streamengine.,*,2017,*
Shrink: prescribing resiliency solutions for streaming,Badrish Chandramouli; Jonathan Goldstein,Abstract Streaming query deployments make up a vital part of cloud oriented applications.They vary widely in their data; logic; and statefulness; and are typically executed in multi-tenant distributed environments with varying uptime SLAs. In order to achieve these SLAs;one of a number of proposed resiliency strategies is employed to protect against failure. Thispaper has introduced the first; comprehensive; cloud friendly comparison between differentresiliency techniques for streaming queries. In this paper; we introduce models whichcapture the costs associated with different resiliency strategies; and through a series ofexperiments which implement and validate these models; show that (1) there is no singleresiliency strategy which efficiently handles most streaming scenarios;(2) the optimizationspace is too complex for a person to employ a" rules of thumb" approach; and (3) there …,Proceedings of the VLDB Endowment,2017,*
Dynamic pattern matching over ordered and disordered data streams,*,Architecture introduces a new pattern operator referred to as called an augmented transitionnetwork (ATN); which is a streaming adaptation of non-reentrant; fixed-state ATNs fordynamic patterns. Additional user-defined information is associated with automaton statesand is accessible to transitions during execution. ATNs are created that directly modelcomplex pattern continuous queries with arbitrary cycles in a transition graph. Thearchitecture can express the desire to ignore some events during pattern detection; and canalso detect the absence of data as part of a pattern. The architecture facilitates efficientsupport for negation; ignorable events; and state cleanup based on predicate punctuations.,*,2016,*
Merging of sorted lists using array pair,*,The formulation of a merged sorted list from multiple input sorted lists in multiple phasesusing an array pair. Initially; the first array is contiguously populated with the input sortedlists. In the first phase; the first and second input sorted lists are merged into a firstintermediary merged list within the second array. Each subsequent phase merges a priorintermediary merged list resulting from the prior phase and; a next input sorted list in the firstarray to generate a next intermediary merged list; or a merged sorted list if there or no furtherinput in the first array. The intermediary merged lists alternate between the first array and thesecond array from one phase to the next phase.,*,2016,*
Merging of sorted lists using array pair,*,The formulation of a merged sorted list from multiple input sorted lists in multiple phasesusing an array pair. Initially; the first array is populated with the input sorted lists. In the firstphase; the first and second input sorted lists are merged into a first intermediary merged listwithin the second array. Each subsequent phase merges a prior intermediary merged listresulting from the prior phase and; a next input sorted list in the first array to generate a nextintermediary merged list; or a merged sorted list if there or no further input in the first array.The intermediary merged lists alternate between the first array and the second array fromone phase to the next phase.,*,2016,*
Quill: efficient; transferable; and rich analytics at scale,Badrish Chandramouli; Raul Castro Fernandez; Jonathan Goldstein; Ahmed Eldawy; Abdul Quamar,Abstract This paper introduces Quill (stands for a quadrillion tuples per day); a library anddistributed platform for relational and temporal analytics over large datasets in the cloud.Quill exposes a new abstraction for parallel datasets and computation; calledShardedStreamable. This abstraction provides the ability to express efficient distributedphysical query plans that are transferable; ie; movable from offline to real-time and viceversa. ShardedStreamable decouples incremental query logic specification; a small but richset of data movement operations; and keying; this allows Quill to express a broad space ofplans with complex querying functionality; while leveraging existing temporal libraries suchas Trill. Quill's layered architecture provides a careful separation of responsibilities withindependently useful components; while retaining high performance. We built Quill for the …,Proceedings of the VLDB Endowment,2016,*
Merging of sorted lists using array pair,*,The formulation of a merged sorted list from multiple input sorted lists in multiple phasesusing an array pair. Initially; the first array is contiguously populated with the input sortedlists. In the first phase; the first and second input sorted lists are merged into a firstintermediary merged list within the second array. Each subsequent phase merges a priorintermediary merged list resulting from the prior phase and; a next input sorted list in the firstarray to generate a next intermediary merged list; or a merged sorted list if there or no furtherinput in the first array. The intermediary merged lists alternate between the first array and thesecond array from one phase to the next phase.,*,2016,*
Making Sense of Temporal Queries with Interactive Visualization,Leilani Battle; Danyel Fisher; Robert DeLine; Mike Barnett; Badrish Chandramouli; Jonathan Goldstein,Abstract As real-time monitoring and analysis become increasingly important; researchersand developers turn to data stream management systems (DSMS's) for fast; efficient ways topose temporal queries over their datasets. However; these systems are inherently complex;and even database experts find it difficult to understand the behavior of DSMS queries. Tohelp analysts better understand these temporal queries; we developed StreamTrace; aninteractive visualization tool that breaks down how a temporal query processes a givendataset; step-by-step. The design of StreamTrace is based on input from expert DSMS users;we evaluated the system with a lab study of programmers who were new to streamingqueries. Results from the study demonstrate that StreamTrace can help users to verify thatqueries behave as expected and to isolate the regions of a query that may be causing …,Proceedings of the 2016 CHI Conference on Human Factors in Computing Systems,2016,*
End-to-End Support for Joins in Large-Scale Publish/Subscribe Systems,J Yang; Badrish Chandramouli,*,*,2008,*
Unifying databases and Internet-scale publish/subscribe,Badrish Chandramouli,Abstract With the advent of Web 2.0 and the Digital Age; we are witnessing anunprecedented increase in the amount of information collected; and in the number of usersinterested in different types of information. This growth means that traditional techniques;where users poll data sources for information of interest; are no longer sufficient. Polling toofrequently does not scale; while polling less often may result in users missing importantupdates. The alternative push technology has long been the goal of publish/subscribesystems; which proactively push updates (events) to users with matching interests(expressed as subscriptions). The push model is better suited for ensuring scalability andtimely delivery of updates; important in many application domains: personal (eg; RSS feeds;online auctions); financial (eg; portfolio monitoring); security (eg; reporting network …,*,2008,*
Query Suspend and Resume,C Bond; S Babu; J Yang; Badrish Chandramouli,*,*,2007,*
On Suspending and Resuming Dataflows,C Bond; S Babu; J Yang; Badrish Chandramouli,*,*,2007,*
Value-Based Notification Conditions in Large-Scale Publish/Subscribe Systems,J Phillips; J Yang; Badrish Chandramouli,*,*,2007,*
On the Database/Network Interface in Large-Scale Publish/Subscribe Systems,J Xie; J Yang; Badrish Chandramouli,*,*,2006,*
Distributed Network Querying with Bounded Approximate Caching,J Yang; A Vahdat; Badrish Chandramouli,*,*,2006,*
Data Engineering,Michael Barry Ramasamy; Andrew Jorgensen; Christopher Kellogg; Neng Lu; Bill Graham; Jingwei Wu; Paris Carbone; Stephan Ewen; Seif Haridi; Asterios Katsifodimos; Volker Markl; Kostas Tzoumas; Michael J Franklin; Sailesh Krishnamurthy; Amit Bhat; Madhu Kumar; Robert Lerche; Kim Macpherson; Badrish Chandramouli; Jonathan Goldstein; Mike Barnett; James F Terwilliger; Yuanzhen Ji Heinze; Lars Roediger; Valerio Pappalardo; Andreas Meister; Zbigniew Jerzak; Christof Fetzer; Elke A Rundensteiner; Olga Poppe; Chuan Lei; Medhabi Ray; Lei Cao; Yingmei Qi; Mo Liu; Di Wang; Stan Zdonik; John Meehan; Cansu Aslantas; Michael Stonebraker; Kristin Tufte; Chris Giossi; Hong Quach; Michael Grossniklaus; Marc H Scholl; Andreas Weiler,This December; 2015 issue of the Bulletin is; as some of you may notice; being published inJuly of 2016; after the March and June; 2016 issues have been published. Put simply; theissue is late; and the March and June issues were published in their correct time slots. Theformatting of the issue; and the surrounding editorial material; eg the inside front cover andcopyright notice; are set to the December; 2015 timeframe. Indeed; the only mention of thisinverted ording of issues is in this paragraph. Things do not always go as planned. However;I am delighted that the current issue is being published; and I have high confidence that youwill enjoy reading about next-generation stream processing; the topic of the issue.,*,*,*
Johann-Christoph Freytag; Rico Bergmann; and Lukas Dölle,Morten Middelfart; Badrish Chandramouli; Qiming Chen; Meichun Hsu; Malu Castellanos; Yannis Sotiropoulos; Damianos Chatziantoniou; Adriana Matei; Kuo-Ming Chao; Nick Godwin; Oliver Kennedy; Ying Yang; Jan Chomicki; Ronny Fehling; Zhen Hua Liu; Dieter Gawlick; Dilshod Ibragimov; Katja Hose; Torben Bach Pedersen; Esteban Zimányi; Ahmed Khan Leghari; Martin Wolf; Yongluan Zhou; Masahiro Oke; Hideyuki Kawashima; Michael Rudolf; Hannes Voigt; Christof Bornhövd; Wolfgang Lehner; Karsten Schmidt; Sebastian Bächle; Philipp Scholl; Georg Nold,Query Adaptation and Privacy for Real-Time Business Intelligence (Keynote Paper) . . . . . . . .… Johann-Christoph Freytag; Rico Bergmann; and LukasDölle … The Inverted Data Warehouse Based on TARGIT Xbone: How the Biggest of Data CanBe Mined by “The Little Guy” (Invited Paper) … Building Engines and Platformsfor the Big Data Age (Invited Paper) … Backtrack-Based and Window-Oriented OptimisticFailure Recovery in Distributed Stream Processing (Invited Paper) …Qiming Chen; Meichun Hsu; and Malu Castellanos … LinkViews: An Integration Frameworkfor Relational and Stream Systems … Adriana Matei; Kuo-Ming Chao; and Nick Godwin …Oliver Kennedy; Ying Yang; Jan Chomicki; Ronny Fehling; Zhen Hua Liu; and Dieter Gawlick… Towards Exploratory OLAP Over Linked Open Data – A Case Study. . . . . . 114 …,*,*,*
ICE: Managing Cold State for Streaming Big Data Applications,Badrish Chandramouli; Justin Levandoski; Eli Vilarinho,*,*,*,*
Making Sense of Temporal Queries with Fine-Grained Provenance,Leilani Battle; Danyel Fisher; Mike Barnett; Badrish Chandramouli; Rob DeLine; Jonathan Goldstein,ABSTRACT As real-time monitoring and analysis becomes increasingly popular; moreresearchers and developers are turning to data stream management systems (DSMS's) forfast; efficient ways to pose temporal questions over their datasets. However; these systemsare inherently complex; and even individuals with database expertise find it difficult tounderstand the behavior of DSMS queries. To help analysts better understand their temporalDSMS queries; we developed a visualization tool that illustrates how a temporal querymanipulates a given dataset; step-by-step. StreamTrace produces an interactivevisualization that allows the user to audit their queries. We incorporated feedback from threeexpert DSMS users throughout our design process.,*,*,*
QONCH: A System for Distributed Network Querying using Bounded Approximate Caching,Badrish Chandramouli; Jun Yang; Amin Vahdat,ABSTRACT As networks continue to grow in size and complexity; distributed networkmonitoring and resource querying are becoming increasingly difficult and costly. We havedesigned; built; and evaluated a scalable infrastructure for answering queries overdistributed measurements; while reducing costs (in terms of both network traffic and querylatency) and maximizing precision of results. In this infrastructure; each network node ownsa set of numerical measurement values and actively maintains bounds on these valuescached at other nodes. We can then answer queries approximately; using bounds fromnearby caches to avoid contacting the owners directly. We argue that approximate resultsare acceptable for our target applications; as long as errors are quantified precisely andreported to the user; and there is a mechanism for the user to obtain results with a …,*,*,*
Supporting Better Scalability and Richer Subscription Models in Wide-Area Publish/Subscribe,Badrish Chandramouli,Abstract With the advent of Web 2.0 and the Digital Age; we are witnessing anunprecedented increase in the amount of information collected; and in the number of usersinterested in different types of information. This growth means that traditional techniques;where interested users poll data sources for information they are interested in; are no longersufficient. Polling too frequently does not scale; while polling less often may result in usersmissing important updates. The alternative push technology has long been the goal ofpublish/subscribe systems; which proactively push updates (events) to users with matchinginterests (expressed as subscriptions). The push model is better suited for ensuringscalability and timely delivery of updates; important in many application domains: personal(eg; RSS feeds; online auctions); financial (eg; portfolio monitoring); security (eg …,*,*,*
