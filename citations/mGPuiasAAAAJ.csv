Scheduling threads for constructive cache sharing on CMPs,Shimin Chen; Phillip B Gibbons; Michael Kozuch; Vasileios Liaskovitis; Anastassia Ailamaki; Guy E Blelloch; Babak Falsafi; Limor Fix; Nikos Hardavellas; Todd C Mowry; Chris Wilkerson,Abstract In chip multiprocessors (CMPs); limiting the number of offchip cache misses iscrucial for good performance. Many multithreaded programs provide opportunities forconstructive cache sharing; in which concurrently scheduled threads share a largelyoverlapping working set. In this paper; we compare the performance of two state-of-the-artschedulers proposed for fine-grained multithreaded programs: Parallel Depth First (PDF);which is specifically designed for constructive cache sharing; and Work Stealing (WS); whichis a more traditional design. Our experimental results indicate that PDF scheduling yields a1.3--1.6 X performance improvement relative to WS for several fine-grain parallelbenchmarks on projected future CMP configurations; we also report several issues that maylimit the advantage of PDF in certain applications. These results also indicate that PDF …,Proceedings of the nineteenth annual ACM symposium on Parallel algorithms and architectures,2007,196
Improving hash join performance through prefetching,Shimin Chen; Anastassia Ailamaki; Phillip B Gibbons; Todd C Mowry,Abstract Hash join algorithms suffer from extensive CPU cache stalls. This article shows thatthe standard hash join algorithm for disk-oriented databases (ie GRACE) spends over80&percnt; of its user time stalled on CPU cache misses; and explores the use of CPU cacheprefetching to improve its cache performance. Applying prefetching to hash joins iscomplicated by the data dependencies; multiple code paths; and inherent randomness ofhashing. We present two techniques; group prefetching and software-pipelined prefetching;that overcome these complications. These schemes achieve 1.29--4.04 X speedups for thejoin phase and 1.37--3.49 X speedups for the partition phase over GRACE and simpleprefetching approaches. Moreover; compared with previous cache-aware approaches (iecache partitioning); the schemes are at least 36&percnt; faster on large relations and do …,ACM Transactions on Database Systems (TODS),2007,177
Rethinking Database Algorithms for Phase Change Memory.,Shimin Chen; Phillip B Gibbons; Suman Nath,*,CIDR,2011,172
Improving index performance through prefetching,Shimin Chen; Phillip B Gibbons; Todd C Mowry,Abstract This paper proposes and evaluate Prefetching B+-Trees (pB+-Trees); which useprefetching to accelerate two important operations on B+-Tree indices: searches and rangescans. To accelerate searches; pB+-Trees use prefetching to effectively create wider nodesthan the natural data transfer size: eg; eight vs. one cache lines or disk pages. These widernodes reduce the height of the B+-Tree; thereby decreasing the number of expensivemisses when going from parent to child without significantly increasing the cost of fetching agiven node. Our results show that this technique speeds up search and update times by afactor of 1.21-1.5 for main-memory B+-Trees. In addition; it outperforms and iscomplementary to “Cache-Sensitive B+-Trees.” To accelerate range scans; pB+-Treesprovide arrays of pointers to their leaf nodes. These allow the pB+-Tree to prefetch …,Proceedings of the 2001 ACM SIGMOD International Conference on Management of Data,2001,167
Flexible hardware acceleration for instruction-grain program monitoring,Shimin Chen; Michael Kozuch; Theodoros Strigkos; Babak Falsafi; Phillip B Gibbons; Todd C Mowry; Vijaya Ramachandran; Olatunji Ruwase; Michael Ryan; Evangelos Vlachos,Instruction-grain program monitoring tools; which check and analyze executing programs atthe granularity of individual instructions; are invaluable for quickly detecting bugs andsecurity attacks and then limiting their damage (via containment and/or recovery).Unfortunately; their fine-grain nature implies very high monitoring overheads for software-only tools; which are typically based on dynamic binary instrumentation. Previous hardwareproposals either focus on mechanisms that target specific bugs or address only the cost ofbinary instrumentation. In this paper; we propose a flexible hardware solution foraccelerating a wide range of instruction-grain monitoring tools. By examining a number ofdiverse tools (for memory checking; security tracking; and data race detection); we identifythree significant common sources of overheads and then propose three novel hardware …,ACM SIGARCH Computer Architecture News,2008,138
Map-reduce meets wider varieties of applications,Shimin Chen; Steven W Schlosser,ABSTRACT Recent studies and industry practices build data-center-scale computer systemsto meet the high storage and processing demands of data-intensive and compute-intensiveapplications; such as web searches. The Map-Reduce programming model is one of themost popular programming paradigms on these systems. In this paper; we report ourexperiences and insights gained from implementing three data-intensive and compute-intensive tasks that have different characteristics from previous studies: a large-scalemachine learning computation; a physical simulation task; and a digital media processingtask. We identify desirable features and places to improve in the Map-Reduce model. Ourgoal is to better understand such large-scale computation and data processing in order todesign better supports for them.,Intel Research Pittsburgh; Tech. Rep. IRP-TR-08-05,2008,138
Fractal prefetching B+-trees: Optimizing both cache and disk performance,Shimin Chen; Phillip B Gibbons; Todd C Mowry; Gary Valentin,Abstract B+-Trees have been traditionally optimized for I/O performance with disk pages astree nodes. Recently; researchers have proposed new types of B+-Trees optimized for CPUcache performance in main memory environments; where the tree node sizes are one or afew cache lines. Unfortunately; due primarily to this large discrepancy in optimal node sizes;existing disk-optimized B+-Trees suffer from poor cache performance while cache-optimizedB+-Trees exhibit poor disk performance. In this paper; we propose fractal prefetching B+-Trees (fpB+-Trees); which embed" cache-optimized" trees within" disk-optimized" trees; inorder to optimize both cache and I/O performance. We design and evaluate two approachesto breaking disk pages into cache-optimized nodes: disk-first and cache-first. Theseapproaches are somewhat biased in favor of maximizing disk and cache performance …,Proceedings of the 2002 ACM SIGMOD international conference on Management of data,2002,126
Provably good multicore cache performance for divide-and-conquer algorithms,Guy E Blelloch; Rezaul A Chowdhury; Phillip B Gibbons; Vijaya Ramachandran; Shimin Chen; Michael Kozuch,Abstract This paper presents a multicore-cache model that reflects the reality that multicoreprocessors have both per-processor private (L 1) caches and a large shared (L 2) cache onchip. We consider a broad class of parallel divide-and-conquer algorithms and present anew on-line scheduler; CONTROLLED-PDF; that is competitive with the standard sequentialscheduler in the following sense. Given any dynamically unfolding computation DAG fromthis class of algorithms; the cache complexity on the multicore-cache model under our newscheduler is within a constant factor of the sequential cache complexity for both L 1 and L 2;while the time complexity is within a constant factor of the sequential time complexity dividedby the number of processors p. These are the first such asymptotically-optimal results for anymulticore model. Finally; we show that a separator-based algorithm for sparse-matrix …,Proceedings of the nineteenth annual ACM-SIAM symposium on Discrete algorithms,2008,119
FlashLogging: exploiting flash devices for synchronous logging performance,Shimin Chen,Abstract Synchronous transactional logging is the central mechanism for ensuring datapersistency and recoverability in database systems. Unfortunately; magnetic disks are ill-suited for the small sequential write pattern of synchronous logging. Alternative solutions(eg; backup servers or sophisticated battery-backed write caches in high-end disk arrays)are either expensive or complicated. In this paper; we exploit flash devices for synchronouslogging based on the observation that flash devices support small sequential writes well.Comparing a wide variety of flash devices; we find that USB flash drives are a good matchfor this task because of its unique characteristics: widely available USB ports; hot-plugcapability useful for coping with flash wear; and low price so that multiple drives areaffordable. We propose FlashLogging; a logging solution that exploits multiple (USB) …,Proceedings of the 2009 ACM SIGMOD International Conference on Management of data,2009,113
Log-based architectures for general-purpose monitoring of deployed code,Shimin Chen; Babak Falsafi; Phillip B Gibbons; Michael Kozuch; Todd C Mowry; Radu Teodorescu; Anastassia Ailamaki; Limor Fix; Gregory R Ganger; Bin Lin; Steven W Schlosser,Abstract Runtime monitoring tools are invaluable for detecting various types of bugs; in bothsequential and multi-threaded programs. However; these tools often slow down themonitored program by an order of magnitude or more [4]; implying that the tools are ill-suitedfor always-on monitoring of deployed code. Fortunately; the emergence of chipmultiprocessors as a dominant computing platform means that resources are available on-chip to assist in monitoring tasks. In this brief note; we advocate Log-Based Architectures(LBA) that exploit such on-chip resources in order to dramatically reduce the overhead ofruntime program monitoring. Specifically; we propose adding hardware support for logging amain program's trace and delivering it to another (otherwise idle) processing core forinspection. A life-guard program running on this other core executes the desired …,Proceedings of the 1st workshop on Architectural and system support for improving software dependability,2006,69
Parallelizing dynamic information flow tracking,Olatunji Ruwase; Phillip B Gibbons; Todd C Mowry; Vijaya Ramachandran; Shimin Chen; Michael Kozuch; Michael Ryan,Abstract Dynamic information flow tracking (DIFT) is an important tool for detecting commonsecurity attacks and memory bugs. A DIFT tool tracks the flow of information through amonitored program's registers and memory locations as the program executes; detectingand containing/fixing problems on-the-fly. Unfortunately; sequential DIFT tools are quiteslow; and DIFT is quite challenging to parallelize. In this paper; we present a new approachto parallelizing DIFT-like functionality. Extending our recent work on accelerating sequentialDIFT; we consider a variant of DIFT that tracks the information flow only through unaryoperations relaxed DIFT; and yet makes sense for detecting security attacks and memorybugs. We present a parallel algorithm for relaxed DIFT; based on symbolic inheritancetracking; which achieves linear speed-up asymptotically. Moreover; we describe …,Proceedings of the twentieth annual symposium on Parallelism in algorithms and architectures,2008,65
Persistent b+-trees in non-volatile main memory,Shimin Chen; Qin Jin,Abstract Computer systems in the near future are expected to have< u> N</u> on-< u> V</u>olatile< u> M</u> ain< u> M</u> emory (NVMM); enabled by a new generation of< u> N</u>on-< u> V</u> olatile< u> M</u> emory (NVM) technologies; such as Phase ChangeMemory (PCM); STT-MRAM; and Memristor. The non-volatility property has the promise topersist in-memory data structures for instantaneous failure recovery. However; realizingsuch promise requires a careful design to ensure that in-memory data structures are inknown consistent states after failures. This paper studies persistent in-memory B+-Trees asB+-Trees are widely used in database and data-intensive systems. While traditionaltechniques; such as undo-redo logging and shadowing; support persistent B+-Trees; we findthat they incur drastic performance overhead because of extensive NVM writes and CPU …,Proceedings of the VLDB Endowment,2015,64
TPC-E vs. TPC-C: characterizing the new TPC-E benchmark via an I/O comparison study,Shimin Chen; Anastasia Ailamaki; Manos Athanassoulis; Phillip B Gibbons; Ryan Johnson; Ippokratis Pandis; Radu Stoica,Abstract TPC-E is a new OLTP benchmark recently approved by the Transaction ProcessingPerformance Council (TPC). In this paper; we compare TPC-E with the familiar TPCCbenchmark in order to understand the behavior of the new TPC-E benchmark. In particular;we compare the I/O access patterns of the two benchmarks by analyzing two OLTP disktraces. We find that (i) TPC-E is more read intensive with a 9.7: 1 I/O read to write ratio; whileTPC-C sees a 1.9: 1 read-to-write ratio; and (ii) although TPC-E uses pseudo-realistic data;TPC-E's I/O access pattern is as random as TPC-C. The latter suggests that like TPC-C; TPC-E can benefit from SSDs; which have superior random I/O support. To verify this; we replayboth disk traces on an Intel X25-E SSD and see dramatic improvements for both TPC-C andTPC-E.,ACM SIGMOD Record,2011,51
ParaLog: Enabling and accelerating online parallel monitoring of multithreaded applications,Evangelos Vlachos; Michelle L Goodstein; Michael A Kozuch; Shimin Chen; Babak Falsafi; Phillip B Gibbons; Todd C Mowry,Abstract Instruction-grain lifeguards monitor the events of a running application at the levelof individual instructions in order to identify and help mitigate application bugs and securityexploits. Because such lifeguards impose a 10-100X slowdown on existing platforms;previous studies have proposed hardware designs to accelerate lifeguard processing.However; these accelerators are either tailored to a specific class of lifeguards or suitableonly for monitoring singlethreaded programs. We present ParaLog; the first design of asystem enabling fast online parallel monitoring of multithreaded parallel applications.ParaLog supports a broad class of software-defined lifeguards. We show how three existingaccelerators can be enhanced to support online multithreaded monitoring; dramaticallyreducing lifeguard overheads. We identify and solve several challenges in monitoring …,ACM SIGARCH Computer Architecture News,2010,45
i2MapReduce: Incremental MapReduce for Mining Evolving Big Data,Yanfeng Zhang; Shimin Chen; Qiang Wang; Ge Yu,As new data and updates are constantly arriving; the results of data mining applicationsbecome stale and obsolete over time. Incremental processing is a promising approach torefreshing mining results. It utilizes previously saved states to avoid the expense of re-computation from scratch. In this paper; we propose i2MapReduce; a novel incrementalprocessing extension to MapReduce; the most widely used frameworkfor mining big data.Compared with the state-of-the-art work on Incoop; i2MapReduce (i) performs key-value pairlevel incremental processing rather than task level re-computation;(ii) supports not only one-step computation but also more sophisticated iterative computation; which is widely used indata mining applications; and (iii) incorporates a set of novel techniques to reduce I/Ooverhead for accessing preserved fine-grain computation states. We evaluate …,arXiv preprint arXiv:1501.04854,2015,39
Location-aware MapReduce in virtual cloud,Yifeng Geng; Shimin Chen; YongWei Wu; Ryan Wu; Guangwen Yang; Weimin Zheng,MapReduce is an important programming model for processing and generating large datasets in parallel. It is commonly applied in applications such as web indexing; data mining;machine learning; etc. As an open-source implementation of MapReduce; Hadoop is nowwidely used in industry. Virtualization; which is easy to configure and economical to use;shows great potential for cloud computing. With the increasing core number in a CPU andinvolving of virtualization technique; one physical machine can hosts more and more virtualmachines; but I/O devices normally do not increase so rapidly. As MapReduce system isoften used to running I/O intensive applications; decreasing of data redundancy and loadunbalance; which increase I/O interference in virtual cloud; come to be serious problems.This paper builds a model and defines metrics to analyze the data allocation problem in …,2011 International Conference on Parallel Processing,2011,33
System and method for improving index performance through prefetching,*,The present invention provides a prefetch system for use with a cache memory associatedwith a database employing indices. In one embodiment; the prefetch system includes asearch subsystem configured to prefetch cache lines containing an index of a node of a treestructure associated with the database. Additionally; the prefetch system also includes ascan subsystem configured to prefetch cache lines based on an index prefetch distancebetween first and second leaf nodes of the tree structure.,*,2004,30
Flash in a DBMS: Where and How?,Manos Athanassoulis; Anastasia Ailamaki; Shimin Chen; Phillip B Gibbons; Radu Stoica,Abstract Over the past decade; new solid state storage technologies; with flash being themost mature one; have become increasingly popular. Such technologies store data durably;and can alleviate many handicaps of hard disk drives (HDDs). Nonetheless; they have verydifferent characteristics compared to HDDs; making it challenging to integrate suchtechnologies into data intensive systems; such as database management systems (DBMS);that rely heavily on underlying storage behaviors. In this paper; we ask the question: Whereand how will flash be exploited in a DBMS? We describe techniques for making effective useof flash in three contexts:(i) as a log device for transaction processing on memory-residentdata;(ii) as the main data store for transaction processing; and (iii) as an update cache forHDD-resident data warehouses.,IEEE Data Eng. Bull.,2010,28
MaSM: Efficient online updates in data warehouses,Manos Athanassoulis; Shimin Chen; Anastasia Ailamaki; Phillip B Gibbons; Radu Stoica,Abstract Data warehouses have been traditionally optimized for read-only queryperformance; allowing only offline updates at night; essentially trading off data freshness forperformance. The need for 24x7 operations in global markets and the rise of online andother quickly-reacting businesses make concurrent online updates increasingly desirable.Unfortunately; state-of-the-art approaches fall short of supporting fast analysis queries overfresh data. The conventional approach of performing updates in place can dramatically slowdown query performance; while prior proposals using differential updates either requirelarge in-memory buffers or may incur significant update migration cost. This paper presentsa novel approach for supporting online updates in data warehouses that overcomes thelimitations of prior approaches; by making judicious use of available SSDs to cache …,Proceedings of the 2011 ACM SIGMOD International Conference on Management of data,2011,27
Improving logging and recovery performance in phoenix/app,Roger Barga; Shimin Chen; David Lomet,Phoenix/App supports software components whose states are made persistent across asystem crash via redo recovery; replaying logged interactions. Our initial prototype forcelogged all request/reply events resulting from intercomponent method calls and returns. Wedescribe an enhanced prototype that implements:(i) log optimizations to improve normalexecution performance; and (ii) checkpointing to improve recovery performance. Logging isreduced in two ways:(1) we only log information required to remove nondeterminism; andwe only force the log when an event" commits" the state of the component to other parts ofthe system;(2) we introduce new component types that provide our enhanced system withmore information; enabling further reduction in logging. To improve recovery performance;we save the values of the fields of a component to the log in an application" checkpoint" …,Data Engineering; 2004. Proceedings. 20th International Conference on,2004,27
Inspector joins,Shimin Chen; Anastassia Ailamaki; Phillip B Gibbons; Todd C Mowry,Abstract The key idea behind Inspector Joins is that during the I/O partitioning phase of ahash-based join; we have the opportunity to look at the actual data itself and then use thisknowledge in two ways:(1) to create specialized indexes; specific to the given query on thegiven data; for optimizing the CPU cache performance of the subsequent join phase of thealgorithm; and (2) to decide which join phase algorithm best suits this specific query. Weshow how inspector joins; employing novel statistics and specialized indexes; match orexceed the performance of state-of-the-art cache-friendly hash join algorithms. For example;when run on eight or more processors; our experiments show that inspector joins offer 1.1-1.4 X speedups over these previous algorithms; with the speedup increasing as the numberof processors increases.,Proceedings of the 31st international conference on Very large data bases,2005,26
Decoupled lifeguards: enabling path optimizations for dynamic correctness checking tools,Olatunji Ruwase; Shimin Chen; Phillip B Gibbons; Todd C Mowry,Abstract Dynamic correctness checking tools (aka lifeguards) can detect a wide array ofcorrectness issues; such as memory; security; and concurrency misbehavior; in unmodifiedexecutables at run time. However; lifeguards that are implemented using dynamic binaryinstrumentation (DBI) often slow down the monitored application by 10-50X; while proposalsthat replace DBI with hardware still see 3-8X slowdowns. The remaining overhead is thecost of performing the lifeguard analysis itself. In this paper; we explore compileroptimization techniques to reduce this overhead. The lifeguard software is typicallystructured as a set of event-driven handlers; where the events are individual instructions inthe monitored application's dynamic instruction stream. We propose to decouple thelifeguard checking code from the application that it is monitoring so that the lifeguard …,ACM Sigplan Notices,2010,25
Butterfly analysis: Adapting dataflow analysis to dynamic parallel monitoring,Michelle L Goodstein; Evangelos Vlachos; Shimin Chen; Phillip B Gibbons; Michael A Kozuch; Todd C Mowry,Abstract Online program monitoring is an effective technique for detecting bugs and securityattacks in running applications. Extending these tools to monitor parallel programs ischallenging because the tools must account for inter-thread dependences and relaxedmemory consistency models. Existing tools assume sequential consistency and often slowdown the monitored program by orders of magnitude. In this paper; we present a novelapproach that avoids these pitfalls by not relying on strong consistency models or detailedinter-thread dependence tracking. Instead; we only assume that events in the distant past onall threads have become visible; we make no assumptions on (and avoid the overheads oftracking) the relative ordering of more recent events on other threads. To overcome thepotential state explosion of considering all the possible orderings among recent events …,ACM Sigplan Notices,2010,24
Pr-join: a non-blocking join achieving higher early result rate with statistical guarantees,Shimin Chen; Phillip B Gibbons; Suman Nath,Abstract Online aggregation is a promising solution to achieving fast early responses forinteractive ad-hoc queries that compute aggregates on a large amount of data. Essential tothe success of online aggregation is a good non-blocking join algorithm that enables both (i)high early result rates with statistical guarantees and (ii) fast end-to-end query times. Weanalyze existing non-blocking join algorithms and find that they all provide sub-optimal earlyresult rates; and those with fast end-to-end times achieve them only by further sacrificingtheir early result rates. We propose a new non-blocking join algorithm; Partitionedexpanding Ripple Join (PR-Join); which achieves considerably higher early result rates thanprevious non-blocking joins; while also delivering fast end-to-end query times. PR-Joinperforms separate; ripple-like join operations on individual hash partitions; where the …,Proceedings of the 2010 ACM SIGMOD International Conference on Management of data,2010,22
Flexible hardware acceleration for instruction-grain lifeguards,Shimin Chen; Michael Kozuch; Phillip B Gibbons; Michael Ryan; Theodoros Strigkos; Todd C Mowry; Olatunji Ruwase; Evangelos Vlachos; Babak Falsafi; Vijaya Ramachandran,Instruction-grain lifeguards monitor executing programs at the granularity of individualinstructions to quickly detect bugs and security attacks; but their fine-grain nature incurs highmonitoring overheads. This article identifies three common sources of these overheads andproposes three techniques that together constitute a general-purpose hardware accelerationframework for lifeguards.,Micro; IEEE,2009,18
Database-centric programming for wide-area sensor systems,Shimin Chen; Phillip B Gibbons; Suman Nath,Abstract A wide-area sensor system is a complex; dynamic; resource-rich collection ofInternet-connected sensing devices. In this paper; we propose X-Tree Programming; a noveldatabase-centric programming model for wide-area sensor systems designed to achieve theseemingly conflicting goals of expressiveness; ease of programming; and efficientdistributed execution. To demonstrate the effectiveness of X-Tree Programming in achievingthese goals; we have incorporated the model into IrisNet; a shared infrastructure for wide-area sensing; and developed several widely different applications; including a distributedinfrastructure monitor running on 473 machines worldwide.,International Conference on Distributed Computing in Sensor Systems,2005,18
Log-based architectures: using multicore to help software behave correctly,Shimin Chen; Phillip B Gibbons; Michael Kozuch; Todd C Mowry,Abstract While application performance and power-efficiency are both important; applicationcorrectness is even more important. In other words; if the application is misbehaving; it islittle consolation that it is doing so quickly or power-efficiently. In the Log-BasedArchitectures (LBA) project; we are focusing on a challenging source of applicationmisbehavior: software bugs; including obscure bugs that only cause problems duringsecurity attacks. To help detect and fix software bugs; we have been exploring techniquesfor accelerating dynamic program monitoring tools; which we call" lifeguards". Lifeguardsare typically written today using dynamic binary instrumentation frameworks such asValgrind or Pin. Due to the overheads of binary instrumentation; lifeguards that requireinstructiongrain information typically experience 30X-100X slowdowns; and hence it is …,ACM SIGOPS Operating Systems Review,2011,13
i^2MapReduce: incremental iterative MapReduce,Yanfeng Zhang; Shimin Chen,Abstract Cloud intelligence applications often perform iterative computations (eg;PageRank) on constantly changing data sets (eg; Web graph). While previous studiesextend MapReduce for efficient iterative computations; it is too expensive to perform anentirely new large-scale MapReduce iterative job to timely accommodate new changes tothe underlying data sets. In this paper; we propose i 2 MapReduce to support incrementaliterative computation. We observe that in many cases; the changes impact only a very smallfraction of the data sets; and the newly iteratively converged state is quite close to thepreviously converged state. i 2 MapReduce exploits this observation to save re-computationby starting from the previously converged state; and by performing incremental updates onthe changing data. Our preliminary result is quite promising. i 2 MapReduce sees …,Proceedings of the 2nd International Workshop on Cloud Intelligence,2013,10
Wiki3C: exploiting wikipedia for context-aware concept categorization,Peng Jiang; Huiman Hou; Lijiang Chen; Shimin Chen; Conglei Yao; Chengkai Li; Min Wang,Abstract Wikipedia is an important human generated knowledge base containing over 21million articles organized by millions of categories. In this paper; we exploit Wikipedia for anew task of text mining: Context-aware Concept Categorization. In the task; we focus oncategorizing concepts according to their context. We exploit article link feature and categorystructure in Wikipedia; followed by introducing Wiki3C; an unsupervised and domainindependent concept categorization approach based on context. In the approach; weinvestigate two strategies to select and filter Wikipedia articles for the categoryrepresentation. Besides; a probabilistic model is employed to compute the semanticrelatedness between two concepts in Wikipedia. Experimental evaluation using manuallylabeled ground truth shows that our proposed Wiki3C can achieve a noticeable …,Proceedings of the sixth ACM international conference on Web search and data mining,2013,8
Qmd: exploiting flash for energy efficient disk arrays,Sean M Snyder; Shimin Chen; Panos K Chrysanthis; Alexandros Labrinidis,Abstract Energy consumption for computing devices in general and for data centers inparticular is receiving increasingly high attention; both because of the increasing ubiquity ofcomputing and also because of increasing energy prices. In this work; we propose QMD(Quasi Mirrored Disks) that exploit flash as a write buffer to complement RAID systemsconsisting of hard disks. QMD along with partial on-line mirrors; are a first step towardsenergy proportionality which is seen as the" holy grail" of energy-efficient system design.QMD exhibits significant energy savings of up 31%; as per our evaluation study using realworkloads.,Proceedings of the Seventh International Workshop on Data Management on New Hardware,2011,5
Parallel depth first vs. work stealing schedulers on CMP architectures,Vasileios Liaskovitis; Shimin Chen; Phillip B Gibbons; Anastassia Ailamaki; Guy E Blelloch; Babak Falsafi; Limor Fix; Nikos Hardavellas; Michael Kozuch; Todd C Mowry; Chris Wilkerson,Abstract In chip multiprocessors (CMPs); limiting the number of off-chip cache misses iscrucial for good performance. Many multithreaded programs provide opportunities forconstructive cache sharing; in which concurrently scheduled threads share a largelyoverlapping working set. In this brief announcement; we highlight our ongoing study [4]comparing the performance of two schedulers designed for fine-grained multithreadedprograms: Parallel Depth First (PDF)[2]; which is designed for constructive sharing; andWork Stealing (WS)[3]; which takes a more traditional approach. Overview of schedulers. InPDF; processing cores are allocated ready-to-execute program tasks such that higherscheduling priority is given to those tasks the sequential program would have executedearlier. As a result; PDF tends to co-schedule threads in a way that tracks the sequential …,Proceedings of the eighteenth annual ACM symposium on Parallelism in algorithms and architectures,2006,5
Logs and lifeguards: Accelerating dynamic program monitoring,Shimin Chen; Babak Falsafi; PB Gibbons; M Kozuch; TC Mowry; R Teodorescu; A Ailamaki; L Fix; GR Ganger; SW Schlosser,Abstract Runtime monitoring tools are invaluable for detecting various types of bugs; in bothsequential and multi-threaded programs. However; running one of these tools slows downthe monitored program by an order of magnitude or more; thereby limiting the tool'susefulness. Fortunately; the emergence of chip multiprocessors as a dominant computingplatform means that resources are available on-chip to assist in monitoring tasks. This paperpresents an architecture for exploiting such resources in order to dramatically reduce theoverheads for runtime program monitoring. Specifically; we propose adding hardwaresupport for logging a main program's trace and delivering it to another (otherwise idle)processor for inspection. A lifeguard program running on this other processor executes thedesired monitoring task. Simulation results using three diverse lifeguards (for address …,*,2006,5
Redesigning Database Systems in Light of CPU Cache Prefetching,Shimin Chen,Abstract Computer systems have enjoyed an exponential growth in processor speed for thepast 20 years; while main memory speed has improved only moderately. Today a cachemiss to main memory takes hundreds of processor cycles. Recent studies havedemonstrated that on commercial databases; about 50% or more of execution time inmemory is often wasted due to cache misses. In light of this problem; a number of recentstudies focused on reducing the number of cache misses of database algorithms. In thisthesis; we investigate a different approach: reducing the impact of cache misses through atechnique called cache prefetching. Since prefetching for sequential array accesses hasbeen well studied; we are interested in studying non-contiguous access patterns found intwo classes of database algorithms: the B+-Tree index algorithm and the hash join …,*,2005,5
Efficient and Flexible Index Access in MapReduce.,Zhao Cao; Shimin Chen; Dongzhe Ma; Jianhua Feng; Min Wang,ABSTRACT A popular programming paradigm in the cloud; MapReduce is extensivelyconsidered and used for “big data” analysis. Unfortunately; a great many “big data”applications require capabilities beyond those originally intended by MapReduce; oftenburdening developers to write unnatural non-obvious MapReduce programs so as to twistthe underlying system to meet the requirements. In this paper; we focus on a class of “bigdata” applications that in addition to MapReduce's main data source; require selectiveaccess to one or many data sources; eg; various kinds of indices; knowledge bases; externalcloud services. We propose to extend MapReduce with EFind; an Efficient and Flexibleindex access solution; to better support this class of applications. EFind introduces astandard index access interface to MapReduce so that (i) developers can easily and …,EDBT,2014,4
LogKV: Exploiting Key-Value Stores for Log Processing.,Zhao Cao; Shimin Chen; Feifei Li; Min Wang; Xiaoyang Sean Wang,ABSTRACT Event log processing and analysis play a key role in applications ranging fromsecurity management; IT trouble shooting; to user behavior analysis. Recent years haveseen a rapid growth in system scales and the corresponding rapid increase in the amount oflog event data. At the same time; as logs are found to be a valuable information source; loganalysis tasks have become more sophisticated demanding both interactive exploratoryquery processing and batch computation. Desirable query types include selection with timeranges and value filtering criteria; join within time windows; join between log data andreference tables; and various aggregation types. In such a situation; parallel solutions arenecessary; but existing parallel and distributed solutions either support limited query typesor perform only batch computations on logs. With a system called LogKV; this paper …,CIDR,2013,4
Chrysalis analysis: incorporating synchronization arcs in dataflow-analysis-based parallel monitoring,Michelle L Goodstein; Shimin Chen; Phillip B Gibbons; Michael A Kozuch; Todd C Mowry,Abstract Software lifeguards; or tools that monitor applications at runtime; are an effectiveway of identifying program errors and security exploits. Parallel programs are susceptible toa wider range of possible errors than sequential programs; making them even more in needof online monitoring. Unfortunately; monitoring parallel applications is difficult due to inter-thread data dependences. In prior work; we introduced a new software framework for onlineparallel program monitoring inspired by dataflow analysis; called Butterfly Analysis. ButterflyAnalysis uses bounded windows of uncertainty to model the finite upper bound on delaybetween when an instruction is issued and when all its effects are visible throughout thesystem. While Butterfly Analysis offers many advantages; it ignored one key source ofordering information which affected its false positive rate: explicit software …,Proceedings of the 21st international conference on Parallel architectures and compilation techniques,2012,4
Online Updates on Data Warehouses via Judicious Use of Solid-State Storage,Manos Athanassoulis; Shimin Chen; Anastasia Ailamaki; Philip B Gibbons; Radu Stoica,Abstract Data warehouses have been traditionally optimized for read-only queryperformance; allowing only offline updates at night; essentially trading off data freshness forperformance. The need for 24x7 operations in global markets and the rise of online andother quickly reacting businesses make concurrent online updates increasingly desirable.Unfortunately; state-of-the-art approaches fall short of supporting fast analysis queries overfresh data. The conventional approach of performing updates in place can dramatically slowdown query performance; while prior proposals using differential updates either requirelarge in-memory buffers or may incur significant update migration cost. This article presentsa novel approach for supporting online updates in data warehouses that overcomes thelimitations of prior approaches by making judicious use of available SSDs to cache …,ACM Transactions on Database Systems (TODS),2015,3
Exploitation and Exploration Balanced Hierarchical Summary for Landmark Images,Jia Chen; Qin Jin; Shenghua Bao; Zhong Su; Shimin Chen; Yong Yu,While we have made significant progress over image understanding and search; how tomeet the ultimate goal of satisfying both exploration and exploitation in one single system isstill an open challenge. In the context of landmark images; it means that a system should notonly be able to help users to quickly locate the photo they are interested in (exploitation); butalso to discover different parts of the landmark which have never been seen before(exploration); which is a common request as evidenced by many recent multimedia studies.To the best of our knowledge; existing systems mainly focus on either exploration (eg; photobrowsing) or exploitation (eg; representative photo identification); while users' need ofexploration and exploitation is dynamically mixed. In this paper; we tackle the challenge byorganizing landmark images into a hierarchical summary which gives user the flexibility of …,IEEE Transactions on Multimedia,2015,1
Optimizing CPU cache performance for Pregel-like graph computation,Songjie Niu; Shimin Chen,In-memory graph computation systems have been used to support many importantapplications; such as PageRank on the web graph and social network analysis. In thispaper; we study the CPU cache performance of graph computation. We have implemented agraph computation system; called GraphLite; in C/C++ based on the description of Pregel.We analyze the CPU cache behavior of the internal data structures and operations of graphcomputation. Then we exploit CPU cache prefetching techniques to improve the cacheperformance. Real machine experimental results show that our solution achieves 1.9-2.2 xspeedups compared to the baseline implementation.,Data Engineering Workshops (ICDEW); 2015 31st IEEE International Conference on,2015,*
iPLUG: Personalized List Recommendation in Twitter,Lijiang Chen; Yibing Zhao; Shimin Chen; Hui Fang; Chengkai Li; Min Wang,Abstract A Twitter user can easily be overwhelmed by flooding tweets from her followees;making it challenging for the user to find interesting and useful information in tweets. Thefeature of Twitter Lists allows users to organize their followees into multiple subsets forselectively digesting tweets. However; this feature has not received wide reception becauseusers are reluctant to invest initial efforts in manually creating lists. To address the challengeof bootstrapping Twitter Lists; we envision a novel tool that automatically createspersonalized Twitter Lists and recommends them to users. Compared with lists created byreal Twitter users; the lists generated by our algorithms achieve 73.6% similarity.,International Conference on Web Information Systems Engineering,2013,*
Parallel LBA: Coherence-based Parallel Monitoring of Multithreaded Applications,Evangelos Vlachos; Michelle Goodstein; Michael Kozuch; Shimin Chen; Babak Falsafi; Phillip B Gibbons; Todd C Mowry; Olatunji Ruwase,Abstract As multicore processors become more prevalent; application performanceincreasingly depends upon parallel execution through multithreading. However; existingsoftware correctness-checking techniques have focused on singlethreaded applications andneed to be extended to support the efficient monitoring of multithreaded applications. Inparticular; software lifeguards (online tools for monitoring software correctness) must be ableto reason about the relative ordering of memory accesses and other events issued fromdifferent threads. Acquiring such event orderings is not trivial; and prior work has resorted toserializing application threads on a single core to manage concurrency. This paper solvesthe multithreaded application monitoring problem using a combination of techniques. First; itleverages cache coherence to record the interleaving of memory accesses from different …,*,2009,*
The Butterfly Model: Theoretical Foundations,Michelle Goodstein; Evangelos Vlachos; Shimin Chen; Phillip Gibbons; Michael Kozuch; Todd Mowry,Abstract Dynamic program monitoring is an effective technique for detecting bugs andsecurity attacks in running applications. Because of the industry-wide shift to multicore chips;program monitoring tools must be extended to monitor parallel programs. Parallel programsintroduce a new challenge for monitoring tools: inter-thread dependences. Existing toolsassume sequential consistency and often slow down the monitored program by orders ofmagnitude. In this paper; we present a novel approach that avoids these pitfalls by notrelying on detailed inter-thread dependences. Instead; we assume only that events in thedistant past on other threads have become visible; we make no assumptions on the relativeordering of more recent events on other threads. To overcome the potential state explosionof considering all the possible orderings among recent events; we adapt two techniques …,*,2009,*
