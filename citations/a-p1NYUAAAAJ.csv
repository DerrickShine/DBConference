Native client: A sandbox for portable; untrusted x86 native code,Bennet Yee; David Sehr; Gregory Dardyk; J Bradley Chen; Robert Muth; Tavis Ormandy; Shiki Okasaka; Neha Narula; Nicholas Fullagar,This paper describes the design; implementation and evaluation of Native Client; a sandboxfor untrusted x86 native code. Native Client aims to give browser-based applications thecomputational performance of native applications without compromising safety. Native Clientuses software fault isolation and a secure runtime to direct system interaction and sideeffects through interfaces managed by Native Client. Native Client provides operatingsystem portability for binary code while supporting performance-oriented features generallyabsent from web application programming environments; such as thread support; instructionset extensions such as SSE; and use of compiler intrinsics and hand-coded assembler. Wecombine these properties in an open architecture that encourages community review and3rd-party tools.,Security and Privacy; 2009 30th IEEE Symposium on,2009,607
Privacy-preserving browser-side scripting with BFlow,Alexander Yip; Neha Narula; Maxwell Krohn; Robert Morris,Abstract Some web sites provide interactive extensions using browser scripts; often withoutinspecting the scripts to verify that they are benign and bug-free. Others handle users'confidential data and display it via the browser. Such new features contribute to the power ofonline services; but their combination would allow attackers to steal confidential data. Thispaper presents BFlow; a security system that uses information flow control to allow thecombination while preventing attacks on data confidentiality. BFlow allows untrustedJavaScript to compute with; render; and store confidential data; while preventing leaks ofthat data. BFlow tracks confidential data as it flows within the browser; between scripts on apage and between scripts and web servers. Using these observations and assistance fromparticipating web servers; BFlow prevents scripts that have seen confidential data from …,Proceedings of the 4th ACM European conference on Computer systems,2009,53
Phase Reconciliation for Contended In-Memory Transactions.,Neha Narula; Cody Cutler; Eddie Kohler; Robert Morris,Abstract Multicore main-memory database performance can collapse when manytransactions contend on the same data. Contending transactions are executed serially—either by locks or by optimistic concurrency control aborts—in order to ensure that they haveserializable effects. This leaves many cores idle and performance poor. We introduce a newconcurrency control technique; phase reconciliation; that solves this problem for manyimportant workloads. Doppel; our phase reconciliation database; repeatedly cycles throughjoined; split; and reconciliation phases. Joined phases use traditional concurrency controland allow any transaction to execute. When workload contention causes unnecessary serialexecution; Doppel switches to a split phase. There; updates to contended items modify per-core state; and thus proceed in parallel on different cores. Not all transactions can …,OSDI,2014,44
Intrusion recovery for database-backed web applications,Ramesh Chandra; Taesoo Kim; Meelap Shah; Neha Narula; Nickolai Zeldovich,Abstract Warp is a system that helps users and administrators of web applications recoverfrom intrusions such as SQL injection; cross-site scripting; and clickjacking attacks; whilepreserving legitimate user changes. Warp repairs from an intrusion by rolling back parts ofthe database to a version before the attack; and replaying subsequent legitimate actions.Warp allows administrators to retroactively patch security vulnerabilities---ie; apply newsecurity patches to past executions---to recover from intrusions without requiring theadministrator to track down or even detect attacks. Warp's time-travel database allows fine-grained rollback of database rows; and enables repair to proceed concurrently with normaloperation of a web application. Finally; Warp captures and replays user input at the level of abrowser's DOM; to recover from attacks that involve a user's browser. For a web server …,Proceedings of the Twenty-Third ACM Symposium on Operating Systems Principles,2011,35
Preventing Use-after-free with Dangling Pointers Nullification.,Byoungyoung Lee; Chengyu Song; Yeongjin Jang; Tielei Wang; Taesoo Kim; Long Lu; Wenke Lee,Abstract—Many system components and network applications are written in languages thatare prone to memory corruption vulnerabilities. There have been countless cases wheresimple mistakes by developers resulted in memory corruption vulnerabilities andconsequently security exploits. While there have been tremendous research efforts tomitigate these vulnerabilities; useafter-free still remains one of the most critical and popularattack vectors because existing proposals have not adequately addressed the challengingprogram analysis and runtime performance issues. In this paper we present DANGNULL; asystem that detects temporal memory safety violations—in particular; use-after-free anddouble-free—during runtime. DANGNULL relies on the key observation that the root causeof these violations is that pointers are not nullified after the target object is freed. Based on …,NDSS,2015,33
Read/write based fast-path transformation for FCFS mutual exclusion,Prasad Jayanti; Srdjan Petrovic; Neha Narula,Abstract Lamport observed that in practical systems processes rarely compete for the entryinto the Critical Section 1. This led to research on fast mutual exclusion algorithms that; inthe absence of contention; allow a process to enter and exit the Critical Section in O (1)steps. Anderson and Kim designed a general transformation that can turn any mutualexclusion algorithm A into a new algorithm A' that is fast 2. Their transformation; however;does not preserve the fairness property FCFS. The main result of this paper is the design ofa new transformation which works similarly as Anderson and Kim's; but additionallypreserves FCFS. Our transformation; like theirs; requires only read/write registers.,International Conference on Current Trends in Theory and Practice of Computer Science,2005,12
Easy freshness with Pequod cache joins,Bryan Kate; Eddie Kohler; Michael S Kester; Neha Narula; Yandong Mao; Robert Morris,Abstract Pequod is a distributed application-level key-value cache that supportsdeclaratively defined; incrementally maintained; dynamic; partially-materialized views.These views; which we call cache joins; can simplify application development by shifting theburden of view maintenance onto the cache. Cache joins define relationships among keyranges; using cache joins; Pequod calculates views on demand; incrementally updatesthem as required; and in many cases improves performance by reducing clientcommunication. To build Pequod; we had to design a view abstraction for volatile;relationless key-value caches and make it work across servers in a distributed system.Pequod performs as well as other inmemory key-value caches and; like those caches;outperforms databases with view support.,NSDI,2014,5
Executing web application queries on a partitioned database,Neha Narula; Robert Morris,Abstract Partitioning data over multiple storage servers is an attractive way to increasethroughput for web-like workloads. However; there is often no one partitioning that yieldsgood performance for all queries; and it can be challenging for the web developer todetermine how best to execute queries over partitioned data. This paper presents DIXIE; aSQL query planner; optimizer; and executor for databases horizontally partitioned overmultiple servers. DIXIE focuses on increasing interquery parallel speedup by involving asfew servers as possible in each query. One way it does this is by supporting tables withmultiple copies partitioned on different columns; in order to expand the set of queries thatcan be satisified from a single server. DIXIE automatically transforms SQL queries to executeover a partitioned database; using a cost model and plan generator that exploit multiple …,Database,2012,2
Parallelizing the CKY and Earley Parsing Algorithms,Silas Boyd-Wickizer; Austin Clements; Neha Narula,Context-free parsing algorithms are one of the oldest and most well-understood aspects ofnatural language processing. Efforts to reduce the time complexity of these algorithms haveproduced two particularly popular algorithms: the Cocke-Kasami-Younger (CKY) bottomupparsing algorithm [5; 9]; and the Earley top-down parsing algorithm [2; 3]. However; despitethese efforts; parsing remains a time-consuming process because typical natural languagegrammars are very large and human language tends to produce highly ambiguoussentences with many possible parses; even for seemingly straightforward sentences. Whileambiguity is the bane of parsing performance for these algorithms; it represents a perfectopportunity to take advantage of recent developments in multicore hardware. As of thiswriting; many general-purpose 16 processor machines exist and the number of …,Online: http://www. mit. edu/$6.863/fall2012/projects/writeups/parallelckypaper. pdf,2009,1
zkLedger: Privacy-Preserving Auditing for Distributed Ledgers,Neha Narula; Willy Vasquez; Madars Virza,Abstract: Distributed ledgers (blockchains) enable financial institutions to efficiently reconcilecross-organization transactions. For example; banks might use a distributed ledger as asettlement log for digital assets. Unfortunately; these ledgers are either entirely public to allparticipants; revealing sensitive strategy and trading information; or are private but do notsupport third-party auditing. Auditing and financial oversight are critical to proving institutionsare complying with regulation.,15th {USENIX} Symposium on Networked Systems Design and Implementation ({NSDI} 18),2018,*
Parallel execution for conflicting transactions,Neha Narula,Multicore main-memory databases only obtain parallel performance when transactions donot conflict. Conflicting transactions are executed one at a time in order to ensure that theyhave serializable effects. Sequential execution on contended data leaves cores idle andreduces throughput. In other parallel programming contexts---not serializable transactions--techniques have been developed that can reduce contention on shared variables using per-core state. This thesis asks the question; can these techniques apply to a generalserializable database? This work introduces a new concurrency control technique; phasereconciliation; that uses per-core state to greatly reduce contention on popular databaserecords for many important workloads. Phase reconciliation uses the idea of synchronizedphases to amortize the cost of combining per-core data and to extract parallelism. Doppel …,*,2015,*
A Multicore Database is not a Distributed System.,Neha Narula,Database concurrency control is evolving to parallelize well on machines with many cores.Some researchers advocate viewing a multicore machine as a shared-nothing distributedsystem; where data is exclusively partitioned between cores [8]. This approach breaks downfor changing workloads or workloads that do not partition well. In the meantime; othersystems have shown that concurrency control need not be too expensive. We advocatescheduling transactions according to workload characteristics in order to address theproblems that arise with true data contention. In a shared-nothing main-memory database;transactions use a single-threaded execution model [4]. This technique eliminates the needfor synchronization protocols like locking or validating for all transactions which only touchdata on a single partition. Many systems use this approach on multicore machines; with a …,CIDR,2015,*
Distributed query execution on a replicated and partitioned database,Neha Narula,Web application developers partition and replicate their data amongst a set of SQLdatabases to achieve higher throughput. Given multiple copies of tables partioned differentways; developers must manually select different replicas in their application code. This workpresents Dixie; a query planner and executor which automatically executes queries overreplicas of partitioned data stored in a set of relational databases; and optimizes for highthroughput. The challenge in choosing a good query plan lies in predicting query cost; whichDixie does by balancing row retrieval costs with the overhead of contacting many servers toexecute a query. For web workloads; per-query overhead in the servers is a large part of theoverall cost of execution. Dixie's cost calculation tends to minimize the number of serversused to satisfy a query; which is essential for minimizing this query overhead and …,*,2010,*
A Logic of Secure Systems and its Application to Trusted Computing Anupam Datta; Jason Franklin; Deepak Garg; Dilsun Kaynar (CMU) Formally Certifying the Sec...,Bart Coppens; Ingrid Verbauwhede; Koen De Bosschere; Native Code; Bennet Yee; David Sehr; Gregory Dardyk; Brad Chen; Robert Muth; Tavis Ormandy; Shiki Okasaka; Neha Narula; Nicholas Fullagar,Monday; 18 May 2009 8:30–8:45 Opening 8:45–10:15 Attacks and Defenses Wirelessly Pickpocketinga Mifare Classic Card Flavio D. Garcia; Peter van Rossum; Roel Verdult; Ronny Wichers Schreur(Radboud U. Nijmegen) Plaintext Recovery Attacks Against SSH Martin R. Albrecht; KennethG. Paterson; Gaven J. Watson (Royal Holloway; University of London) Exploiting Unix File-SystemRaces via Algorithmic Complexity Attacks Xiang Cai; Yuwei Gui; Rob Johnson (Stony Brook)10:30–11:30 Information Security Practical Mitigations for Timing-Based Side-Channel Attackson Modern x86 Processors Bart Coppens (Ghent U.); Ingrid Verbauwhede (Katholieke UniversiteitLeuven); Bjorn De Sutter; Koen De Bosschere (Ghent U.) Non-Interference for a PracticalDIFC-Based Operating System Maxwell Krohn (CMU); Eran Tromer (MIT) 11:30–12:00 30th AnniversaryEvent 12:00–1:30 Lunch 1:30–3:00 Malicious Code Native …,*,*,*
The magazine archive includes every article published in Communications of the ACM for over the past 50 years.,Albert Greenberg; James R Hamilton; Navendu Jain; Srikanth Kandula; Changhoon Kim; Parantap Lahiri; David A Maltz; Parveen Patel; Sudipta Sengupta,Can solving hard computational problems be made easy? If we restrict the scope of thequestion to computational problems that can be stated in terms of constraints over binarydomains; and if we understand" easy" as" using a simple and intuitive modeling languagethat comes with software for processing programs in the language;" then the answer is Yes!Answer Set Programming (ASP; for short) fits the bill.,Communications of the ACM,*,*
2009 30th IEEE Symposium on Security and Privacy,Flavio D Garcia; Peter van Rossum; Roel Verdult; Ronny Wichers Schreur; Martin R Albrecht; Kenneth G Paterson; Gaven J Watson; Xiang Cai; Yuwei Gui; Rob Johnson; Bart Coppens; Ingrid Verbauwhede; Koen De Bosschere; Bjorn De Sutter; Maxwell Krohn; Eran Tromer; Bennet Yee; David Sehr; Gregory Dardyk; J Bradley Chen; Robert Muth; Tavis Ormandy; Shiki Okasaka; Neha Narula; Nicholas Fullagar; Monirul Sharif; Andrea Lanzi; Jonathon Giffin; Wenke Lee; Paolo Milani Comparetti; Gilbert Wondracek; Christopher Kruegel; Engin Kirda; Kevin Borders; Atul Prakash; Michael Backes; Boris Köpf; Andrey Rybalchenko; Bryan Parno; Jonathan M McCune; Dan Wendlandt; David G Andersen; Adrian Perrig; Arvind Narayanan; Vitaly Shmatikov; Koen Simoens; Pim Tuyls; Bart Preneel; Michael T Goodrich; Anupam Datta; Jason Franklin; Deepak Garg; Dilsun Kaynar; Santiago Zanella-Béguelin; Gilles Barthe; Benjamin Grégoire; Federico Olmedo; Ralf Kuesters; Tomasz Truderung; George Danezis; Ian Goldberg; Haifeng Yu; Chenwei Shi; Michael Kaminsky; Phillip B Gibbons; Feng Xiao; William Clarkson; Tim Weyrich; Adam Finkelstein; Nadia Heninger; J Alex Halderman; Edward W Felten; Tongbo Chen; Markus Duermuth; Hendrik PA Lensch; Martin Welk; Mike Ter Louw; VN Venkatakrishnan; Shuo Chen; Ziqing Mao; Yi-Min Wang; Ming Zhang; Adam Barth; Juan Caballero; Dawn Song; Stuart Schechter; AJ Bernheim Brush; Serge Egelman; Matt Weir; Sudhir Aggarwal; Breno de Medeiros; Bill Glodek,Wirelessly Pickpocketing a Mifare Classic Card....................................................................................................3 Flavio D. Garcia; Peter van Rossum; Roel Verdult; and Ronny Wichers Schreur PlaintextRecovery Attacks against SSH … Practical Mitigationsfor Timing-Based Side-Channel Attacks on Modern x86 Processors............................................................................................................................................................45 Bart Coppens; IngridVerbauwhede; Koen De Bosschere; and Bjorn De Sutter Noninterference for a PracticalDIFC-Based Operating System … Native Client: A Sandbox for Portable; Untrusted x86Native Code ................................................................79 Bennet Yee; David Sehr; GregoryDardyk; J. Bradley Chen; Robert Muth; Tavis Ormandy; Shiki Okasaka; Neha Narula; and NicholasFullagar Automatic Reverse Engineering of Malware Emulators …,*,*,*
