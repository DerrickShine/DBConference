Matching events in a content-based subscription system,Marcos K Aguilera; Robert E Strom; Daniel C Sturman; Mark Astley; Tushar D Chandra,Content-based subscription systems are an emerging alternative to traditional publish-subscribe systems; because they permit more flexible subscriptions along multipledimensions. In these systems; each subscription is a predicate which may test arbitraryattributes within an event. However; the matching problem for content-based systems-determining for each event the subset of all subscriptions whose predicates match the event-is still an open problem. We present an efficient; scalable solution to the matching problem.Our solution has an expected time complexity that is sub-linear in the number ofsubscriptions; and it has a spacecomplexity that is linear. Specifically; we prove that forpredicates reducible to conjunctions of elementary tests; the expected time to match arandom event is no greater than O (N'-') where N is the number of subscriptions; and X is …,Proceedings of the eighteenth annual ACM symposium on Principles of distributed computing,1999,839
Performance debugging for distributed systems of black boxes,Marcos K Aguilera; Jeffrey C Mogul; Janet L Wiener; Patrick Reynolds; Athicha Muthitacharoen,Abstract Many interesting large-scale systems are distributed systems of multiplecommunicating components. Such systems can be very hard to debug; especially when theyexhibit poor performance. The problem becomes much harder when systems are composedof" black-box" components: software from many different (perhaps competing) vendors;usually without source code available. Typical solutions-provider employees are not alwaysskilled or experienced enough to debug these systems efficiently. Our goal is to design toolsthat enable modestly-skilled programmers (and experts; too) to isolate performancebottlenecks in distributed systems composed of black-box nodes. We approach this problemby obtaining message-level traces of system activity; as passively as possible and withoutany knowledge of node internals or message semantics. We have developed two very …,ACM SIGOPS Operating Systems Review,2003,715
On the quality of service of failure detectors,Wei Chen; Sam Toueg; Marcos Kawazoe Aguilera,We study the quality of service (QoS) of failure detectors. By QoS; we mean a specificationthat quantifies:(1) how fast the failure detector detects actual failures and (2) how well itavoids false detections. We first propose a set of QoS metrics to specify failure detectors forsystems with probabilistic behaviors; ie; for systems where message delays and messagelosses follow some probability distributions. We then give a new failure detector algorithmand analyze its QoS in terms of the proposed metrics. We show that; among a large class offailure detectors; the new algorithm is optimal with respect to some of these QoS metrics.Given a set of failure detector QoS requirements; we show how to compute the parametersof our algorithm so that it satisfies these requirements and we show how this can be doneeven if the probabilistic behavior of the system is not known. We then present some …,IEEE Transactions on computers,2002,583
Transactional storage for geo-replicated systems,Yair Sovran; Russell Power; Marcos K Aguilera; Jinyang Li,Abstract We describe the design and implementation of Walter; a key-value store thatsupports transactions and replicates data across distant sites. A key feature behind Walter isa new property called Parallel Snapshot Isolation (PSI). PSI allows Walter to replicate dataasynchronously; while providing strong guarantees within each site. PSI precludes write-write conflicts; so that developers need not worry about conflict-resolution logic. To preventwrite-write conflicts and implement PSI; Walter uses two new and simple techniques:preferred sites and counting sets. We use Walter to build a social networking application andport a Twitter-like application.,Proceedings of the Twenty-Third ACM Symposium on Operating Systems Principles,2011,295
Sinfonia: a new paradigm for building scalable distributed systems,Marcos K Aguilera; Arif Merchant; Mehul Shah; Alistair Veitch; Christos Karamanolis,Abstract We propose a new paradigm for building scalable distributed systems. Ourapproach does not require dealing with message-passing protocols--a major complication inexisting distributed systems. Instead; developers just design and manipulate data structureswithin our service called Sinfonia. Sinfonia keeps data for applications on a set of memorynodes; each exporting a linear address space. At the core of Sinfonia is a novelminitransaction primitive that enables efficient and consistent access to data; while hidingthe complexities that arise from concurrency and failures. Using Sinfonia; we implementedtwo very different and complex applications in a few months: a cluster file system and agroup communication service. Our implementations perform well and scale to hundreds ofmachines.,ACM SIGOPS Operating Systems Review,2007,287
Failure detection and consensus in the crash-recovery model,Marcos Kawazoe Aguilera; Wei Chen; Sam Toueg,Summary. We study the problems of failure detection and consensus in asynchronoussystems in which processes may crash and recover; and links may lose messages. We firstpropose new failure detectors that are particularly suitable to the crash-recovery model. Wenext determine under what conditions stable storage is necessary to solve consensus in thismodel. Using the new failure detectors; we give two consensus algorithms that match theseconditions: one requires stable storage and the other does not. Both algorithms tolerate linkfailures and are particularly efficient in the runs that are most likely in practice–those with nofailures or failure detector mistakes. In such runs; consensus is achieved within 3δ time andwith 4 n messages; where δ is the maximum message delay and n is the number ofprocesses in the system.,Distributed computing,2000,209
Heartbeat: A timeout-free failure detector for quiescent reliable communication,Marcos Kawazoe Aguilera; Wei Chen; Sam Toueg,Abstract We study the problem of achieving reliable communication with quiescentalgorithms (ie; algorithms that eventually stop sending messages) in asynchronous systemswith process crashes and lossy links. We first show that it is impossible to solve this problemwithout failure detectors. We then show how to solve it using a new failure detector; calledheartbeat. In contrast to previous failure detectors that have been used to circumventimpossibility results; the heartbeat failure detector is implementable; and its implementationdoes not use timeouts. These results have wide applicability: they can be used to transformmany existing algorithms that tolerate only process crashes into quiescent algorithms thattolerate both process crashes and message losses. This can be applied to consensus;atomic broadcast; k-set agreement; atomic commitment; etc. The heartbeat failure …,International Workshop on Distributed Algorithms,1997,199
Stable leader election,Marcos K Aguilera; Carole Delporte-Gallet; Hugues Fauconnier; Sam Toueg,Abstract We introduce the notion of stable leader election and derive several algorithms forthis problem. Roughly speaking; a leader election algorithm is stable if it ensures that once aleader is elected; it remains the leader for as long as it does not crash and its links havebeen behaving well; irrespective of the behavior of other processes and links. In addition tobeing stable; our leader election algorithms have several desirable properties. In particular;they are all communication-efficient; ie; they eventually use only n links to carry messages;and they are robust; ie; they work in systems where only the links to/from some correctprocess are required to be eventually timely. Moreover; our best leader election algorithmtolerates message losses; and it ensures that a leader is elected in constant time when thesystem is stable. We conclude the paper by applying the above ideas to derive a robust …,International Symposium on Distributed Computing,2001,171
Consistency-based service level agreements for cloud storage,Douglas B Terry; Vijayan Prabhakaran; Ramakrishna Kotla; Mahesh Balakrishnan; Marcos K Aguilera; Hussam Abu-Libdeh,Abstract Choosing a cloud storage system and specific operations for reading and writingdata requires developers to make decisions that trade off consistency for availability andperformance. Applications may be locked into a choice that is not ideal for all clients andchanging conditions. Pileus is a replicated key-value store that allows applications todeclare their consistency and latency priorities via consistency-based service levelagreements (SLAs). It dynamically selects which servers to access in order to deliver thebest service given the current configuration and system conditions. In application-specificSLAs; developers can request both strong and eventual consistency as well as intermediateguarantees such as read-my-writes. Evaluations running on a worldwide test bed with geo-replicated data show that the system adapts to varying client-server latencies to provide …,Proceedings of the Twenty-Fourth ACM Symposium on Operating Systems Principles,2013,158
On implementing omega with weak reliability and synchrony assumptions,Marcos K Aguilera; Carole Delporte-Gallet; Hugues Fauconnier; Sam Toueg,Abstract We study the feasibility and cost of implementing Ω---a fundamental failure detectorat the core of many algorithms---in systems with weak reliability and synchrony assumptions.Intuitively; Ω allows processes to eventually elect a common leader. We first give analgorithm that implements Ω in a weak system S where processes are synchronous; but:(a)any number of them may crash; and (b) only the output links of an unknown correct processare eventually timely (all other links can be asynchronous and/or lossy). This is in contrast toprevious implementations of Ω which assume that a quadratic number of links are eventuallytimely; or systems that are strong enough to implement the eventually perfect failure detectorP. We next show that implementing Ω in S is expensive: even if we want an implementationthat tolerates just one process crash; all correct processes (except possibly one) must …,Proceedings of the twenty-second annual symposium on Principles of distributed computing,2003,155
Communication-efficient leader election and consensus with limited link synchrony,Marcos K Aguilera; Carole Delporte-Gallet; Hugues Fauconnier; Sam Toueg,Abstract We study the degree of synchrony required to implement the leader election failuredetector Ω and to solve consensus in partially synchronous systems. We show that in asystem with n processes and up to f process crashes; one can implement Ω and solveconsensus provided there exists some (unknown) correct process with f outgoing links thatare eventually timely. In the special case where f= 1; an important case in practice; thisimplies that to implement Ω and solve consensus it is sufficient to have just one eventuallytimely link--all the other links in the system; Θ (n 2) of them; may be asynchronous. There isno need to know which link p→ q is eventually timely; when it becomes timely; or what is itsbound on message delay. Surprisingly; it is not even required that the source p ordestination q of this link be correct: either p or q may actually crash; in which case the link …,Proceedings of the twenty-third annual ACM symposium on Principles of distributed computing,2004,150
A practical scalable distributed b-tree,Marcos K Aguilera; Wojciech Golab; Mehul A Shah,Abstract Internet applications increasingly rely on scalable data structures that must supporthigh throughput and store huge amounts of data. These data structures can be hard toimplement efficiently. Recent proposals have overcome this problem by giving up ongenerality and implementing specialized interfaces and functionality (eg; Dynamo [4]). Wepresent the design of a more general and flexible solution: a fault-tolerant and scalabledistributed B-tree. In addition to the usual B-tree operations; our B-tree provides someimportant practical features: transactions for atomically executing several operations in oneor more B-trees; online migration of B-tree nodes between servers for load-balancing; anddynamic addition and removal of servers for supporting incremental growth of the system.Our design is conceptually simple. Rather than using complex concurrency and locking …,Proceedings of the VLDB Endowment,2008,136
Using erasure codes efficiently for storage in a distributed system,Marcos Kawazoe Aguilera; Ramaprabhu Janakiraman; Lihao Xu,Erasure codes provide space-optimal data redundancy to protect against data loss. Acommon use is to reliably store data in a distributed system; where erasure-coded data arekept in different nodes to tolerate node failures without losing data. In this paper; we proposea new approach to maintain ensure-encoded data in a distributed system. The approachallows the use of space efficient k-of-n erasure codes where n and k are large and theoverhead nk is small. Concurrent updates and accesses to data are highly optimized: incommon cases; they require no locks; no two-phase commits; and no logs of old versions ofdata. We evaluate our approach using an implementation and simulations for largersystems.,Dependable Systems and Networks; 2005. DSN 2005. Proceedings. International Conference on,2005,131
WAP5: black-box performance debugging for wide-area systems,Patrick Reynolds; Janet L Wiener; Jeffrey C Mogul; Marcos K Aguilera; Amin Vahdat,Abstract Wide-area distributed applications are challenging to debug; optimize; andmaintain. We present Wide-Area Project 5 (WAP5); which aims to make these tasks easierby exposing the causal structure of communication within an application and by exposingdelays that imply bottlenecks. These bottlenecks might not otherwise be obvious; with orwithout the application's source code. Previous research projects have presented algorithmsto reconstruct application structure and the corresponding timing information from black-boxmessage traces of local-area systems. In this paper we present (1) a new algorithm forreconstructing application structure in both local-and wide-area distributed systems;(2) aninfrastructure for gathering application traces in PlanetLab; and (3) our experiences tracingand analyzing three systems: CoDeeN and Coral; two content-distribution networks in …,Proceedings of the 15th international conference on World Wide Web,2006,129
Using the heartbeat failure detector for quiescent reliable communication and consensus in partitionable networks,Marcos Kawazoe Aguilera; Wei Chen; Sam Toueg,Abstract We consider partitionable networks with process crashes and lossy links; and focuson the problems of reliable communication and consensus for such networks. For bothproblems we seek algorithms that are quiescent; ie; algorithms that eventually stop sendingmessages. We first tackle the problem of reliable communication for partitionable networksby extending the results of Aguilera et al.(1997). In particular; we generalize the specificationof the heartbeat failure detector HB; show how to implement it; and show how to use it toachieve quiescent reliable communication. We then turn our attention to the problem ofconsensus for partitionable networks. We first show that; even though this problem can besolved using a natural extension of failure detector♢ L; such solutions are not quiescent—inother words;♢ L alone is not sufficient to achieve quiescent consensus in partitionable …,Theoretical Computer Science,1999,128
Failure detection and consensus in the crash-recovery model,Marcos Kawazoe Aguilera; Wei Chen; Sam Toueg,Abstract We study the problems of failure detection and consensus in asynchronous systemsin which processes may crash and recover; and links may lose messages. We first proposenew failure detectors that are particularly suitable to the crash-recovery model. We nextdetermine under what conditions stable storage is necessary to solve consensus in thismodel. Using the new failure detectors; we give two consensus algorithms that match theseconditions: one requires stable storage and the other does not. Both algorithms tolerate linkfailures and are particularly efficient in the runs that are most likely in practice—those with nofailures or failure detector mistakes. In such runs; consensus is achieved within 3 δ time andwith 4 n messages; where δ is the maximum message delay and n is the number ofprocesses in the system.,International Symposium on Distributed Computing,1998,115
Transaction chains: achieving serializability with low latency in geo-distributed storage systems,Yang Zhang; Russell Power; Siyuan Zhou; Yair Sovran; Marcos K Aguilera; Jinyang Li,Abstract Currently; users of geo-distributed storage systems face a hard choice betweenhaving serializable transactions with high latency; or limited or no transactions with lowlatency. We show that it is possible to obtain both serializable transactions and low latency;under two conditions. First; transactions are known ahead of time; permitting an a priori staticanalysis of conflicts. Second; transactions are structured as transaction chains consisting ofa sequence of hops; each hop modifying data at one server. To demonstrate this idea; webuilt Lynx; a geo-distributed storage system that offers transaction chains; secondaryindexes; materialized join views; and geo-replication. Lynx uses static analysis to determineif each hop can execute separately while preserving serializability---if so; a client needs waitonly for the first hop to complete; which occurs quickly. To evaluate Lynx; we built three …,Proceedings of the Twenty-Fourth ACM Symposium on Operating Systems Principles,2013,104
Dynamic atomic storage without consensus,Marcos K Aguilera; Idit Keidar; Dahlia Malkhi; Alexander Shraer,Abstract This article deals with the emulation of atomic read/write (R/W) storage in dynamicasynchronous message passing systems. In static settings; it is well known that atomic R/Wstorage can be implemented in a fault-tolerant manner even if the system is completelyasynchronous; whereas consensus is not solvable. In contrast; all existing emulations ofatomic storage in dynamic systems rely on consensus or stronger primitives; leading to apopular belief that dynamic R/W storage is unattainable without consensus. In this article; wespecify the problem of dynamic atomic read/write storage in terms of the interface availableto the users of such storage. We discover that; perhaps surprisingly; dynamic R/W storage issolvable in a completely asynchronous system: we present DynaStore; an algorithm thatsolves this problem. Our result implies that atomic R/W storage is in fact easier than …,Journal of the ACM (JACM),2011,100
Sinfonia: A new paradigm for building scalable distributed systems,Marcos K Aguilera; Arif Merchant; Mehul Shah; Alistair Veitch; Christos Karamanolis,Abstract We propose a new paradigm for building scalable distributed systems. Ourapproach does not require dealing with message-passing protocols; a major complication inexisting distributed systems. Instead; developers just design and manipulate data structureswithin our service called Sinfonia. Sinfonia keeps data for applications on a set of memorynodes; each exporting a linear address space. At the core of Sinfonia is a newminitransaction primitive that enables efficient and consistent access to data; while hidingthe complexities that arise from concurrency and failures. Using Sinfonia; we implementedtwo very different and complex applications in a few months: a cluster file system and agroup communication service. Our implementations perform well and scale to hundreds ofmachines.,ACM Transactions on Computer Systems (TOCS),2009,86
On quiescent reliable communication,Marcos Kawazoe Aguilera; Wei Chen; Sam Toueg,We study the problem of achieving reliable communication with quiescent algorithms (ie;algorithms that eventually stop sending messages) in asynchronous systems with processcrashes and lossy links. We first show that it is impossible to solve this problem inasynchronous systems (with no failure detectors). We then show that; among failuredetectors that output lists of suspects; the weakest one that can be used to solve thisproblem is \diamond\calP; a failure detector that cannot be implemented. To overcome thisdifficulty; we introduce an implementable failure detector called Heartbeat and show that itcan be used to achieve quiescent reliable communication. Heartbeat is novel: in contrast totypical failure detectors; it does not output lists of suspects and it is implementable withouttimeouts. With Heartbeat; many existing algorithms that tolerate only process crashes can …,SIAM Journal on Computing,2000,85
Block-level security for network-attached disks,Marcos K Aguilera; Minwen Ji; Mark Lillibridge; John MacCormick; Erwin Oertli; David G Andersen; Mike Burrows; Timothy Mann; Chandramohan A Thekkath,Abstract We propose a practical and efficient method for adding security to network-attacheddisks (NADs). In contrast to previous work; our design requires no changes to the data layouton disk; minimal changes to existing NADs; and only small changes to the standard protocolfor accessing remote block-based devices. Thus; existing NAD file systems and storage-management software could incorporate our scheme very easily. Our design enforcessecurity using the well-known idea of self-describing capabilities; with two novel featuresthat limit the need for memory on secure NADs: a scheme to manage revocations based oncapability groups; and a replay-detection method using Bloom filters. We have implementeda prototype NAD file system; called Snapdragon; that incorporates our ideas. We evaluatedSnapdragon's performance and scalability. The overhead of access control is small …,*,2003,84
Efficient atomic broadcast using deterministic merge,Marcos Kawazoe Aguilera; Robert E Strom,Abstract We present an approach for merging message streams from producers distributedover a network; using a deterministic algorithm that is independent of any nondeterminism ofthe system; such as the amount of time the messages are delayed by the network; or theirarrival order. Thus; if this algorithm is replicated at multiple “mergers”; then each merger willmerge the message streams in exactly the same way. The technique is therefore a solutionto atomic broadcast and global atomic multicast [12]. We assume that each producer hasaccess to (approximately) synchronized clocks and can estimate the expected messagerates of all producers. We propose an algorithm; called the Bias Algorithm. To measure theperformance of the Bias Algorithm; we assume that messages are generated by memorylessprocesses operating at known message rates; and we measure the expected total merge …,Proceedings of the nineteenth annual ACM symposium on Principles of distributed computing,2000,84
A pleasant stroll through the land of infinitely many creatures,Marcos K Aguilera,Abstract Many distributed algorithms are designed for a system with a fixed set of nprocesses. However; some systems may dynamically change and expand over time; so thatthe number of processes may grow to infinity as time tends to infinity. This paper considerssuch systems; and gives algorithms that are new and simple (but not necessarily efficient) forcommon problems. The reason for simplicity is to better expose some of the algorithmictechniques for dealing with infinitely many processes. A brief summary of existing work in thesubject is also provided.,ACM Sigact News,2004,80
Snapshots in distributed storage systems,*,Embodiments include methods; apparatus; and systems for snapshots in distributed storagesystems. One method of software execution includes using a version tree to determine whatdata blocks are shared between various storage nodes in the version tree in order to createa clone or a snapshot of a storage volume in a distributed storage system that uses quorum-based replication.,*,2015,79
A simple bivalency proof that t-resilient consensus requires t+ 1 rounds,Marcos Kawazoe Aguilera; Sam Toueg,Abstract We use a straightforward bivalency argument borrowed from Fischer et al.(1985) toshow that in a synchronous system with up to t crash failures solving consensus requires atleast t+ 1 rounds. The proof is simpler and more intuitive than the traditional one: It uses aneasy forward induction rather than a more complex backward induction which needs theinduction hypothesis several times.,Information Processing Letters,1999,78
Thrifty generic broadcast,Marcos Kawazoe Aguilera; Carole Delporte-Gallet; Hugues Fauconnier; Sam Toueg,Abstract We consider the problem of generic broadcast in asynchronous systems withcrashes; a problem that was first studied in [12]. Roughly speaking; given a “conflict” relationon the set of messages; generic broad-cast ensures that any two messages that conflict aredelivered in the same order; messages that do not conflict may be delivered in differentorder. In this paper; we define what it means for an implementation generic broadcast to be“thrifty”; and give corresponding implementations that are optimal in terms of resiliency. Wealso give an interesting application of our results regarding the implementation of atomicbroadcast.,International Symposium on Distributed Computing,2000,66
Failure detection and randomization: A hybrid approach to solve consensus,Marcos Kawazoe Aguilera; Sam Toueg,We present a consensus algorithm that combines unreliable failure detection andrandomization; two well-known techniques for solving consensus in asynchronous systemswith crash failures. This hybrid algorithm combines advantages from both approaches: itguarantees deterministic termination if the failure detector is accurate; and probabilistictermination otherwise. In executions with no failures or failure detector mistakes; the mostlikely ones in practice; consensus is reached in only two asynchronous rounds.,SIAM Journal on Computing,1998,62
Detecting failures in distributed systems with the falcon spy network,Joshua B Leners; Hao Wu; Wei-Lun Hung; Marcos K Aguilera; Michael Walfish,Abstract A common way for a distributed system to tolerate crashes is to explicitly detectthem and then recover from them. Interestingly; detection can take much longer thanrecovery; as a result of many advances in recovery techniques; making failure detection thedominant factor in these systems' unavailability when a crash occurs. This paper presentsthe design; implementation; and evaluation of Falcon; a failure detector with severalfeatures. First; Falcon's common-case detection time is sub-second; which keepsunavailability low. Second; Falcon is reliable: it never reports a process as down when it isactually up. Third; Falcon sometimes kills to achieve reliable detection but aims to kill thesmallest needed component. Falcon achieves these features by coordinating a network ofspies; each monitoring a layer of the system. Falcon's main cost is a small amount of …,Proceedings of the Twenty-Third ACM Symposium on Operating Systems Principles,2011,57
Consensus with byzantine failures and little system synchrony,Marcos Kawazoe Aguilera; Carole Delporte-Gallet; Hugues Fauconnier; Sam Toueg,We study consensus in a message-passing system where only some of the n 2 links exhibitsome synchrony. This problem was previously studied for systems with process crashes; wenow consider Byzantine failures. We show that consensus can be solved in a system wherethere is at least one non-faulty process whose links are eventually timely; all other links canbe arbitrarily slow. We also show that; in terms of problem solvability; such a system is strictlyweaker than one where all links are eventually timely,Dependable Systems and Networks; 2006. DSN 2006. International Conference on,2006,55
On the impact of fast failure detectors on real-time fault-tolerant systems,Marcos K Aguilera; Gérard Le Lann; Sam Toueg,Abstract We investigate whether fast failure detectors can be useful—and if so by how much—in the design of real-time fault-tolerant systems. Specifically; we show how fast failuredetectors can speed up consensus and fault-tolerant broadcasts; by providing fastalgorithms and deriving some matching lower bounds; for synchronous systems withcrashes. These results show that a fast failure detector service (implemented usingspecialized hardware or expedited message delivery) can be an important tool in the designof real-time mission-critical systems.,International Symposium on Distributed Computing,2002,53
Improving recoverability in multi-tier storage systems,Marcos K Aguilera; Kimberly Keeton; Arif Merchant; Kiran-Kumar Muniswamy-Reddy; Mustafa Uysal,Enterprise storage systems typically contain multiple storage tiers; each having its ownperformance; reliability; and recoverability. The primary motivation for this multi-tierorganization is cost; as storage tier costs vary considerably. In this paper; we describe a filesystem called TierFS that stores files at multiple storage tiers while providing highrecoverability at all tiers. To achieve this goal; TierFS uses several novel techniques thatleverage coupling between multiple tiers to reduce data loss; take consistent snapshotsacross tiers; provide continuous data protection; and improve recovery time. We evaluateTierFS with analytical models; showing that TierFS can provide better recoverability than aconventional design of similar cost.,Dependable Systems and Networks; 2007. DSN'07. 37th Annual IEEE/IFIP International Conference on,2007,52
Failure detector with consensus protocol,*,New failure detector mechanisms particularly suitable for use in asynchronous distributedcomputing systems in which processes may crash and recover; and two crash-recoveryconsensus mechanisms; one requiring stable storage and the other not requiring it. Bothconsensus mechanisms tolerate link failures and are particularly efficient in the commonruns with no failures or failure detector mistakes. Consensus is achieved in such runs within3□ time and with 4n messages; where□ is the maximum message delay and n is thenumber of processes in the system.,*,2004,49
Abortable and query-abortable objects and their efficient implementation,Marcos K Aguilera; Svend Frolund; Vassos Hadzilacos; Stephanie L Horn; Sam Toueg,Abstract We introduce abortable and query-abortable objects; intended for asynchronousshared-memory systems with low contention. These objects behave like ordinary objectswhen accessed sequentially; but may abort operations when accessed concurrently. Anaborted operation may or may not take effect; ie; cause a state transition; and it returns noindication of which possibility occurred. Since this uncertainty is problematic; a query-abortable object supports a QUERY operation that each process can use to determine itslast non-QUERY operation on the object that caused a state transition; and the responseassociated with this state transition. Query-abortable objects can easily implementobstruction-free objects (introduced by Herlihy; Luchangco and Moir) and pausable objects(introduced by Attiya; Guerraoui and Kouznetsov). We present universal constructions for …,Proceedings of the twenty-sixth annual ACM symposium on Principles of distributed computing,2007,48
On implementing omega in systems with weak reliability and synchrony assumptions,Marcos K Aguilera; Carole Delporte-Gallet; Hugues Fauconnier; Sam Toueg,Abstract We study the feasibility and cost of implementing Ω—a fundamental failure detectorat the core of many algorithms—in systems with weak reliability and synchrony assumptions.Intuitively; Ω allows processes to eventually elect a common leader. We first give analgorithm that implements Ω in a weak system S where (a) except for some unknown timelyprocess s; all processes may be arbitrarily slow or may crash; and (b) only the output links ofs are eventually timely (all other links can be arbitrarily slow and lossy). Previously knownalgorithms for Ω worked only in systems that are strictly stronger than S in terms of reliabilityor synchrony assumptions. We next show that algorithms that implement Ω in system S arenecessarily expensive in terms of communication complexity: all correct processes (exceptpossibly one) must send messages forever; moreover; a quad-ratic number of links must …,Distributed Computing,2008,47
Revisiting the weakest failure detector for uniform reliable broadcast,Marcos Kawazoe Aguilera; Sam Toueg; Borislav Deianov,Abstract Uniform Reliable Broadcast (URB) is a communication prim-itive that requires that ifa process delivers a message; then all correct processes also deliver this message. A recentpaper [HR99] uses Knowl-edge Theory to determine what failure detectors are necessary toimple-ment this primitive in asynchronous systems with process crashes and lossy links thatare fair. In this paper; we revisit this problem using a different approach; and provide a resultthat is simpler; more intuitive; and; in a precise sense; more general.,International Symposium on Distributed Computing,1999,47
Randomization and failure detection: A hybrid approach to solve consensus,Marcos Kawazoe Aguilera; Sam Toueg,Abstract We present a Consensus algorithm that combines randomization and unreliablefailure detection; two well-known techniques for solving Consensus in asynchronoussystems with crash failures. This hybrid algorithm combines advantages from bothapproaches: it guarantees deterministic termination if the failure detector is accurate; andprobabilistic termination otherwise. In executions with no failures or failure detectormistakes; the most likely ones in practice; Consensus is reached in only two asynchronousrounds.,International Workshop on Distributed Algorithms,1996,39
Heartbeat failure detector method and apparatus,*,The Heartbeat Failure Detector of the present invention; is a new; simple method and devicethat has several identical modules; and each module is attached to a processor in thesystem. Roughly speaking; the module of a processor x maintains a heartbeat counter forevery other process. For each process y; the counter of y at x (called the heartbeat of y at x)periodically increases while y is alive and in the same network partition; and the counterstops increasing after y crashes or becomes partitioned away. Using such a device; x cansolve the communication problem above by resending m only if the heartbeat of y at xincreases. Note that if y is crashed (or partitioned away from x); its heartbeat at x stopsalmost immediately; and so x will also immediately stop sending copies of m to y.,*,2004,36
Improving availability in distributed systems with failure informers,Joshua B Leners; Trinabh Gupta; Marcos K Aguilera; Michael Walfish,Abstract. This paper addresses a core question in distributed systems: how shouldapplications be notified of failures? When a distributed system acts on failure reports; thesystem's correctness and availability depend on the granularity and semantics of thosereports. The system's availability also depends on coverage (failures are reported); accuracy(reports are justified); and timeliness (reports come quickly). This paper describes Pigeon; afailure reporting service designed to enable high availability in the applications that use it.Pigeon exposes a new abstraction; called a failure informer; which allows applications totake informed; application-specific recovery actions; and which encapsulates uncertainty;allowing applications to proceed safely in the presence of doubt. Pigeon also significantlyimproves over the previous state of the art in the three-way trade-off among coverage …,Proc. of NSDI,2013,30
System and method for preventing replay attacks,*,Preventing replay attacks on servers. At least one Bloom filter may be set up in a server fortracking requests received from clients. Identifying data may be generated for each request.The identifying data may be checked against the Bloom filter array. If a match is found; themessage may be a replay and may be rejected. If a match is not found; the requestidentifying data may be added to the Bloom filter and the request may be processed.,*,2011,30
Online Migration for Geo-distributed Storage Systems.,Nguyen Tran; Marcos K Aguilera; Mahesh Balakrishnan,Abstract We consider the problem of migrating user data between data centers. Weintroduce distributed storage overlays; a simple abstraction that represents data as stackedlayers in different places. Overlays can be readily used to cache data objects; migrate thesecaches; and migrate the home of data objects. We implement overlays as part of a key-valueobject store called Nomad; designed to span many data centers. Using Nomad; we compareoverlays against common migration approaches and show that overlays are more flexibleand impose less overhead. To drive migration decisions; we propose policies for predictingthe location of future accesses; focusing on a web mail application. We evaluate themigration policies using real traces of user activity from Hotmail.,USENIX Annual Technical Conference,2011,28
Altering document term vectors for classification: ontologies as expectations of co-occurrence,Meenakshi Nagarajan; Amit Sheth; Marcos Aguilera; Kimberly Keeton; Arif Merchant; Mustafa Uysal,Abstract In this paper we extend the state-of-the-art in utilizing background knowledge forsupervised classification by exploiting the semantic relationships between terms explicatedin Ontologies. Preliminary evaluations indicate that the new approach generally improvesprecision and recall; more so for hard to classify cases and reveals patterns indicating theusefulness of such background knowledge.,Proceedings of the 16th international conference on World Wide Web,2007,28
Food engineering interfaces,José Miguel Aguilera; Ricardo Simpson; Jorge Welti-Chanes; Daniela Bermudez Aguirre; Gustavo Barbosa-Canovas,The International Conference on Food Engineering is held every four years and drawsglobal participation. ICEF 10 will be held in April 2008 in Chile with the theme of foodengineering at interfaces. This will not be a typical proceedings with uneven contributions.Papers will be solicited from each plenary speaker plus two or three invited speakers fromeach topic and the goal is to publish a book that conveys the interdisciplinary spirit of themeeting as well as covers the topics in depth; creating a strong reference work. The idea isto explore how food engineers have to be prepared in years ahead not only to perform intheir normal activities but also to engage in new challenges and opportunities that will makethe profession more attractive; responsive; and able to create a larger impact. Thesechallenges and opportunities are within the profession and at interfaces with other areas …,*,2010,27
Reconfiguring replicated atomic storage: A tutorial,Marcos K Aguilera; Idit Keidar; Dahlia Malkhi; Jean-Philippe Martin; Alexander Shraer,Abstract We live in a world of Internet services such as email; social networks; websearching; and more; which must store increasingly larger volumes of data. These servicesmust run on cheap infrastructure; hence they must use distributed storage systems; and theyhave to provide reliability of data for long periods as well as availability; hence they mustsupport online reconfiguration to remove failed nodes and add healthy ones. Theknowledge needed to implement online reconfiguration is subtle and simple techniquesoften fail to work well. This tutorial provides an introductory overview of this topic; including adescription of the main technical challenges; as well as the various approaches that areused to address these challenges.,Bulletin of the EATCS,2010,27
Transactional shared memory system and method of control,*,A transactional shared memory system has a plurality of discrete application nodes; aplurality of discrete memory nodes; a network interconnecting the application nodes and thememory nodes; and a controller for directing transactions in a distributed system utilizing theshared memory. The memory nodes collectively provide an address space of sharedmemory that is provided to the application nodes via the network. The controller hasinstructions to transfer a batched transaction instruction set from an application node to atleast one memory node. This instruction set includes one or more write; compare and readinstruction subsets; and/or combinations thereof. At least one subset has a valid non nullmemory node identifier and memory address range. The memory node identifier may beindicated by the memory address range. The controller controls the memory node …,*,2010,27
Quiescent Reliable Communication and Quiescent Consensus inPartitionable Networks,Marcos Kawazoe Aguilera; Wei Chen; Sam Toueg,We consider partitionable networks with process crashes and lossy links; and focus on theproblems of reliable communication and consensus for such networks. For both problemswe seek algorithms that are quiescent; ie; algorithms that eventually stop sendingmessages. We first tackle the problem of reliable communication for partitionable networksby extending the results of [ACT97a]. In particular; we generalize the specification of theheartbeat failure detector HB; show how to implement it; and show how to use it to achievequiescent reliable communication. We then turn our attention to the problem of consensusfor partitionable networks. We first show that; even though this problem can be solved usinga natural extension of less than or greater than S; such solutions are not quiescent---in otherwords; less than or greater than S alone is not sufficient to achieve quiescent consensus …,*,1997,26
Location; location; location!: modeling data proximity in the cloud,Birjodh Tiwana; Mahesh Balakrishnan; Marcos K Aguilera; Hitesh Ballani; Z Morley Mao,Abstract Cloud applications have increasingly come to rely on distributed storage systemsthat hide the complexity of handling network and node failures behind simple; data-centricinterfaces (such as PUTs and GETs on key-value pairs). While these interfaces are veryeasy to use; the application is completely oblivious to the location of its data in the network;as a result; it has no way to optimize the placement of data or computation. In this paper; wepropose exposing the network location of data to applications. The primary challenge is thatdata does not usually exist at a single point in the network; it can be striped; replicated;cached and coded across different locations; in arbitrary ways that vary across storagesystems. For example; an item that is synchronously mirrored in both Seattle and Londonwill appear equally far from both locations for writes; but equally close to both locations for …,Proceedings of the 9th ACM SIGCOMM Workshop on Hot Topics in Networks,2010,24
On using network attached disks as shared memory,Marcos K Aguilera; Burkhard Englert; Eli Gafni,Abstract Recent advances in storage technology have enabled systems like Storage AreaNetworks; where disks are attached directly to the network; rather than being under thecontrol of a single process. In such an environment there is no a priori bound on the numberof processes that may access the network attached disks; and so uniform implementationsare desirable; that is; implementations that do not rely on the number of processes. Weinvestigate how to use network attached disks; where some disks may crash; as a sharedcommunication medium. To do so; we model disk blocks as Multi-Writer Multi-Reader(MWMR) shared memory registers that may fail by crashing. We study whether a finitenumber of such fail-prone registers can be used to uniformly implement various types of fail-flee target registers: wait-free atomic; atomic; and wait-free sequentially consistent. For …,Proceedings of the twenty-second annual symposium on Principles of distributed computing,2003,23
Olive: Distributed Point-in-Time Branching Storage for Real Systems.,Marcos Kawazoe Aguilera; Susan Spence; Alistair C Veitch,Abstract. This paper describes Olive; the first distributed block storage system to provideconsistent pointin-time branching. Point-in-time branching allows users to recursively andquickly snapshot or clone the storage state. It has a wide range of applications includingtesting new deployments or upgrades without disrupting a running system; quicklyprovisioning large homogeneous systems; and preserving old versions of data. Oliveprovides block-level access and strong consistency for broad applicability; allowing it tobranch file systems; database systems; and every other storage application that ultimatelystores data on block storage. Olive is distributed and replicated to provide fault toleranceand availability. Providing strong consistency for branching in a replicated distributed systemis a technical challenge that we address in this work. We evaluate Olive and show that …,NSDI,2006,22
Strict linearizability and the power of aborting,Marcos K Aguilera; Svend Frølund,Abstract—Linearizability is a popular way to define the concurrent behavior of sharedobjects. However; linearizability allows operations that crash to take effect at any time in thefuture. This can be disruptive to systems where crashes are externally visible. In suchsystems; an operation that crashes should either not happen or happen within some limitedtime frame—preferably before the process crashes. We define strict linearizability to achievethis semantics. Strict linearizability and wait-freedom are difficult to achieve simultaneously.For example; we show that it is impossible to obtain a strictly-linearizable wait-freeimplementation of objects as simple as multi-reader registers from single-reader ones. Toaddress this problem; we augment our shared objects by allowing them to abort theiroperations in the presence of concurrency. An aborted operation behaves like an …,Technical Report HPL-2003-241,2003,21
Yesquel: scalable sql storage for web applications,Marcos K Aguilera; Joshua B Leners; Michael Walfish,Abstract Web applications have been shifting their storage systems from sql to nosqlsystems. nosql systems scale well but drop many convenient sql features; such as joins;secondary indexes; and/or transactions. We design; develop; and evaluate Yesquel; asystem that provides performance and scalability comparable to nosql with all the features ofa sql relational system. Yesquel has a new architecture and a new distributed data structure;called YDBT; which Yesquel uses for storage; and which performs well under contention bymany concurrent clients. We evaluate Yesquel and find that Yesquel performs almost as wellas Redis---a popular nosql system---and much better than mysql Cluster; while handling sqlqueries at scale.,Proceedings of the 25th Symposium on Operating Systems Principles,2015,20
Surviving Congestion in Geo-Distributed Storage Systems.,Brian Cho; Marcos K Aguilera,Abstract. We present Vivace; a key-value storage system for web applications that spanmany geographicallydistributed sites. Vivace provides strong consistency and replicatesdata across sites for access locality and disaster tolerance. Vivace is designed to cope wellwith network congestion across sites; which occurs because the bandwidth across sites issmaller than within sites. To deal with congestion; Vivace relies on two novel algorithms thatprioritize a small amount of critical data to avoid delays due to congestion. We evaluateVivace to show its feasibility and effectiveness.,USENIX Annual Technical Conference,2012,20
RPC Chains: Efficient Client-Server Communication in Geodistributed Systems.,Yee Jiun Song; Marcos Kawazoe Aguilera; Ramakrishna Kotla; Dahlia Malkhi,Abstract We propose the RPC chain; a simple but powerful communication primitive thatallows an application to lessen the performance effects of wide-area links on enterprise anddata center applications that span multiple sites. This primitive chains together multiple RPCinvocations so that the computation can flow from one server to the next without involving theclient every time. We demonstrate that RPC chains can significantly reduce end-to-endlatency and network bandwidth in a storage application and a web application.,NSDI,2009,17
Brief announcement: Abortable and query-abortable objects,Marcos Kawazoe Aguilera; Svend Frolund; Vassos Hadzilacos; Stephanie Lorraine Horn; Sam Toueg,Abstract The setting for this paper is a distributed system in which asynchronous processesinteract by accessing linearizable; wait-free shared objects [2]. The typical task in such asystem is to design an implementation of a target object given certain “base objects”. Thecomplexity of such implementations is mostly due to the fact that multiple processes mayaccess the target object concurrently. It has been observed that in some systems contentionon shared objects is rare [3]. It is therefore tempting to try to simplify the task of implementingshared objects by allowing them to exhibit degraded behaviour in the (hopefully rare) eventof contention.,International Symposium on Distributed Computing,2006,17
Methods of writing and recovering erasure coded data,*,An embodiment of a method of writing erasure coded data swaps a new data block for anold data block within a stripe of erasure coded data. The stripe of erasure coded datacomprises data blocks and a redundancy block. The method computes a redundancyupdate parameter for the redundancy block using the new data block and the old data block.The method updates the redundancy block using the redundancy block; the redundancyupdate parameter; and a mathematical operator. An embodiment of a method of recoveringerasure coded data obtains a lock on a subset of data blocks and one or more redundancyblocks. The method determines whether the subset of the data blocks and the one or moreredundancy blocks includes sufficient blocks to restore the stripe. If not; the method relaxesthe lock to allow at least one update of the one or more redundancy blocks while not …,*,2014,16
Partial synchrony based on set timeliness,Marcos K Aguilera; Carole Delporte-Gallet; Hugues Fauconnier; Sam Toueg,Abstract We introduce a new model of partial synchrony for read-write shared memorysystems. This model is based on the simple notion of set timeliness—a naturalgeneralization of the seminal concept of timeliness in the partially synchrony model of Dworket al.(J. ACM 35 (2): 288–323; 1988). Despite its simplicity; the concept of set timeliness ispowerful enough to define a family of partially synchronous systems that closely matchindividual instances of the t-resilient k-set agreement problem among n processes;henceforth denoted (t; k; n)-agreement. In particular; we use it to give a partially synchronoussystem that is synchronous enough for solving (t; k; n)-agreement; but not enough for solvingtwo incrementally stronger problems; namely;(t+ 1; k; n)-agreement; which has a slightlystronger resiliency requirement; and (t; k− 1; n)-agreement; which has a slightly stronger …,Distributed Computing,2012,15
No Time for Asynchrony.,Marcos Kawazoe Aguilera; Michael Walfish,In their early days; distributed systems were designed under a synchronous (message-passing) model; which assumes bounds on processing and communication delays. Theseassumptions allowed processes to handle unresponsive processes easily with end-to-endtimeouts. However; current distributed systems cannot meet endto-end timing propertiesbecause they are composed of a diverse stack of layers; each with complex timing behavior.At best; these systems have predictable timing in the common case; but even slightdeviations from normal load or operating conditions can produce long delays that violate themodel's assumptions (§ 2.1). Since the model fails to represent reality; even systems that arecorrect under the model can produce errors in practice. Because of this mismatch; manyalgorithms and systems have been designed under the asynchronous model; in which …,HotOS,2009,15
Recoverability of a dataset associated with a multi-tier storage system,*,A method and a system of improving recoverability of a dataset associated with a multi-tierstorage system are provided. Updates to a dataset are stored in first storage. The datasetand a point-in-time copy of the dataset reside on second storage; and the first storageprovides higher reliability than the second storage. The dataset is restored using at least asubset of the stored updates in combination with the point-in-time copy in the event that thedataset is lost.,*,2011,14
Group communication system and method,*,Provided is a system and method for directing group communication in a systemenvironment that has a plurality of discrete application nodes networked with at least onediscrete memory node; establishing a shared memory providing a passive message queue.A code library permits an application node member of a group to assemble a messageselected from the group of send; join; leave; or read. The send; join and leave messagespermit a first application node to add a message to the queue for all members of a groupincluding the first application node at the time the message was added. The instruction setpermitting the addition of the message is executed atomically.,*,2009,13
Taming uncertainty in distributed systems with help from the network,Joshua B Leners; Trinabh Gupta; Marcos K Aguilera; Michael Walfish,Abstract Network and process failures cause complexity in distributed applications. When aremote process does not respond; the application cannot tell if the process or network havefailed; or if they are just slow. Without this information; applications can lose availability orcorrectness. To address this problem; we propose Albatross; a service that quickly reports toapplications the current status of a remote process---whether it is working and reachable; ornot. Albatross is targeted at data centers equipped with software defined networks (SDNs);allowing it to discover and enforce network partitions: Albatross borrows the old observationthat it can be better to cause a problem than to live with uncertainty; and applies this idea tonetworks. When enforcing partitions; Albatross avoids disruption by disconnecting onlyindividual processes (not entire hosts); and by allowing them to reconnect if the …,Proceedings of the Tenth European Conference on Computer Systems,2015,12
Method and system for securing block-based storage with capability data,*,A system for protecting data integrity in a network attached block-device; such as a disk or adisk array; includes a capability issuer module coupled to a metadata server. The capability-issuer module creates capability data in accordance with a predetermined set of rules; andissues the capability data to the client over a secured channel. The capability data includesa group identifier; a capability identifier; a block-device identifier; a list of extents forspecifying a range of blocks to which access is granted; an access mode for indicating thetype of access allowed; and a cryptographic string for preventing forgery of capabilities byunauthorized parties. A capability checker module coupled to a network attached block-device verifies that the client's block access request is consistent with the capability dataissued; and that the capability data is authentic. Upon verifying the client's capability data …,*,2004,12
Inferring causal paths in a distributed computing environment,*,According to one embodiment; a method comprises evaluating messages between nodes ofa distributed computing environment. Based on timing relationships of the messages;probability of causal links between pairs of messages determined. Based on the determinedprobability; at least one causal path comprising a plurality of causal links is inferred. Further;an overall probability that the inferred causal path is accurate is determined. In certainembodiments; the overall probability is output for the corresponding causal path to providean indication of the confidence of the accuracy of such inferred causal path.,*,2015,11
Distributed SQL query processing using key-value storage system,*,Distributed storage systems support SQL while also providing scalability and fault toleranceby utilizing an SQL library (the SQL execution component) layered on top of a transactionalkey-value system (the storage component). The SQL library comprises a parser and anexecution engine running at the client; while the storage component comprises a key-valuesystem for storing the data. The SQL library parses SQL queries received from clientapplications and maps them to transactions on the key-value system. The key-value systemstores data items identified by key and provides concurrency control mechanisms to handleconcurrent transactions. The key-value system may be a distributed system with severalstorage servers; each attached to one or more storage devices.,*,2016,10
System and method for ascribing resource consumption to activity in a causal path of a node of a distributed computing system,*,According to at least one embodiment; a method comprises identifying at least one causalpath that includes a node of a distributed computing environment that is of interest. Themethod further comprises analyzing the identified at least one causal path to determine atleast one time interval when the node is active in such causal path; and correlatingconsumption of a resource by the node to the node's activity in the at least one causal path.,*,2013,10
Fast asynchronous consensus with optimal resilience,Ittai Abraham; Marcos K Aguilera; Dahlia Malkhi,Abstract We give randomized agreement algorithms with constant expected running time inasynchronous systems subject to process failures; where up to a minority of processes mayfail. We consider three types of process failures: crash; omission; and Byzantine. For crashor omission failures; we solve consensus assuming private channels or a public-keyinfrastructure; respectively. For Byzantine failures; we solve weak Byzantine agreementassuming a public-key infrastructure and a broadcast primitive called weak sequencedbroadcast. We show how to obtain weak sequenced broadcast using a minimal trustedplatform module. The presented algorithms are simple; have optimal resilience; and haveoptimal asymptotic running time. They work against a sophisticated adversary that canadaptively schedule messages; processes; and failures based on the messages seen by …,International Symposium on Distributed Computing,2010,10
Stumbling over consensus research: misunderstandings and issues,Marcos K Aguilera,Abstract The consensus problem has recently emerged as a major interest in systemsconferences; yet the systems community tends to ignore most of the large body of theory onthis subject. In this chapter; I examine why this might be so. I point out misunderstandings bythe systems community of the theory. I also consider some issues in this work that remains tobe addressed by the theory community.,*,2010,10
The mailbox problem,Marcos K Aguilera; Eli Gafni; Leslie Lamport,Abstract We propose and solve a synchronization problem called the mailbox problem;motivated by the interaction between devices and processor in a computer. In this problem;a postman delivers letters to the mailbox of a housewife and uses a flag to signal a non-empty mailbox. The wife must remove all letters delivered to the mailbox and should notwalk to the mailbox if it is empty. We present algorithms and an impossibility result for thisproblem.,International Symposium on Distributed Computing,2008,10
Timeliness-based wait-freedom: a gracefully degrading progress condition,Marcos K Aguilera; Sam Toueg,Abstract We introduce a simple progress condition for shared object implementations that isgracefully degrading depending on the degree of synchrony in each run. This progressproperty; called timeliness-based wait-freedom; provides a gradual bridge betweenobstruction-freedom and wait-freedom in partially synchronous systems. We show thattimeliness-based wait-freedom can be achieved with synchronization primitives that are veryweak. More precisely; every object has a timeliness-based wait-free implementation thatuses only abortable registers (which are weaker than safe registers). As part of this work; wepresent a new leader election primitive that processes can use to dynamically compete forleadership such that if there is at least one timely process among the current candidates forleadership; then a timely leader is eventually elected among the candidates. We also …,Proceedings of the twenty-seventh ACM symposium on Principles of distributed computing,2008,10
Analysis of causal relations between intercommunicating nodes,*,Method and apparatus for determining causal relations between a plurality ofintercommunicating nodes. In various embodiments; trace data is input that describe inter-node communication. The trace data may include for each message sent between nodes atimestamp that indicates a time at which the message was sent; a source identifier thatidentifies a node from which the message was sent; and a destination identifier thatidentifies a node to which the message was sent. For each of one or more nodes; adetermination may be made as to whether one or more causal relations exist between a firstset of messages destined to the node and a second set of messages sourced from the nodeand destined to at least one other node. A causal relation may exist as a function of aprobability distribution of delay values that are differences between timestamps of …,*,2007,10
Selecting computing nodes in cloud service using replication topologies,*,A cloud statistics server generates statistics for a cloud service based on an identified dataitem and an identified operation. The cloud service may include various computing nodesand storage nodes. The cloud statistics may include expected completion times for theidentified operation and the identified data item with respect to each of the computing nodes.A computing node may be selected to execute the identified operation based on theexpected completion times. The generated statistics may be generated by the cloud statisticsserver using a network topology associated with the data item that is based on the latenciesor expected transfer times between the various storage nodes and computing nodes; and areplication strategy used by the cloud service. The topology may be implemented as adirected graph with edge weights corresponding to expected transfer times between each …,*,2015,9
The correctness proof of Ben-Or’s randomized consensus algorithm,Marcos K Aguilera; Sam Toueg,Abstract In a ground-breaking paper that appeared in 1983; Ben-Or presented the firstrandomized algorithm to solve consensus in an asynchronous message-passing systemwhere processes can fail by crashing. Although more efficient randomized algorithms weresubsequently proposed; Ben-Or's algorithm is still the simplest and most elegant one. Forthis reason; it is often taught in distributed computing courses and it appears in severaltextbooks. Even though Ben-Or's algorithm is widely known and it is very simple; surprisinglya proof of correctness of the algorithm has not yet appeared: previously published proofsmake some simplifying assumptions—specifically; they either assume that f< n/3 (n is thetotal number of processes and f is maximum number of processes that may crash) or that theadversary is weak; that is; it cannot see the process states or the content of the messages …,Distributed Computing,2012,9
Method and system for managing access control,*,A method for managing access control of a resource includes storing a revocation listcontaining a list of revoked capabilities and their corresponding groups; storing a group listcontaining a list of valid groups; receiving a capability revocation request to revoke aspecified capability; selecting a revocation method from among a plurality of revocationmethods; including an individual capability revocation method and a group revocationmethod; revoking the specified capability by invalidating the group to which the specifiedcapability belongs if the group revocation method is selected; and revoking the specifiedcapability by invalidating only the specified capability if the individual capability revocationmethod is selected.,*,2004,9
On the weakest failure detector for quiescent reliable communication,Marcos Kawazoe Aguilera; Wei Chen; Sam Toueg,We consider the problem of achieving reliable communication with quiescent algorithms (ie;algorithms that eventually stop sending messages) in asynchronous systems with processcrashes and lossy links; and show that; among failure detectors with bounded output size;less than or greater than P is the weakest one that can be used to solve this problem.Combined with a result in [ACT97a]; this shows that failure detectors that are commonlyused in practice; ie; those that output lists of suspects; are not always the best ones to solvea problem.,*,1997,8
Remote procedure call chains,*,A remote procedure call chain is provided that replaces multiple consecutive remoteprocedure calls to multiple servers from a client by allowing a client to specify multiplefunctions to be performed consecutively at multiple servers in a single remote procedure callchain. The remote procedure call chain is executed by a sequence of multiple servers. Eachserver executes a service function and a chaining function of the remote procedure callchain. The chaining function uses the state of the remote procedure call chain in thesequence of servers to determine the next server to receive the remote procedure call chain;and the service function to be executed by that server. After the last service function isperformed; the last server in the sequence of servers sends the results of the executedservice functions to the client that originated the remote procedure call chain.,*,2016,7
Identifying files associated with a workflow,*,To determine files associated with one or more workflows; a trace of accesses of files in atleast one server is received. The files are grouped into at least one set of files; where thefiles in the set are accessed together more than a predetermined number of times in thetrace. Files associated with the particular workflow are identified based on the at least oneset.,*,2011,7
Uniform Solvability with a finite number of MWMR registers,Marcos K Aguilera; Burkhard Englert; Eli Gafni,Abstract This paper introduces a new interesting research question concerning tasks. Theweak-test-and-set task has a uniform solution that requires only two Multi-Writer Multi-Reader (MWMR) registers. Recently it was shown that if we take the long-lived version andrequire a step complexity that is adaptive to interval contention then; like mutual exclusion;no solution with finitely many MWMR registers is possible. Here we show that there aresimple tasks which provably cannot be solved uniformly with finitely many MWMR registers.This opens up the research question of when a task is uniformly solvable using only finitelymany MWMR registers.,International Symposium on Distributed Computing,2003,7
Modifying data structures in distributed file systems,*,Embodiments include methods; apparatus; and systems for modifying data structures indistributed file systems. One method of software execution includes using minitransactionsthat include a set of compare items and a set of write items to atomically modify datastructures in a distributed file system.,*,2015,6
Black-box concurrent data structures for NUMA architectures,Irina Calciu; Siddhartha Sen; Mahesh Balakrishnan; Marcos K Aguilera,Abstract High-performance servers are Non-Uniform Memory Access (NUMA) machines. Tofully leverage these machines; programmers need efficient concurrent data structures thatare aware of the NUMA performance artifacts. We propose Node Replication (NR); a black-box approach to obtaining such data structures. NR takes an arbitrary sequential datastructure and automatically transforms it into a NUMA-aware concurrent data structuresatisfying linearizability. Using NR requires no expertise in concurrent data structure design;and the result is free of concurrency bugs. NR draws ideas from two disciplines: shared-memory algorithms and distributed systems. Briefly; NR implements a NUMA-aware sharedlog; and then uses the log to replicate data structures consistently across NUMA nodes. NRis best suited for contended data structures; where it can outperform lock-free algorithms …,Proceedings of the Twenty-Second International Conference on Architectural Support for Programming Languages and Operating Systems,2017,5
Tracing information flow using a signature,*,To perform information tracing; at least one signature to be traced is received. It is detectedthat a first process causes data to be provided to at least one of a second process and a file.It is determined whether the data contains the at least one signature. In response todetermining that the data contains the at least one signature; a log is updated. The logcontains information identifying at least one of processes and files that are part of a flow ofthe at least one signature.,*,2011,5
Adaptive progress: a gracefully-degrading liveness property,Marcos K Aguilera; Sam Toueg,Abstract We introduce a simple liveness property for shared object implementations that isgracefully degrading depending on the degree of synchrony in each run. This property;called adaptive progress; provides a gradual bridge between obstruction-freedom and wait-freedom in partially-synchronous systems. We show that adaptive progress can be achievedusing very weak shared objects. More precisely; every object has an implementation thatensures adaptive progress and uses only abortable registers (which are weaker than saferegisters). As part of this work; we present a new leader election abstraction that processescan use to dynamically compete for leadership such that if there is at least one timelyprocess among the current candidates for leadership; then a timely leader is eventuallyelected among the candidates. We also show that this abstraction can be implemented …,Distributed Computing,2010,5
Autograph: automatically extracting workflow file signatures,Anna Povzner; Kimberly Keeton; Arif Merchant; Charles B Morrey III; Mustafa Uysal; Marcos K Aguilera,Abstract Storage management activities; such as reporting; file placement; migration andarchiving; require the ability to discover files that belong to an application workflow byrelying only on information from the file server. Some classes of application workflows; suchas rendering an animated sequence from its graphics models or building an application fromits source files; often exhibit a high degree of repeatability. We describe a system calledAutograph that exploits this repeatability to discover files that belong to an applicationworkflow. Our approach examines traces of file accesses; finds repeated and correlatedaccesses; and infers which files likely belong to the same workflow. Our solution targetsserver workflows and uses file server traces; which contain less process and file informationthan the local machine traces used in prior work. We show that Autograph successfully …,ACM SIGOPS Operating Systems Review,2009,5
Method and apparatus for estimating time delays in systems of communicating nodes,*,A method for calculating a probability distribution that represents probabilities of occurrenceof time differences between causally related incoming messages and outgoing messages ofa node in a system of communicating nodes is described. The method comprises obtaininga set of time differences between times at which incoming messages arrive at a node andtimes at which outgoing messages leave the node; the set of time differences including timedifferences between causally related incoming messages and outgoing messages and timedifferences between incoming messages and outgoing messages that are not causallyrelated. The method also comprises processing the set of time differences using a statisticalestimation algorithm to calculate the probability distribution that represents probabilities ofoccurrence of time differences between causally related incoming messages and …,*,2006,5
On the erasure recoverability of mds codes under concurrent updates,Marcos K Aguilera; Ramaprabhu Janakiraman; Lihao Xu,We consider a fault-tolerant distributed storage system that protects data on k disks using asystematic linear (n; k) MDS code. In such a system; updates to data blocks requirecorresponding updates to check blocks. Concurrent fault-prone access by multiple writerscan drive the system into an inconsistent state with reduced tolerance for disk failures. Weshow tight bounds on the erasure recoverability of an (n; k) MDS code in this scenario. Thebounds depend not just on the minimum distance of the code; but also on the maximumnumber of concurrent faulty writers and the manner in which they attempt to update thecheck blocks (one at a time/all at once),Information Theory; 2005. ISIT 2005. Proceedings. International Symposium on,2005,5
The Many Faces of Consistency.,Marcos K Aguilera; Douglas B Terry,Abstract The notion of consistency is used across different computer science disciplines fromdistributed systems to database systems to computer architecture. It turns out thatconsistency can mean quite different things across these disciplines; depending on whouses it and in what context it appears. We identify two broad types of consistency; stateconsistency and operation consistency; which differ fundamentally in meaning and scope.We explain how these types map to the many examples of consistency in each discipline.,IEEE Data Eng. Bull.,2016,4
System for and method of writing and reading redundant data,*,In accordance with an embodiment of the invention; a method of writing and readingredundant data is provided. Data is written by storing a copy of the data along with atimestamp and a signature at each of a set of storage devices. The data is read by retrievingthe copy of the data; the timestamp and the signature from each of a plurality of the set ofdata storage devices. One of the copies of the data is selected to be provided to a requestorof the data. Each of the storage devices of the set is requested to certify the selected copy ofthe data. Provided that a proof of certification of the selected copy of the data is valid; thestorage devices of the set are instructed to store the selected copy of the data along with anew timestamp.,*,2013,4
Remote storage with byzantine servers,Marcos K Aguilera; Ram Swaminathan,Abstract We consider the problem of providing byzantine-tolerant storage in distributedsystems where client-server links are much thinner and slower than server-server links. Weprovide storage algorithms that are unique in two ways. First; our algorithms take intoconsideration the asymmetry in network connectivity by minimizing client-servercommunication. To provide this property; we rely on a small amount of partial (eventual)synchrony. Second; our algorithms provide a new property called limited effect; which isimportant for storage systems. To provide the latter property; we use synchronized clocks;which are increasingly common due to GPS devices and NTP; even in otherwise"asynchronous systems" like the Internet. We present two algorithms called QUAD andLINEAR; which provide a trade-off between failure resiliency and efficiency. Our …,Proceedings of the twenty-first annual symposium on Parallelism in algorithms and architectures,2009,4
Distributed Computing,Nancy A Lynch; Alexander A Shvartsman,DISC; the International Symposium on DIStributed Computing; is an international forum onthe theory; design; analysis; implementation and application of distributed systems andnetworks. DISC is organized in cooperation with the European Association for TheoreticalComputer Science (EATCS). This volume contains the papers presented at DISC 2010; the24th International Symposium on Distributed Computing; held on September 13–15; 2010 inCambridge; Massachusetts. The volume also includes the citation for the 2010 Edsger W.Dijkstra Prize in Distributed Computing; jointly sponsored by DISC and PODC (the ACMSymposium on Principles of Distributed Computing); which was presented at PODC 2010 inZurich to Tushar D. Chandra; Vassos Hadzilacos; and Sam Toueg for their work on failuredetectors. There were 135 papers submitted to the symposium (in addition there were 14 …,24th International Symposium; DISC 2010; Cambridge; MA; USA; September 13-15; 2010. Proceedings,1996,4
Non-volatile Memory through Customized Key-value Stores.,Leonardo Mármol; Jorge Guerra; Marcos K Aguilera,Non-volatile memory; or NVM; is coming. Several technologies are maturing (FeRAM;ReRAM; PCM; DWM; FJG RAM); and soon we expect products from Intel; Micron; HP;SanDisk; and/or Samsung. Some of these products promise memory density close to flashand performance within a reasonable factor of DRAM. This technology could substantiallyimprove the performance of software systems; especially storage systems. Unfortunately;using NVM is hard: each technology has its quirks; and the details of products are not yetavailable. We need a way to integrate NVM into our software systems; without fullknowledge of all the NVM product details and without having to redesign every softwaresystem for each forthcoming NVM technology. We advocate the use of customized key-valuestores. Rather than programming directly on NVM; developers (1) design a key-value …,HotStorage,2016,3
Consistency-based service-level agreements in cloud storage environments,*,An application programming interface is provided that allows applications to assign multipleservice-level agreements to their data transactions. The service-level agreements includelatency bounds and consistency guarantees. The applications may assign utility values toeach of the service-level agreements. A monitor component monitors the various replicanodes in a cloud storage system for latency and consistency; and when a transaction isreceived from an application; the monitor determines which of the replica nodes can likelyfulfill the transaction in satisfaction of any of the service-level agreements. Where multipleservice-level agreements can be satisfied; the replica node that can fulfill the transactionaccording to the service-level agreement with the greatest utility is selected. The applicationmay be charged for the transaction based on the utility of the service-level agreement that …,*,2015,3
Electronic message authentication,*,A method; and associated apparatus; comprises calculating a first part of a messageauthentication function by a first processor; calculating a second part of the messageauthentication function by a second processor; and combining the first and second parts intothe message authentication function by the first or second processor. The messageauthentication function can be used to authenticate data transmitted between the firstprocessor and a third processor.,*,2008,3
Transaction rate limiters for peer-to-peer systems,Marcos K Aguilera; Mark Lillibridge; Xiaozhou Li,We introduce transaction rate limiters; new mechanisms that limit (probabilistically) themaximum number of transactions a user of a peer-to-peer system can do in any givenperiod. They can be used to limit the consumption of selfish users and the damage done bymalicious users. They complement reputation systems; solving the traitor problem. We givesimple distributed algorithms that work over time frames as short as seconds and are veryrobust: they use no trusted servers and continue to work even when attacked by a largefraction of users colluding. Our algorithms are based on a new primitive we have devised;probably-anonymous queries; which guarantees anonymity with a specified probability.,Peer-to-Peer Computing; 2008. P2P'08. Eighth International Conference on,2008,3
Method of seeking consensus among computer processes,*,An embodiment of a method of seeking consensus among computer processes begins witha first step of saving a new timestamp in a timestamp array for a particular process. Themethod continues with a second step of determining whether a most recent entry in adecision array includes a previously established consensus decision. In a third step; if themost recent entry does not include the previously established consensus decision; themethod saves a proposed decision as a consensus decision. Otherwise; in a fourth step; themethod saves the previously established consensus decision as the consensus decision. Ina fifth step; if a most recent timestamp in the timestamp array continues to be the newtimestamp; the method returns the consensus decision. Otherwise; in a sixth step; themethod returns an abort indicator.,*,2008,3
On the weakest failure detector for uniform reliable broadcast,Marcos Kawazoe Aguilera; Sam Toueg; Borislav Deianov,Abstract Uniform Reliable Broadcast (URB) is a communication primitive that requires that ifa process delivers a message; then all correct processes also deliver this message. A recentPODC paper [HR99] uses Knowledge Theory to determine what failure detectors arenecessary to implement this primitive in asynchronous systems with process crashes andlossy links that are fair. In this paper; we revisit this problem using a different approach; andprovide a result that is simpler; more intuitive; and; in a precise sense; more general.,*,1999,3
Providing a distributed balanced tree across plural servers,*,To access data; a distributed balanced tree having nodes distributed across plural servers isaccessed. Version information is associated with the nodes of the distributed balanced tree.During an operation that accesses the distributed balanced tree; the version information ischecked to determine whether content of one or more nodes of the distributed balanced treehas changed during the operation.,*,2014,2
Tutorial on geo-replication in data center applications,Marcos K Aguilera,Abstract Data center applications increasingly require a* geo-replicated* storage system;that is; a storage system replicated across many geographic locations. Geo-replication canreduce access latency; improve availability; and provide disaster tolerance. It turns out thereare many techniques for geo-replication with different trade-offs. In this tutorial; we give anoverview of these techniques; organized according to two orthogonal dimensions: level ofsynchrony (synchronous and asynchronous) and type of storage service (read-write; statemachine; transaction). We explain the basic idea of these techniques; together with theirapplicability and trade-offs.,ACM SIGMETRICS Performance Evaluation Review,2013,2
Announcing the 2012 Edsger W. Dijkstra prize in distributed computing,Marcos K Aguilera; Dahlia Malkhi; Keith Marzullo; Alessandro Panconesi; Andrzej Pelc; Roger Wattenhofer,The ACM-EATCS Edsger W. Dijkstra Prize in Distributed Computing is awarded tooutstanding papers on the principles of distributed computing; whose significance andimpact on the theory or practice of distributed computing have been evident for at least tenyears. The prize is sponsored jointly by the ACM Symposium on Principles of DistributedComputing (PODC) and the EATCS Symposium on Distributed Computing (DISC).,ACM SIGARCH Computer Architecture News,2012,2
Correctness Proof of Ben-Or's Randomized Consensus Algorithm,Marcos Kawazoe Aguilera; Sam Toueg,We present a correctness proof for Ben-Or's Randomized Consensus Algorithm for the casein which processes can fail by crashing; and a majority of processes is correct. This is thefirst time that the proof of Ben-Or's algorithm appears for this case. The proof has beenextracted from [AT96]: it is a simplification of the correctness proof of a more complexconsensus algorithm that involves both randomization and failure detection.,*,1998,2
Replicating data across data centers,*,Abstract The present techniques prioritize transmission of feature information associatedwith data copies in data transmission; and selectively transmit the data copies whennecessary. As the size of the feature information is small compared with the data copies; andas feature information is transmitted using prioritized messages; delays caused bycongestion in the network are reduced. Based on the use of prioritized messages; thepresent techniques provide solutions for replicating data across data centers whenconducting various data operations including reading; writing; and modifying data. Thepresent techniques also replicate data across data centers while providing consistency;access locality; and disaster tolerance.,*,2018,1
Principles of Distributed Systems,Marcos K Aguilera; Leonardo Querzoni; Marc Shapiro,On behalf of the Technical Committee of the International Conference on Principles ofDistributed Systems; we are very pleased to present in this volume the proceedings of the18th edition of the conference; which was held during 16 to 19 December 2014; in Cortinad'Ampezzo; Italy. OPODIS; the International Conference on Principles of DistributedSystems; is an international forum for the exchange of state-of-the-art knowledge ondistributed computing and systems among researchers from around the world. All aspects ofdistributed systems are within the scope of OPODIS; including theory; specification; design;performance; and system building. OPODIS has traditionally been strong in the theoreticalaspects of distributed systems. Since the 2013 edition; OPODIS is seeking to expand itscoverage to include the overlap between theoretical solutions and practical …,Cham: Springer International Publishing,2014,1
Distributed Computing and Networking: 12th International Conference; ICDCN 2011; Bangalore; India; January 2-5; 2011; Proceedings,Marcos K Aguilera; Haifeng Yu; Nitin H Vaidya; Vikram Srinivasan; Romit Roy Choudhury,This book constitutes the refereed proceedings of the 12th International Conference onDistributed Computing and Networking; ICDCN 2011; held in Bangalore; India; duringJanuary 2-5; 2011. The 31 revised full papers and 3 revised short papers presented togetherwith 3 invited lectures were carefully reviewed and selected from 140 submissions. Thepapers address all current issues in the field of distributed computing and networking. Beinga leading forum for researchers and practitioners to exchange ideas and share bestpractices; ICDCN also serves as a forum for PhD students to share their research ideas andget quality feedback from the well-renowned experts in the field.,*,2011,1
Reliable and secure distributed storage using erasure codes,Marcos K Aguilera; Ramaprabhu Janakiraman; Lihao Xu,Abstract—Large-scale enterprise data is increasingly organized in the form of distributedstorage. The three important issues that arise when moving to distributed storage arereliability (data should survive the failure of a small number of disks); security (onlyauthorized clients should access storage) and concurrency (multiple clients should be ableto access storage simultaneously). We introduce a collection of methods based onerasurecorrecting codes to design reliable and secure distributed storage that can functioncorrectly and efficiently even when concurrently accessed by multiple independent clients.Our methods are general and are capable of wide usage in a variety of distributed storageapplications.,*,2010,1
Building distributed applications using Sinfonia,Marcos K Aguilera; Christos Karamanolis; Arif Merchant; Mehul Shah; Alistair Veitch,Abstract distributed systems; scalability; fault tolerance We present Sinfonia; a data sharingservice that simplifies the design and implementation of distributed applications that need tobe reliable and scalable. At the core of Sinfonia is an efficient minitransaction primitive thatallows applications to manipulate shared state consistently; while hiding concerns aboutfault-tolerance and concurrent execution. We show how to use Sinfonia to build two different;complex applications: a cluster file system and a group communication service. Ourapplications scale well and achieve performance comparable to other implementations builtwithout Sinfonia.,*,2006,1
Generating Unforgeable Evidence for Secure Communications,Minwen Ji; Tom Rodehefferб; Marcos Aguilera,Abstract The Internet is increasingly being used for serious transactions involving moneyand goods. However; there hardly exists any means for users of Internet transactions toobtain third-party verifiable evidence of the transactions in which they participate. As asolution to this problem; we propose the use of a semi-trusted third party; called a digitalwitness; that can provide unforgeable transaction evidence without ever seeing thetransaction contents. The witness is attached to secure communication sessions in anunintrusive manner: it requires no changes to existing servers or protocols. The key idea inenabling such a witness service is a novel algorithm that splits the computation of amessage authentication code (MAC) between the client and the witness. We haveimplemented a prototype witness; tested it with real web sites and measured its …,HP Laboratories Palo Alto,2005,1
Remote memory in the age of fast networks,Marcos K Aguilera; Nadav Amit; Irina Calciu; Xavier Deguillard; Jayneel Gandhi; Pratap Subrahmanyam; Lalith Suresh; Kiran Tati; Rajesh Venkatasubramanian; Michael Wei,Abstract As the latency of the network approaches that of memory; it becomes increasinglyattractive for applications to use remote memory---random-access memory at anothercomputer that is accessed using the virtual memory subsystem. This is an old idea whosetime has come; in the age of fast networks. To work effectively; remote memory must addressmany technical challenges. In this paper; we enumerate these challenges; discuss theirfeasibility; explain how some of them are addressed by recent work; and indicate otherpromising ways to tackle them. Some challenges remain as open problems; while othersdeserve more study. In this paper; we hope to provide a broad research agenda around thistopic; by proposing more problems than solutions.,Proceedings of the 2017 Symposium on Cloud Computing,2017,*
How to implement any concurrent data structure for modern servers,Irina Calciu; Siddhartha Sen; Mahesh Balakrishnan; Marcos K Aguilera,Abstract In this paper; we propose a method to implement any concurrent data structure. Ourmethod produces implementations that work particularly well in non-uniform memory access(NUMA) machines. Due to recent architecture trends; highly concurrent servers today areNUMA machines; where the cost of accessing a memory location is not the same acrossevery core. To fully leverage these machines; programmers need efficient concurrent datastructures that are aware of the NUMA performance artifacts. We propose Node Replication(NR); a black-box approach to obtaining such data structures. NR takes an arbitrarysequential data structure and automatically transforms it into a NUMA-aware concurrent datastructure satisfying linearizability. Using NR requires no expertise in concurrent datastructure design; and the result is free of concurrency bugs. NR draws ideas from two …,ACM SIGOPS Operating Systems Review,2017,*
Brief Announcement: Black-Box Concurrent Data Structures for NUMA Architectures,Irina Calciu; Siddhartha Sen; Mahesh Balakrishnan; Marcos K Aguilera,Abstract Recent work introduced a method to automatically produce concurrent data structuresfor numa architectures. We present a summary of that work … Keywords and phrases concurrentdata structures; log; NUMA architecture; replication … Modern data centers increasingly employnon-uniform memory access (numa) machines with multiple numa nodes. Each node consistsof some (hardware) threads and local memory. A thread can access memory in any node; butaccessing local memory is faster than remote memory at another node. To obtain the bestperformance; concurrent data structures must take this fact into consideration: they must benuma-aware. Unfortunately; designing concurrent data structures is difficult; and numa-awarenessmakes it harder because the algorithm must try to reduce the number of remote memoryaccesses. In this work; we show how to obtain numa-aware concurrent data structures …,LIPIcs-Leibniz International Proceedings in Informatics,2017,*
Locking Timestamps Versus Locking Objects,Marcos Aguilera; Tudor David; Rachid Guerraoui,Abstract We present multiversion timestamp locking (MVTL); a new genre of multiversionconcurrency control algorithms for serializable transactions. The key idea behind MVTL issimple and novel: lock individual time points instead of locking objects or versions. Aftershowing what a generic MVTL algorithm looks like; we demonstrate MVTL's expressiveness:we present several simple MVTL algorithms that address limitations of current multiversionschemes; by committing transactions that previous schemes would abort; by avoiding theproblem of serial aborts and ghost aborts; and by offering a way to prioritize transactions thatshould not be aborted.,*,2017,*
Principles of Distributed Systems; 18th Int. Conf. on (OPODIS 2014),Marc Shapiro; Marcos Kawazoe Aguilera; Leonardo Querzoni,*,*,2014,*
Principles of Distributed Systems: 18th International Conference; OPODIS 2014; Cortina D'Ampezzo; Italy; December 16-19; 2014. Proceedings,Marcos K Aguilera; Leonardo Querzoni; Marc Shapiro,This book constitutes the refereed proceedings of the 18th International Conference onPrinciples of Distributed Systems; OPODIS 2014; Cortina d'Ampezzo; Italy; in December2014. The 32 papers presented together with two invited talks were carefully reviewed andselected from 98 submissions. The papers are organized in topical sections on consistency;distributed graph algorithms; fault tolerance; models; radio networks; robots; self-stabilization; shared data structures; shared memory; synchronization and universalconstruction.,*,2014,*
Special issue with selected papers from DISC 2012,Marcos K Aguilera,This special issue of Distributed Computing contains three papers that were selected among27 papers that appeared in the Proceedings of the 26th International Symposium onDistributed Computing (DISC 2012); held in Salvador; Brazil; on 16–18 October 2012. Theselected papers were initially chosen by the Program Committee as representing some ofthe best work that appeared in the conference. Subsequently; each selected paper wasrevised and expanded by its authors to produce an article submission. Each submission wasthen refereed according to the usual practices and quality standards of DistributedComputing. The first paper in the special issue received the Best Student Paper Award atDISC 2012. It is titled The CB Tree: A,Distributed Computing,2014,*
Special Issue on Distributed Computing,Marcos K Aguilera; Haifeng Yu,This special issue of Theory of Computing Systems is dedicated to distributed computing.The International Conference on Distributed Computing and Networking (ICDCN) 2011 hadtwo tracks; distributed computing and networking; each with a separate program committee.ICDCN 2011 got 140 submissions from over 15 countries; and submissions were carefullyreviewed and evaluated by the program committee. For the distributed computing track; theProgram Committee eventually selected 15 regular papers and 1 short paper for inclusion inthe proceedings and presentation at the conference. The networking track had 16 regularpapers and 2 short papers. From the distributed computing track of ICDCN 2011; theprogram committee invited the authors of a number of selected papers to submit extendedversions of their conference papers for publication in journals. Based on the topic of a …,Theory of Computing Systems,2012,*
Distributed Computing: 26th International Symposium; DISC 2012; Salvador; Brazil; October 16-18; 2012; Proceedings,Marcos K Aguilera,This book constitutes the refereed proceedings of the 26th International Symposium onDistributed Computing; DISC 2012; held in Salvador; Brazil; in October 2012. The 27 revisedfull papers presented together with 24 brief announcements were carefully reviewed andselected from 119 submissions. The papers are organized in topical sections on sharedmemory; mobile agents and overlay networks; wireless and multiple access channelnetworks; dynamic networks; distributed graph algorithms; wireless and loosely connectednetworks; robots; and lower bounds and separation.,*,2012,*
Distributed Computing-Article 7 (32 pages)-Dynamic Atomic Storage without Consensus,MK Aguilera; I Keidar; D Malkhi; A Shraer,*,Journal of the ACM-Association for ComputingMachinery,2011,*
Selection of Papers from 12th International Conference on Distributed Computing and Networking (ICDCN 2011)-Introduction,Marcos K Aguilera; Haifeng Yu,*,SIGOPS Operating Systems Review,2011,*
Principles of Distributed Systems: 12th International Conference; OPODIS 2008; Luxor; Egypt; December 15-18; 2008. Proceedings,Theodore P Baker; Alain Bui; Sébastien Tixeuil,This volume contains the 30 regular papers; the 11 short papers and the abstracts of twoinvited keynotes that were presented at the 12th International Conference on Principles ofDistributed Systems (OPODIS) held during December 15–18; 2008 in Luxor; Egypt. OPODISis a yearly selective international forum for researchers and practitioners in design anddevelopment of distributed systems. This year; we received 102 submissions from 28countries. Each submission was carefully reviewed by three to six Program Committeemembers with the help of external reviewers; with 30 regular papers and 11 short papersbeing selected. The overall quality of submissions was excellent and there were manypapers that had to be rejected because of organization constraints yet deserved to bepublished. The two invited keynotes dealt with hot topics in distributed systems:“The Next …,*,2008,*
The Mailbox Problem,Leslie Lamport; Eli Gafni; Marcos K Aguilera,Abstract This paper addresses a little synchronization problem that I first thought about in the1980s. When Gafni visited MSR Silicon valley in 2008; I proposed it to him and we beganworking on it. I thought the problem was unsolvable; but we began to suspect that there wasa solution. Gafni had an idea for an algorithm; but instead of trying to understand the idea; Iasked for an actual algorithm. We then went through a series of iterations in which Gafniwould propose an algorithm; I'd code it in PlusCal (see [161]) and let the model checker findan error trace; which I would then give to him.(At some point; he learned enough PlusCal todo the coding himself; but he never installed the TLA+ tools and I continued to run the modelchecker.) This process stopped when Aguilera joined MSR and began collaborating with us.He turned Gafni's idea into an algorithm that the model checker approved of. Gafni and …,*,2008,*
On implementing Omega in systems with weak reliability and synchrony a ssumptions,Marcos Aguilera; Carole Delporte-Gallet; Hugues Fauconnier; Sam Toueg,We study the feasibility and cost of implementing Omega---a fundamental failure detector atthe core of many algorithms---in systems with weak reliability and synchrony assumptions.Intuitively; Omega allows processes to eventually elect a common leader. We first give analgorithm that implements Omega in a weak system S where (a) except for some unknowntimely process s; all processes may be arbitrarily slow or may crash; and (b) only the outputlinks of s are eventually timely (all other links can be arbitrarily slow and lossy). Previouslyknown algorithms for Omega worked only in systems that are strictly stronger than S in termsof reliability or synchrony assumptions. We next show that algorithms that implement$\Omega $ in system S are necessarily expensive in terms of communication complexity: allcorrect processes (except possibly one) must send messages forever; moreover; a …,*,2007,*
Efficient distributed fault-tolerant storage with erasure codes,Marcos K Aguilera; Ramaprabhu Janakiraman; Lihao Xu,Abstract We study the design of a distributed storage system that uses erasure codes tomaintain data redundancy while disks can be written concurrently by multiple nodes. Wepropose and analyze a protocol that is highly optimized for the common cases; in thesecases; a read requires only a round-trip to the disk; and a write requires only a round-trip toeach disk that requires updating. To tolerate tp node failures and td disk failures; the protocoluses δ= 1+(tp+ 1)(td+ tp/2− 1) redundant disks.,*,2004,*
Solving Leader Election and Consensus Using One Timely Link (and other results),Marcos K Aguilera; Carole Delporte-Gallet; Hugues Fauconnier; Sam Toueg,Consider a system À where processes are synchronous and links are reliable; but oneprocess may crash. How much link synchrony is necessary to solve consensus in À? Fromthe results in [9; 8; 7]; we know that:(a) if all the links are asynchronous; then consensuscannot be solved; and (b) if all the links are eventually timely (denoted•-timely) thenconsensus can be solved. 1 In this paper we show that to solve consensus in À; it issufficient to have just one; directed link ''that is•-timely—all the other links;¢¥“æµof them; canbe asynchronous. There is no need to know which link is•-timely; when it becomes timely; orwhat is its bound on message delay. Surprisingly; it is not even required that the source 'ordestination'of this link be correct:'or'may actually crash; in which case the link ''is•-timely in atrivial way; and it is useless for sending messages! Nevertheless; the existence of one …,*,2003,*
Broadening the applicability of failure detectors,Marcos Kawazoe Aguilera,Abstract Failure detection is a fundamental paradigm for achieving consensus; a centralproblem in fault-tolerant computing. Prior work on failure detection and consensus byChandra and Toueg [CT96] only considered a simple computing model; in which a processthat crashes is never allowed to recover; there are no communication failures; and thenetwork does not partition. In this thesis; we extend this work to more general models; inwhich the following is allowed:(1) processes that crash may eventually recover and resumeexecution;(2) communication links may fail by intermittently losing messages; and (3)communication links may crash and cause network partitions. These models are morerealistic than the one of Chandra and Toueg; and we believe that our contribution is veryuseful and applicable to real systems.,*,2000,*
Ramaprabhu Janakiraman,Marcos Aguilera,*,*,*,*
LADC 2016 Steering Committee,Marcos Aguilera; Jean Arlat; Elias P Duarte Jr; Fabiola Greve; Mohamed Kaaniche; Rogério de Lemos; Eliane Martins; Regina Moraes; Juan Carlos Ruiz Garcia,A not-for-profit organization; IEEE is the world's largest technical professional organization dedicatedto advancing technology for the benefit of humanity. © Copyright 2017 IEEE - All rightsreserved. Use of this web site signifies your agreement to the terms and conditions.,*,*,*
Models and Methodologies,Aad van Moorsel; Ashvin Goel; Fernando Pedone; Lorenzo Alvisi; Marco Vieira; Marcos K Aguilera; Pascal Felber; Phil Koopman; Paulo Verissimo; David Lie; Elisa Bertino; Giuliano Casale; Hakim Weatherspoon; Kaustubh Joshi; Matti Hiltunen; Miguel Correia; Peter Bodik; Tom Ristenpart; Angelos Stavrou; Bruce Maggs; Lin Zhong; Marc Dacier; Michael Bailey; Neeraj Suri; Saurabh Bagchi; Wenke Lee; Yair Amir,Software Aad van Moorsel; Newcastle University Ashvin Goel; University of Toronto FernandoPedone; University of Lugano Lorenzo Alvisi; University of Texas Austin Marco Vieira; Universityof Coimbra Marcos K. Aguilera; Microsoft Pascal Felber; University of Neuchatel PhilKoopman; Carnegie Mellon University Paulo Verissimo; University of Lisboa … Clouds DavidLie; University of Toronto Elisa Bertino; Purdue University Giuliano Casale; Imperial CollegeHakim Weatherspoon; Cornell University Kaustubh Joshi; AT&T Labs Matti Hiltunen; AT&T LabsMiguel Correia; Technical University of Lisboa Peter Bodik; Microsoft Tom Ristenpart; Universityof Wisconsin … Networks Angelos Stavrou; George Mason University Bruce Maggs; Duke Universityand Akamai Lin Zhong; Rice University Marc Dacier; Symantec Michael Bailey; University ofMichigan Neeraj Suri; Technical University of Darmstadt Saurabh Bagchi; Purdue …,*,*,*
Abeni; L.; see Buttazzo; GC; TC Mar 02 289-302 Agrawal; DP; see Schweitz; EA; TC Dec 02 1435-1441 Agrawal; P.; see Yi-Bing Lin; TC Oct 02 1154-1168 Aguilera;...,MK Aguilera; M Ahmadi; E Al-Daoud; BM Al-Hashimi; C Alippi; L Alkalai; E Anceaume; WG Aref; J Arlat; D Avresky; Baihua Zheng; P Banerjee; J Beck; L Benini; M Bhide; LN Bhuyan; IF Blake; A Bogliolo; F Brasileiro; A Brown; JD Bruguera; A Burns; M Burtscher,This index covers all technical items-papers; correspondence; reviews; etc.-that appeared inthis periodical during the year; and items from previous years that were commented upon orcorrected in this year. Departments and other items may also be covered if they have beenjudged to have archival value. The Author Index contains the primary entry for each item;listed under the first author's name. The primary entry includes the coauthors' names; the titleof the paper or other item; and its location; specified by the publication abbreviation; year;month; and inclusive pagination. The Subject Index contains entries describing the itemunder all appropriate subject headings; plus the first author's name; the publicationabbreviation; month; and year; and inclusive pages. Note that the item title is found onlyunder he primary entry in the Author Index.,*,*,*
Transactions with Consistency Choices on Geo-Replicated Cloud Storage,Douglas Terry; Vijayan Prabhakaran; Ramakrishna Kotla; Mahesh Balakrishnan; Marcos K Aguilera,ABSTRACT Pileus is a replicated and scalable key-value storage system that features geo-replicated transactions with varying degrees of consistency chosen by applications. Eachtransaction reads from a snapshot selected based on its requested consistency; from strongto eventual consistency or intermediate guarantees such as read-my-writes; monotonic;bounded; and causal.,*,*,*
Reporting partitions authoritatively (using SDNs) for more robust distributed systems,Joshua B Leners; Trinabh Gupta; Youngjin Kwon; Marcos K Aguilera; Michael Walfish,Abstract. This paper addresses network partitions; a core challenge for both distributedsystems and networking. The networking community aims to reduce the frequency ofnetwork partitions; by engineering ever more reliable networks. The distributed systemscommunity aims to reduce the severity of network partitions; by designing robust applicationlogic. Unfortunately; this application logic is typically complex; because of uncertainty:unresponsive processes may be crashed; slow; temporarily partitioned; or permanentlypartitioned. This paper explores a co-design of applications and the network in which thenetwork tells applications that processes (not hosts) are permanently partitioned withcertainty; which in turn simplifies application logic. We embody this approach in Hawk; afailure and partition detector that provides formal guarantees. These guarantees can …,*,*,*
SAN 2010,BBN Robert Laddaga; Scott Alexander; Jonathan Smith; Marcos K Aguilera; Saleem Bhatti; Ritu Chadha; Jon Crowcroft; Dan Dacosta; Joseph Evans; Patrick Lardieri; Yun Mao; Gary Minden; Chris Ramming; Steve Schwab; Christian Tschudin,Robert Laddaga; BBN; USA Scott Alexander; Telcordia; USA Jonathan Smith; University ofPennsylvania; USA … Marcos K. Aguilera; Microsoft Research Silicon Valley; USA SaleemBhatti; University of St. Andrews; UK Ritu Chadha; Telcordia; USA Jon Crowcroft; University ofCambridge; USA Dan Dacosta; Lockheed-Martin; USA Joseph Evans; University of Kansas;USA Karen Haigh; BBN; USA Patrick Lardieri; Lockheed-Martin; USA Yun Mao; AT&T Labs –Research; USA Gary Minden; University of Kansas; USA Chris Ramming; Intel; USA SteveSchwab; Cobham; UK Greg Troxel; BBN; USA Christian Tschudin; University of Basel; SwitzerlandSteve Zabele; BBN; USA,*,*,*
LADC 2011,Ana Cavalli; Ana Paula Couto Silva; Andrea Bondavalli; Andrea Ceccarelli; Antonio Casimiro; Claudio Soriente; Damián Serrano; Domenico Cotroneo; Douglas Blough; Elena Barrantes; Elias P Duarte Jr; Fabíola Greve; Farnam Jahanian; Fátima Mattiello-Francisco; Felix Salfner; Flavio Junqueira; Flávio Assis Silva; Francesco Brancati; Gustavo Figueiredo; Hélène Waeselynck; Hector Cancela; Jean Arlat; João Cunha; Johan Karlsson; Joni da Silva Fraga; Jose Pereira; Lívia Sampaio; Luciana Arantes; Magnos Martinello; Marc Dacier; Marco Vieira; Marcos Aguilera; Matti Hiltunen; Miroslaw Malek,Ana Cavalli; Institut Telecom; France Ana Paula Couto Silva; Universidade Federal de Juiz deFora; Brazil Andrea Bondavalli; University of Florence; Italy Andrea Ceccarelli; University ofFlorence; Italy Antonio Casimiro; Universidade de Lisboa; Portugal Bruno Cabral; CISUC; Universityof Coimbra; Portugal Carlos Maziero; PUCPR; Brazil Claudio Soriente; Universidad Politecnicade Madrid; Spain Damián Serrano; Universidad Politécnica de Madrid - Facultad deInformática; Spain Domenico Cotroneo; Universita' di Napoli Federico II; Italy DouglasBlough; Georgia Institute of Technology; USA Eduardo Alchieri; UFSC; Brazil ElenaBarrantes; Universidad de Costa Rica; Costa Rica Eliane Martins; UNICAMP; Brazil Elias P.Duarte Jr.; UFPR; Brazil Fabíola Greve; Universidade Federal da Bahia; Brazil FarnamJahanian; University of Michigan; USA Fátima Mattiello-Francisco; INPE; Brazil Felix …,*,*,*
The 32nd International Conference on Distributed Computing Systems,Marcos Aguilera; Toshimitsu Masuzawa; Elizabeth Borowsky; Christian Cachin; Keren Censor-Hillel; Wei Chen; Ajoy Datta; Carole Delporte-Gallet; Faith Ellen; Rui Fan; Hugues Fauconnier; Pierre Fraigniaud; Seth Gilbert; Wojciech Golab; Rachid Guerraoui; Amos Korman; Dariusz Kowalski; Zvi Lotker; Marina Papatriantafilou; Boaz Patt-Shamir; Maria Potop-Butucaru; Sergio Rajsbaum; Andrea Richa; Sébastien Tixeuil; Koichi Wada; Jennifer Welch; Masafumi Yamashita; Li Cui; Ling Liu; Yair Amir; Danilo Ardagna; Roger Barga; Keke Chen; Ludmila Cherkasova; Geoffrey Fox; Andrzej Goscinski; Kazuo Iwano; Weijia Jia; Shinji Kikuchi,Algorithms and Theory Marcos Aguilera (chair) Microsoft Research; USA Toshimitsu Masuzawa(chair) Osaka University; Japan Elizabeth Borowsky; Akamai Technologies; USA ChristianCachin; IBM Research Keren Censor-Hillel; MIT Wei Chen; Microsoft Research Asia AjoyDatta; University of Nevada; Las Vegas Carole Delporte-Gallet; Université Paris Diderot; FranceFaith Ellen; University of Toronto; Canada Rui Fan; Nanyang Technological University HuguesFauconnier; Université Paris Diderot Pierre Fraigniaud; CNRS and Université Paris Diderot SethGilbert; National University of Singapore Wojciech Golab; HP Labs Rachid Guerraoui; EPFLAmos Korman; CNRS and Université Paris Diderot Dariusz Kowalski; University of LiverpoolZvi Lotker; Ben Gurion University Marina Papatriantafilou; Chalmers University of TechnologyBoaz Patt-Shamir; Tel Aviv University Maria Potop-Butucaru; Université Pierre et Marie …,*,*,*
