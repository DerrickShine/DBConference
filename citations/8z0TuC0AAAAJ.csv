Accelerating XPath location steps,Torsten Grust,Abstract This work is a proposal for a database index structure that has been specificallydesigned to support the evaluation of XPath queries. As such; the index is capable tosupport all XPath axes (including ancestor; following; preceding-sibling; descendant-or-self;etc.). This feature lets the index stand out among related work on XML indexing structureswhich had a focus on regular path expressions (which correspond to the XPath axeschildren and descendant-or-self plus name tests). Its ability to start traversals from arbitrarycontext nodes in an XML document additionally enables the index to support the evaluationof path traversals embedded in XQuery expressions. Despite its flexibility; the new index canbe implemented and queried using purely relational techniques; but it performs especiallywell if the underlying database host provides support for R-trees. A performance …,Proceedings of the 2002 ACM SIGMOD international conference on Management of data,2002,638
MonetDB/XQuery: a fast XQuery processor powered by a relational engine,Peter Boncz; Torsten Grust; Maurice Van Keulen; Stefan Manegold; Jan Rittinger; Jens Teubner,Abstract Relational XQuery systems try to re-use mature relational data managementinfrastructures to create fast and scalable XML database technology. This paper describesthe main features; key contributions; and lessons learned while implementing such asystem. Its architecture consists of (i) a range-based encoding of XML documents intorelational tables;(ii) a compilation technique that translates XQuery into a basic relationalalgebra;(iii) a restricted (order) property-aware peephole relational query optimizationstrategy; and (iv) a mapping from XML update statements into relational updates. Thus; thissystem implements all essential XML database functionalities (rather than a single feature)such that we can learn from the full consequences of our architectural decisions. Whileimplementing this system; we had to extend the state-of-the-art with a number of new …,Proceedings of the 2006 ACM SIGMOD international conference on Management of data,2006,360
Multi-tenant databases for software as a service: schema-mapping techniques,Stefan Aulbach; Torsten Grust; Dean Jacobs; Alfons Kemper; Jan Rittinger,Abstract In the implementation of hosted business services; multiple tenants are oftenconsolidated into the same database to reduce total cost of ownership. Common practice isto map multiple single-tenant logical schemas in the application to one multi-tenant physicalschema in the database. Such mappings are challenging to create because enterpriseapplications allow tenants to extend the base schema; eg; for vertical industries orgeographic regions. Assuming the workload stays within bounds; the fundamental limitationon scalability for this approach is the number of tables the database can handle. To get goodconsolidation; certain tables must be shared among tenants and certain tables must bemapped into fixed generic structures such as Universal and Pivot Tables; which candegrade performance. This paper describes a new schema-mapping technique for multi …,Proceedings of the 2008 ACM SIGMOD international conference on Management of data,2008,331
Staircase join: Teach a relational DBMS to watch its (axis) steps,Torsten Grust; Maurice van Keulen; Jens Teubner,Abstract Relational query processors derive much of their effectiveness from the awarenessof specific table properties like sort order; size; or absence of duplicate tuples. This textapplies (and adapts) this successful principle to database-supported XML and XPathprocessing: the relational system is made tree aware; ie; tree properties like subtree size;intersection of paths; inclusion or disjointness of subtrees are made explicit. We propose alocal change to the database kernel; the staircase join; which encapsulates the necessarytree knowledge needed to improve XPath performance. Staircase join operates on an XMLencoding which makes this knowledge available at the cost of simple integer operations(eg;+;≤). We finally report on quite promising experiments with a staircase join enhancedmain-memory database kernel.,Proceedings of the 29th international conference on Very large data bases-Volume 29,2003,224
Accelerating XPath evaluation in any RDBMS,Torsten Grust; Maurice Van Keulen; Jens Teubner,Abstract This article is a proposal for a database index structure; the XPath accelerator; thathas been specifically designed to support the evaluation of XPath path expressions. Assuch; the index is capable to support all XPath axes (including ancestor; following;preceding-sibling; descendant-or-self; etc.). This feature lets the index stand out amongrelated work on XML indexing structures which had a focus on the child and descendantaxes only. The index has been designed with a close eye on the XPath semantics as well asthe desire to engineer its internals so that it can be supported well by existing relationaldatabase query processing technology: the index (a) permits set-oriented (or; rather;sequence-oriented) path evaluation; and (b) can be implemented and queried using well-established relational index structures; notably B-trees and R-trees. We discuss the …,ACM Transactions on Database Systems (TODS),2004,200
XQuery on SQL hosts,Torsten Grust; Sherif Sakr; Jens Teubner,Abstract Relational database systems may be turned into efficient XML and XPathprocessors if the system is provided with a suitable relational tree encoding. This paperextends this relational XML processing stack and shows that an RDBMS can also serve as ahighly efficient XQuery runtime environment. Our approach is purely relational: XQueryexpressions are compiled into SQL code which operates on the tree encoding. The core ofthe compilation procedure trades XQuery's notions of variable scopes and nested iteration(FLWOR blocks) for equi-joins. The resulting relational XQuery processor closely adheres tothe language semantics; eg; it obeys node identity as well as document and sequenceorder; and can support XQuery's full axis feature. The system exhibits quite promisingperformance figures in experiments. Somewhat unexpectedly; we will also see that the …,Proceedings of the Thirtieth international conference on Very large data bases-Volume 30,2004,170
FERRY: database-supported program execution,Torsten Grust; Manuel Mayr; Jan Rittinger; Tom Schreiber,Abstract We demonstrate the language F erry and its editing; compilation; and executionenvironment F erry D eck. Ferry's type system and operations match those of scripting orprogramming languages; its compiler has been designed to emit (bundles of) compliant andefficient SQL: 1999 statements. Ferry acts as glue that permits a programming style in whichdevelopers access database tables using their programming language's own syntax andidioms--the Ferry-expressible fragments of such programs may be executed by a relationaldatabase back-end; ie; close to the data. The demonstrator F erry D eck implements compile-and-execute-as-you-type interactivity for F erry and offers a variety of (graphical) hooks toexplore and inspect this approach to database-supported program execution.,Proceedings of the 2009 ACM SIGMOD International Conference on Management of data,2009,80
Incremental updates for materialized OQL views,Dieter Gluche; Torsten Grust; Christof Mainberger; Marc H Scholl,Abstract This work discusses the CROQUE approach to the maintenance problem formaterialized views. In a CROQUE database; application-specified collections (type extentsor classes) themselves need not be materialized. In exchange; the system maintains(redundant) views of the application data that help to minimize query response time. Weunderstand views as functions of database objects and examine algebraic properties ofthese functions; in particular linearity; to derive incremental update plans. It turns out that it isfeasible to employ ODMG OQL as a view definition language—instead of inventing aspecialized one—in such an environment; since the majority of its clauses represent linearfunctions.,International Conference on Deductive and Object-Oriented Databases,1997,72
Why off-the-shelf RDBMSs are better at XPath than you might expect,Torsten Grust; Jan Rittinger; Jens Teubner,Abstract To compensate for the inherent impedance mismatch between the relational datamodel (tables of tuples) and XML (ordered; unranked trees); tree join algorithms havebecome the prevalent means to process XML data in relational databases; most notably theTwigStack [6]; structural join [1]; and staircase join [13] algorithms. However; the addition ofthese algorithms to existing systems depends on a significant invasion of the underlyingdatabase kernel; an option intolerable for most database vendors. Here; we demonstratethat we can achieve comparable XPath performance without touching the heart of thesystem. We carefully exploit existing database functionality and accelerate XPath navigationby purely relational means: partitioned B-trees bring access costs to secondary storage to aminimum; while aggregation functions avoid an expensive computation and removal of …,Proceedings of the 2007 ACM SIGMOD international conference on Management of data,2007,67
Pathfinder: XQuery---the relational way,Peter Boncz; Torsten Grust; Maurice van Keulen; Stefan Manegold; Jan Rittinger; Jens Teubner,Abstract Relational query processors are probably the best understood (as well as the bestengineered) query engines available today. Although carefully tuned to process instances ofthe relational model (tables of tuples); these processors can also provide a foundation forthe evaluation of" alien"(non-relational) query languages: if a relational encoding of the aliendata model and its associated query language is given; the RDBMS may act like a special-purpose processor for the new language.,Proceedings of the 31st international conference on Very large data bases,2005,57
Relational Algebra: Mother Tongue: XQuery: Fluent,Torsten Grust; Jens Teubner,This work may be seen as a further proof of the versatility of the relational database model.Here; we add XQuery to the catalog of languages which RDBMSs are able to" speak"fluently. Given suitable relational encodings of sequences and ordered; unranked trees-thetwo data structures that form the backbone of the XML and XQuery data models-we describea compiler that translates XQuery expressions into a simple and quite standard relationalalgebra which we expect to be efficiently implementable on top of any relational queryengine. The compilation procedure is fully compositional and emits algebraic code thatstrictly adheres to the XQuery language semantics: document and sequence order as wellas node identity are obeyed. We exercise special care in translating arbitrarily nestedXQuery FLWOR iteration constructs into equi-joins; an operation which RDBMSs can …,Twente Data Management Workshop on XML Databases,2004,47
Avalanche-safe LINQ compilation,Torsten Grust; Jan Rittinger; Tom Schreiber,Abstract We report on a query compilation technique that enables the construction ofalternative efficient query providers for Microsoft's Language Integrated Query (LINQ)framework. LINQ programs are mapped into an intermediate algebraic form; suitable forexecution on any SQL: 1999-capable relational database system. This compilationtechnique leads to query providers that (1) faithfully preserve list order and nesting; bothbeing core features of the LINQ data model;(2) support the complete family of LINQ'sStandard Query Operators;(3) bring database support to LINQ to XML where the originalprovider performs in-memory query evaluation; and; most importantly;(4) emit SQL statementsequences whose size is only determined by the input query's result type (and thusindependent of the database size).,Proceedings of the VLDB Endowment,2010,45
Tree awareness for relational DBMS kernels: Staircase join,Torsten Grust; Maurice Van Keulen,Abstract Relational database management systems (RDBMSs) derive much of theirefficiency from the versatility of their core data structure: tables of tuples. Such tables aresimple enough to allow for an efficient representation on all levels of the memory hierarchy;yet sufficiently generic to host a wide range of data types. If one can devise mappings from adata type τ to tables and from operations on τ to relational queries; an RDBMS may be apremier implementation alternative. Temporal intervals; complex nested objects; and spatialdata are sample instances for such types τ.,*,2003,44
Query evaluation in CROQUE,Torsten Grust; Joachim Kröger; Dieter Gluche; Andreas Heuer; Marc H Scholl,Abstract With the substantial change of declarative query languages from plain SQL to theso-called “object SQLs”; in particular OQL; there has surprisingly been not much change inthe way problems of query representation and optimization for such languages are tackled.We identify some of the difficulties pure algebraic approaches experience when facingobject models and the operations defined for them. Calculus-style formalisms suite thischallenge better; but are said not to be efficiently implementable in the database context.This paper proposes a hybrid query representation and optimization approach; combiningthe strengths of a many-sorted query algebra and the monoid comprehension calculus. Weshow that efficient execution plans beyond nested-loop processing can be derived—not onlyfor σ-π-⋈ queries—in such a framework. The translation process accounts for queries …,British National Conference on Databases,1997,41
Purely Relational FLWORs.,Torsten Grust,ABSTRACT We report on a compilation procedure that derives relational algebra plans fromarbitrarily nested XQuery FLWOR blocks. While recent research was able to developrelational encodings of trees which may turn RDBMSs into highly efficient XPath and XMLSchema processors; here we describe relational encodings of nested iteration; variables;and the item sequences to which variables are bound. The developed techniques are purelyrelational in more than one sense:(a) we rely on a standard (or rather: classical) algebra thatis readily supported by relational engines; and (b) we use relational concepts like functionaland multivalued dependencies to significantly simplify the emitted plans. This work blendswell with the mentioned tree encodings and thus contributes a further important buildingblock to investigations into XQuery processors based on relational database technology.,XIME-P,2005,38
A SQL: 1999 code generator for the pathfinder XQuery compiler,Torsten Grust; Manuel Mayr; Jan Rittinger; Sherif Sakr; Jens Teubner,Abstract The Pathfinder XQuery compiler has been enhanced by a new code generator thatcan target any SQL: 1999-compliant relational database system (RDBMS). This codegenerator marks an important next step towards truly relational XQuery processing; a branchof database technology that aims to turn RDBMSs into highly efficient XML and XQueryprocessors without the need to invade the relational database kernel. Pathfinder; aretargetable front-end compiler; translates input XQuery expressions into DAG-shapedrelational algebra plans. The code generator then turns these plans into sequences of eitherSQL: 1999 statements or view definitions which jointly implement the (sometimes intricate)XQuery semantics. In a sense; this demonstration thus lets relational algebra and SQL swaptheir traditional roles in database query processing. The result is a code generator that (1) …,Proceedings of the 2007 ACM SIGMOD international conference on Management of data,2007,37
Haskell boards the Ferry,George Giorgidze; Torsten Grust; Tom Schreiber; Jeroen Weijers,Abstract Relational database management systems can be used as a coprocessor forgeneral-purpose programming languages; especially for those program fragments that carryout data-intensive and data-parallel computations. In this paper we present a Haskell libraryfor database-supported program execution. Data-intensive and data-parallel computationsare expressed using familiar combinators from the standard list prelude and are entirelyexecuted on the database coprocessor. Programming with the expressive listcomprehension notation is also supported. The library; in addition to queries of basic types;supports computations over arbitrarily nested tuples and lists. The implementation avoidsunnecessary data transfer and context switching between the database coprocessor and theprogramming language runtime by ensuring that the number of generated relational …,Symposium on Implementation and Application of Functional Languages,2010,35
Dependable cardinality forecasts for XQuery,Jens Teubner; Torsten Grust; Sebastian Maneth; Sherif Sakr,Abstract Though inevitable for effective cost-based query rewriting; the derivation ofmeaningful cardinality estimates has remained a notoriously hard problem in the context ofXQuery. By basing the estimation on a relational representation of the XQuery syntax; weshow how existing cardinality estimation techniques for XPath and proven relationalestimation machinery can play together to yield dependable forecasts for arbitrary XQuery(sub) expressions. Our approach benefits from a light-weight form of data flow analysis.Abstract domain identifiers guide our query analyzer through the estimation process andallow for informed decisions even in case of deeply nested XQuery expressions. A variant ofprojection paths [15] provides a versatile interface into which existing techniques for XPathcardinality estimation can be plugged in seamlessly. We demonstrate an implementation …,Proceedings of the VLDB Endowment,2008,34
Translating OQL into Monoid Comprehensions: Stuck with Nested Loops?,Torsten Grust; Marc H Scholl,This work tries to employ the monoid comprehension calculus-which has proven to be anadequate framework to capture the semantics of modern object query languages featuring afamily of collection types like sets; bags; and lists-in a twofold manner: First; serving as atarget language for the translation of ODMG OQL queries. We review work done in this fieldand also give comprehension calculus equivalents for the recently introduced OQL 1.2concepts. Second; we use monoid comprehensions as the formalism in which we try to findefficient execution methods working on a rich set of physical structures (including indices;vertical and horizontal decomposition; etc.). The main problem coming up here is the"nested-loop nature" of the calculus expressions. While these loop-based semantics forevaluating comprehensions at least provide a way for executing OQL queries; their …,*,1996,34
Small-footprint applicative query interpreter method; system and program product,*,A method system; and program product for managing a relational database in a pervasivecomputing environment. The system receives queries in a query language; and representsthe queries in accordance with a declarative language paradigm; this may be explicit orimplicit. The queries represented in a declarative language paradigm are converted (eg;represented; translated; or cross-compiled) to an imperative language (including a datastructure that is interpreted by an imperative language); and the imperative languagequeries are executed on the database. The queries may be explicitly converted to anintermediate declarative representative; and thereafter converted to an imperative languagerepresentation of the original queries for execution. Alternatively; the queries may be directlyconverted to an imperative language representation of the declarative language and the …,*,2010,33
A synthesis of complex objects and object-orientation,Marc Scholl; Hans-Jörg Schek,Complex Object models; semantic or knowledge representation models on the one side;and object-oriented models on the other side are currently considered candidates for futuredatabases. Either of them have their particular strongpoints and weaknesses; such that up tonow no single model could be identified to suit all needs. Database models provide limitedstructuring capabilities and too poor semantics and object-oriented approaches suffer fromtheir navigational one-object-at-a-time style of operation; that is; they need set oriented"object algebra" operations. In this paper we show how the approaches can be mixed into asingle coherent approach; in an evolutionary way preserving their respective advantages:flexibility through powerful structuring primitives; rich semantics; encapsulation; andefficiency through optimizable descriptive; set-oriented query and update languages.,IFIP TC2/WG 2.6,1991,32
eXrQuy: Order indifference in XQuery,Torsten Grust; Jan Rittinger; Jens Teubner,There are more spots than immediately obvious in XQuery expressions where order isimmaterial for evaluation-this affects most notably; but not exclusively; expressions in thescope of unordered {} and the argument of fn: unordered (). Clearly; performance gains arelurking behind such expression contexts but the prevalent impact of order on the XQuerysemantics reaches deep into any compliant XQuery processor; making it non-trivial to setthis potential free. Here; we describe how the relational XQuery compiler Pathfinderuniformly exploits such order indifference in a purely algebraic fashion: Pathfinder-emittedplans faithfully implement the required XQuery order semantics but (locally) ignore orderwherever this is admitted.,Data Engineering; 2007. ICDE 2007. IEEE 23rd International Conference on,2007,28
Monad comprehensions: a versatile representation for queries,Torsten Grust,Summary This chapter is an exploration of the possibilities that open up if we consistentlyadopt a style of database query and collection processing which allows us to look insidecollections and thus enables us to play with atomic constructors instead of the monolithiccollection values they build. This comprehension of values goes well together with acompletely functional style of query formulation: queries map between the constructors ofdifferent collection types. It turns out that a single uniform type of mapping; thecatamorphism; is sufficient to embrace the functionality of today's database querylanguages; like SQL; OQL; but also XPath. Monad comprehensions provide just the rightamount of syntactic sugar to express these mappings in a style that is similar to relationalcalculus (but goes beyond its expressiveness). The major portion of this chapter; however …,*,2004,28
Pathfinder: Relational xquery over multi-gigabyte XML inputs in interactive time,Peter Alexander Boncz; Torsten Grust; Stefan Manegold; Jan Rittinger; Jens Teubner,textabstractUsing a relational DBMS as back-end engine for an XQuery processing systemleverages relational query optimization and scalable query processing strategies providedby mature DBMS engines in the XML domain. Though a lot of theoretical work has beendone in this area and various solutions have been proposed; no complete systems havebeen made available so far to give the practical evidence that this is a viable approach. Inthis paper; we describe the ourely relational XQuery processor Pathfinder that has been builton top of the extensible RDBMS MonetDB. Performance results indicate that the system iscapable of evaluating XQuery queries efficiently; even if the input XML documents becomehuge. We additionally present further contributions such as loop-lifted staircase join;techniques to derive order properties and to reduce sorting effort in the generated …,Information Systems [INS],2005,25
How to comprehend queries functionally,Torsten Grust; Marc H Scholl,Abstract Compilers and optimizers for declarative query languages use some form ofintermediate language to represent user-level queries. The advent of compositional querylanguages for orthogonal type systems (eg; OQL) calls for internal query representationsbeyond extensions of relational algebra. This work adopts a view of query processing whichis greatly influenced by ideas from the functional programming domain. A uniform formalframework is presented which covers all query translation phases; including user-levelquery language compilation; query optimization; and execution plan generation. We pursuethe type-based design—based on initial algebras—of a core functional language which isthen developed into an intermediate representation that fits the needs of advanced queryprocessing. Based on the principle of structural recursion we extend the language by …,Journal of Intelligent Information Systems,1999,23
Bringing back monad comprehensions,George Giorgidze; Torsten Grust; Nils Schweinsberg; Jeroen Weijers,Abstract This paper is about a Glasgow Haskell Compiler (GHC) extension that generalisesHaskell's list comprehension notation to monads. The monad comprehension notationimplemented by the extension supports generator and filter clauses; as was the case in theHaskell 1.4 standard. In addition; the extension generalises the recently proposed paralleland SQL-like list comprehension notations to monads. The aforementioned generalisationsare formally defined in this paper. The extension will be available in GHC 7.2. This papergives several instructive examples that we hope will facilitate wide adoption of the extensionby the Haskell community. We also argue why the do notation is not always a good fit formonadic libraries and embedded domain-specific languages; especially for those that arebased on collection monads. Should the question of how to integrate the extension into …,ACM SIGPLAN Notices,2011,22
Let SQL drive the XQuery workhorse (XQuery join graph isolation),Torsten Grust; Manuel Mayr; Jan Rittinger,Abstract A purely relational account of the true XQuery semantics can turn any relationaldatabase system into an XQuery processor. Compiling nested expressions of the fullycompositional XQuery language; however; yields odd algebraic plan shapes featuringscattered distributions of join operators that currently overwhelm commercial SQL queryoptimizers. This work rewrites such plans before submission to the relational database back-end. Once cast into the shape of join graphs; we have found off-the-shelf relational queryoptimizers---the B-tree indexing subsystem and join tree planner; in particular---to cope andeven be autonomously capable of" reinventing" advanced processing strategies that haveoriginally been devised specifically for the XQuery domain; eg; XPath step reordering; axisreversal; and path stitching. Performance assessments provide evidence that relational …,Proceedings of the 13th International Conference on Extending Database Technology,2010,20
Comprehending queries,Torsten Grust,Abstract There are no compelling reasons why database-internal query representationshave to be designated by operators. This thesis describes a world in which datatypesdetermine the comprehension of queries. In this world; a datatype is characterized by itsalgebra of value constructors. These algebras are principal. Query operators are secondaryin the sense that they simply box (recursive) programs that describe how to form a queryresult by application of datatype constructors. Often; operators will be unboxed to inspectand possibly rewrite these programs. Query optimization then means to deal with thetransformation of programs.,*,2000,19
An injection with tree awareness: adding staircase join to postgreSQL,Sabine Mayer; Torsten Grust; Maurice Van Keulen; Jens Teubner,The syntactic wellformedness constraints of XML (opening and closing tags nest properly)imply that XML processors face the challenge to efficiently handle data that takes the shapeof ordered; unranked trees. Although RDBMSs have originally been designed to managetable-shaped data; we propose their use as XML and XPath processors. In our setup; thedatabase system employs a relational XML document encoding; the XPath accelerator [1];which maps information about the XML node hierarchy to a table; thus making it possible toevaluate XPath expressions on SQL hosts. Conventional RDBMSs; nevertheless; remainignorant of many interesting properties of the encoded tree data; and were thus found tomake no or poor use of these properties. This is why we devised a new join algorithm;staircase join [2]; which incorporates the tree-specific knowledge required for an efficient …,Proceedings of the Thirtieth international conference on Very large data bases-Volume 30,2004,18
Pathfinder: XQuery off the relational shelf.,Torsten Grust; Jan Rittinger; Jens Teubner,Abstract The Pathfinder project makes inventive use of relational database technology—originally developed to process data of strictly tabular shape—to construct efficient database-supported XML and XQuery processors. Pathfinder targets database engines that implementa set-oriented mode of query execution: many off-the-shelf traditional database systemsmake for suitable XQuery runtime environments; but a number of off-beat storage back-endsfit that bill as well. While Pathfinder has been developed with a close eye on the XQuerysemantics; some of the techniques that we will review here will be generally useful toevaluate XQuery-style iterative languages on database back-ends.,IEEE Data Eng. Bull.,2008,17
Visualizing vowel harmony,Thomas Mayer; Christian Rohrdantz; Miriam Butt; Frans Plank; Daniel Keim,Abstract This paper deals with vowel harmony from a cross-linguistic perspective; with theaim of visualizing the distribution of vowels in corpora so that languages with vowel harmonycan be distinguished from those lacking it. For this purpose vowel successions within wordsare statistically analyzed and visualized in a quadratic matrix whose rows and columns areordered according to their distribution in the text; with more similar vowels occurring closertogether. The method has been tested on the basis of Bible corpora in a variety of languagesincluding well-known harmonic languages such as Turkish; Hungarian and Finnish as wellas non-harmonic languages.,Linguistic issues in language technology,2010,13
XQuery join graph isolation: celebrating 30+ years of XQuery processing technology,Torsten Grust; Manuel Mayr; Jan Rittinger,A purely relational account of the true XQuery semantics can turn any relational databasesystem into an XQuery processor. Compiling nested expressions of the fully compositionalXQuery language; however; yields odd algebraic plan shapes featuring scattereddistributions of join operators that currently overwhelm commercial SQL query optimizers.This work rewrites such plans before submission to the relational database back-end. Oncecast into the shape of join graphs; we have found off-the-shelf relational query optimizers—the B-tree indexing subsystem and join tree planner; in particular—to cope and even beautonomously capable of" reinventing" advanced processing strategies that have originallybeen devised specifically for the XQuery domain; eg; XPath step reordering; axis reversal;and path stitching. Performance assessments provide evidence that relational query …,Data Engineering; 2009. ICDE'09. IEEE 25th International Conference on,2009,13
An inflationary fixed point operator in XQuery,Loredana Afanasiev; Torsten Grust; Maarten Marx; Jan Rittinger; Jens Teubner,We introduce a controlled form of recursion in XQuery; an inflationary fixed point operator;familiar from the context of relational databases. This operator imposes restrictions on theexpressible types of recursion; but we show that it is sufficiently versatile to capture a widerange of interesting use cases; including Regular XPath and its core transitive closureoperator. While the optimization of general user-defined recursive functions in XQueryappears elusive; we describe how inflationary fixed points can be efficiently evaluated;provided that the recursive XQuery expressions are distributive. We test distributivitysyntactically and algebraically; and provide experimental evidence that XQuery processorscan benefit substantially from this mode of evaluation.,Data Engineering; 2008. ICDE 2008. IEEE 24th International Conference on,2008,13
Observing SQL queries in their natural habitat,Torsten Grust; Jan Rittinger,Abstract We describe H abitat; a declarative observational debugger for SQL. H abitatfacilitates true language-level (not: plan-level) debugging of; probably flawed; SQL queriesthat yield unexpected results. Users mark SQL subexpressions of arbitrary size and thenobserve whether these evaluate as expected. H abitat understands query nesting and freerow variables in correlated subqueries; and generally aims to not constrain users whilesuspect subexpressions are marked for observation. From the marked SQL text; H abitat'salgebraic compiler derives a new query whose result represents the values of the desiredobservations. These observations are generated by the target SQL database host itself andare derived from the original data: H abitat does not require prior data extraction or extradebugging middleware. Experiments with TPC-H database instances indicate that …,ACM Transactions on Database Systems (TODS),2013,11
Recursion in XQuery: put your distributivity safety belt on,Loredana Afanasiev; Torsten Grust; Maarten Marx; Jan Rittinger; Jens Teubner,Abstract We introduce a controlled form of recursion in XQuery; an inflationary fixed pointoperator; familiar from the context of relational databases. This operator imposes restrictionson the expressible types of recursion; but it is sufficiently versatile to capture a wide range ofinteresting use cases; including Regular XPath and its core transitive closure operator.While the optimization of general user-defined recursive functions in XQuery appearselusive; we describe how inflationary fixed points can be efficiently evaluated; provided thatthe recursive XQuery expressions are distributive. We test distributivity syntactically andalgebraically; and provide experimental evidence that XQuery processors can benefitsubstantially from this mode of evaluation.,Proceedings of the 12th International Conference on Extending Database Technology: Advances in Database Technology,2009,11
MonetDB/XQuery—consistent and efficient updates on the pre/Post plane,Peter Boncz; Jan Flokstra; Torsten Grust; Maurice van Keulen; Stefan Manegold; Sjoerd Mullender; Jan Rittinger; Jens Teubner,Abstract Relational XQuery processors aim at leveraging mature relational DBMS queryprocessing technology to provide scalability and efficiency. To achieve this goal; variousstorage schemes have been proposed to encode the tree structure of XML documents in flatrelational tables. Basically; two classes can be identified:(1) encodings using fixed-lengthsurrogates; like the preorder ranks in the pre/post encoding [5] or the equivalentpre/size/level encoding [8]; and (2) encodings using variable-length surrogates; like; eg;ORDPATH [9] or P-PBiTree [12]. Recent research [1] showed a clear advantage of theformer for efficient evaluation of XPath location steps; exploiting techniques like cheap nodeorder tests; positional lookup; and node skipping in staircase join [7]. However; onceupdates are involved; variable-length surrogates are often considered the better choice …,International Conference on Extending Database Technology,2006,10
A deep embedding of queries into Ruby,Torsten Grust; Manuel Mayr,We demonstrate SWITCH; a deep embedding of relational queries into Ruby and Ruby onRails. With SWITCH; there is no syntactic or stylistic difference between Ruby programs thatoperate over in-memory array objects or database-resident tables; even if these programsrely on array order or nesting. SWITCH's built-in compiler and SQL code generatorguarantee to emit few queries; addressing long-standing performance problems that traceback to Rails' Active Record database binding." Looks likes Ruby; but performs likehandcrafted SQL;" is the ideal that drives the research and development effort behindSWITCH.,Data Engineering (ICDE); 2012 IEEE 28th International Conference on,2012,9
Thirteen new players in the team: a ferry-based linq to sql provider,Tom Schreiber; Simone Bonetti; Torsten Grust; Manuel Mayr; Jan Rittinger,Abstract We demonstrate an efficient LINQ to SQL provider and its significant impact on theruntime performance of LINQ programs that process large data volumes. This alternativeprovider is based on Ferry; compilation technology that lets relational database systemsparticipate in the evaluation of first-order functional programs over nested; ordered datastructures. The Ferry-based provider seamlessly hooks into the .NET LINQ framework andgenerates SQL code that strictly adheres to the semantics of the LINQ data model. Ferrycomes with strong code size guarantees and complete support for the LINQ Standard QueryOperator family; enabling a truly interactive and compelling LINQ demonstration. A variety ofinspection holes may be opened to learn about the internals of the Ferry-based LINQ to SQLprovider.,Proceedings of the VLDB Endowment,2010,9
Query deforestation,Torsten Grust; Marc H Scholl,The construction of a declarative query engine for a DBMS includes the challenge ofcompiling algebraic queries into efficient execution plans that can be run on top of thepersistent storage. This work pursues the goal of employing foldr-build deforestation for thederivation of efficient streaming programs-programs that do not allocate intermediate datastructures to perform their task-from algebraic (combinator) query plans. The query engine isbased on the insertion representation of collections and base types; making thedeforestation idea amenable to a wide range of type constructors and operators. In additionto the removal of intermediate data structures; deforestation actually implements certainalgebraic optimizations for free. Query deforestation is a generally applicable technique thatputs the derivation of streaming programs in a compact formal framework that should be …,*,1998,9
True language-level SQL debugging,Torsten Grust; Fabian Kliebhan; Jan Rittinger; Tom Schreiber,Abstract We demonstrate Habitat; a declarative observational debugger for SQL. Habitatfacilitates true language-level (not: plan-level) debugging of; probably flawed; SQL queriesthat yield unexpected results. Users may mark arbitrary SQL subexpressions---ranging fromliterals; over fragments of predicates; to entire subquery blocks---to observe whether theseevaluate as expected.,Proceedings of the 14th International Conference on Extending Database Technology,2011,8
Jump Through Hoops to Grok the Loops--Pathfinder’s Purely Relational Account of XQuery-style Iteration Semantics,Torsten Grust; Jan Rittinger,Abstract What remains if you remove XML trees and node construction; XPath location pathtraversal; atomization; and all other XML-inflicted concepts from XQuery?—We describe howthe design of the database-supported XQuery processor Pathfinder has been centeredaround the compilation of the language's core side effect-free iteration construct; for; aconcept that XQuery shares with many (data-intensive) languages; eg; SQL; Linq; Links;Ruby; and Haskell's or Python's list comprehensions. The compiler implements loop lifting; acompilation technique that lets a relational database back-end fully realize—and benefitfrom—the independence of the individual iterations of a for loop. We explore usefulextensions and special cases of loop lifting and will see how XQuery 1.1's proposedwindowed iteration,IN PROC. ACM SIGMOD/PODS WORKSHOP ON XQUERY IMPLEMENTATION; EXPERIENCE AND PERSPECTIVES (XIME-P,2008,8
Schema Validation and Type Annotation for Encoded Trees.,Torsten Grust; Stefan Klinger,Page 1. Schema Validation and Type Annotation for Encoded Trees Torsten Grust U Konstanz;Database Research Group Torsten.Grust@uni-konstanz.de S. Margherita di Pula—Sardinia;September 2004 7th EDBT Summer School on “XML and Databases” Page 2. A Purely RelationalXQuery Processing Stack • Need for efficient XPath evaluation drove development of stack:Page 3. A Purely Relational XQuery Processing Stack • Need for efficient XPath evaluation drovedevelopment of stack: SQL; relational algebra RDBMS Page 4. A Purely Relational XQueryProcessing Stack • Need for efficient XPath evaluation drove development of stack: XPathaccelerator Tree Encoding SQL; relational algebra RDBMS Page 5. A Purely Relational XQueryProcessing Stack • Need for efficient XPath evaluation drove development of stack: staircasejoin XPath Axes XPath accelerator Tree Encoding …,XIME-P,2004,8
First-class functions for first-order database engines,Torsten Grust; Alexander Ulrich,Abstract: We describe Query Defunctionalization which enables off-the-shelf first-orderdatabase engines to process queries over first-class functions. Support for first-classfunctions is characterized by the ability to treat functions like regular data items that can beconstructed at query runtime; passed to or returned from other (higher-order) functions;assigned to variables; and stored in persistent data structures. Query defunctionalization is anon-invasive approach that transforms such function-centric queries into the data-centricoperations implemented by common query processors. Experiments with XQuery andPL/SQL database systems demonstrate that first-order database engines can faithfully andefficiently support the expressive" functions as data" paradigm.,arXiv preprint arXiv:1308.0158,2013,7
Pathfinder: A relational query optimizer explores xquery terrain,Jan Rittinger; Jens Teubner; Torsten Grust,Abstract Relational encodings of the static aspects of the XQuery data model; ie; tabularrepresentations for XML documents and ordered sequences of items; are widely used today.Since 2002; the Pathfinder and MonetDB/XQuery companion projects [BGvK+ 06] pursuethe primary goal to also embrace the complete dynamic semantics of XQuery (expressionevaluation and runtime aspects) with the help of relational database systems. In earlier work[GT04]; we have shown that relational algebra makes for a suitable target language in anXQuery compiler. This purely relational approach to XQuery inherits the scalabilityadvantages of the underlying relational database back-end and makes proven optimizationtechniques immediately applicable to the construction of XQuery processors.MonetDB/XQuery; an open-source system that implements this approach; is found among …,In Proc. of the 2007 BTW Conference (Datenbanksysteme für Business; Technologie und Web,2007,7
Algebraic data types for language-integrated queries,George Giorgidze; Torsten Grust; Alexander Ulrich; Jeroen Weijers,Abstract The seamless integration of relational databases and programming languagesremains a major challenge. Mapping rich data types featured in general-purposeprogramming languages to the relational data model is one aspect of this challenge. Wepresent a novel technique for mapping arbitrary (nonrecursive) algebraic data types to arelational data model; based on previous work on the relational representation of nestedtables. Algebraic data types may be freely constructed and deconstructed in queries andmay show up in the result type. The number of relational queries generated is small andstatically determined by the type of the query. We have implemented the mapping in theDatabase Supported Haskell (DSH) library.,Proceedings of the 2013 workshop on Data driven functional programming,2013,6
Transformation lifecycle management with nautilus,Melanie Herschel; Torsten Grust,When developing data transformations—a task omnipresent in applications like dataintegration; data migration; data cleaning; or scientific data processing—developers quicklyface the need to verify the semantic correctness of the transformation. Declarativespecifications of data transformations; eg SQL or ETL tools; increase developer productivitybut usually provide limited or no means for inspection or debugging. In this situation;developers today have no choice but to manually analyze the transformation and; in case ofan error; to (repeatedly) fix and test the transformation. As a simple example; consider adeveloper who wonders why some products are missing from a SQL query result (making itobvious for him that the query is faulty). Possible reasons abound; eg were product tuplesfiltered by a particular selection or are expected join partners missing? Usually; the …,VLDB Workshop on the Quality of Data (QDB),2011,6
Loop-lifted staircase join: from XPath to XQuery,Peter Alexander Boncz; Torsten Grust; Maurice vanKeulen; Stefan Manegold; Jan Rittinger; Jens Teubner,textabstractVarious techniques have been proposed for efficient evaluation of XPathexpressions; where the XPath location steps are rooted in a single sequence of contextnodes. Among these techniques; the staircase join allows to evaluate XPath location stepsalong arbitrary axes in at most one scan over the XML document; exploiting the XPathaccelerator encoding (aka. pre/post encoding). In XQuery; however; embedded XPath sub-expressions occur in arbitrarily nested for-loops. Thus; they are rooted in multiple sequencesof context nodes (one per iteration). Consequently; the previously proposed algorithms needto be applied repeatedly; requiring multiple scans over the XML document encoding. In thiswork; we present loop-lifted staircase join; an extension of the staircase join that allows toefficiently evaluate XPath sub-expressions in arbitrarily nested XQuery iteration scopes …,Information Systems [INS],2005,6
Bridging the GAP between relational and native XML storage with staircase join,Jens Teubner; Maurice van Keulen; Torsten Grust,Several mapping schemes have recently been proposed to store XML data in relationaltables. Relational database systems are readily available and can handle vast amounts ofdata very efficiently; taking advantage of physical properties that are specific to the relationalmodel; like sortedness or uniqueness. Tables that originate from XML documents; however;carry some further properties that cannot be exploited by current relational query processors.We propose a new join algorithm that is specifically designed to operate on XML datamapped to relational tables. The staircase join is fully aware of the underlying tree propertiesand allows for I/O and cache optimal query execution. As a local change to the databasekernel; it can easily be plugged into any relational database and allows for variousoptimization strategies; eg selection pushdown. Experiments with our prototype; based on …,15. GI Workshop on Foundations of Database Systems,2003,6
Data-intensive XQuery debugging with instant replay,Torsten Grust; Jan Rittinger; Jens Teubner,Abstract We explore the design and implementation of Rover; a postmortem debugger forXQuery. Rather than being based on the traditional breakpoint model; Rover acknowledgesXQuery's nature as a functional language: the debugger follows a declarative debuggingparadigm in which a user is enabled to observe the values of selected XQuerysubexpressions. Rover has been designed to hook into Pathfinder; an XQuery compiler thatemits relational algebra plans for evaluation on commodity relational database back-ends.The debugger instruments the subject query with fn: trace () calls which; at query runtime;populate database tables with relational representations of XQuery item sequences. Thanksto Pathfinder's loop-lifting compilation strategy; a Rover trace (1) may span multiple XQueryfor iteration scopes and (2) allows for interactive debugging sessions that can arbitrarily …,Proceedings of the 4th international workshop on XQuery implementation; experience and perspectives,2007,5
Provenance for SQL through abstract interpretation: value-less; but worthwhile,Tobias Müller; Torsten Grust,Abstract We demonstrate the derivation of fine-grained where-and why-provenance for arich dialect of SQL that includes recursion;(correlated) subqueries; windows;grouping/aggregation; and the RDBMS's library of built-in functions. The approach relies onideas that originate in the programming language community---program slicing and abstractinterpretation; in particular. A two-stage process first records a query's control flow decisionsand locations of data access before it derives provenance without consultation of the actualdata values (rendering the method largely" value-less"). We will bring an interactivedemonstrator that uses this provenance information to make input/output dependencies inreal-world SQL queries tangible.,Proceedings of the VLDB Endowment,2015,4
A SQL Debugger Built from Spare Parts: Turning a SQL: 1999 Database System into Its Own Debugger,Benjamin Dietrich; Torsten Grust,Abstract We demonstrate a new incarnation of Habitat; an observational debugger for SQL.In observational debugging; users highlight parts of a presumably faulty query to observethe evaluation of SQL subexpressions and learn about the query's actual runtime behavior.The present version of Habitat has been redesigned from scratch and employs a queryinstrumentation technique that exclusively relies on the SQL facilities of the underlyingRDBMS. We particularly shed light on new features like (1) the debugging of recursive SQLqueries and (2) the observation of row groups (before and after aggregation). Habitat canturn any reasonably modern SQL: 1999 RDBMS into its own language-level SQL debugger.,Proceedings of the 2015 ACM SIGMOD International Conference on Management of Data,2015,4
An inflationary fixed point in XQuery,Loredana Afanasiev; Torsten Grust; Maarten Marx; Jan Rittinger; Jens Teubner,Abstract We introduce a controlled form of recursion in XQuery; inflationary fixed points;familiar in the context of relational databases. This imposes restrictions on the expressibletypes of recursion; but we show that inflationary fixed points nevertheless are sufficientlyversatile to capture a wide range of interesting use cases; including the semantics ofRegular XPath and its core transitive closure construct. While the optimization of generaluser-defined recursive functions in XQuery appears elusive; we will describe howinflationary fixed points can be efficiently evaluated; provided that the recursive XQueryexpressions exhibit a distributivity property. We show how distributivity can be assessedboth; syntactically and algebraically; and provide experimental evidence that XQueryprocessors can substantially benefit during inflationary fixed point evaluation.,Proc. of ICDE,2008,4
Supporting positional predicates in efficient XPath axis evaluation for DOM data structures,Torsten Grust; Jan Hidders; Philippe Michiels; Roel Vercammen; Maurice Van Keulen,Abstract In this technical report we propose algorithms for implementing the axes for elementnodes in XPath given a DOM-like representation of the document. First; we constructalgorithms for evaluating simple step expressions; withoout any (positional) predicates. Thetime complexity of these algorithms is at most O (l+ m) where l is the size of the input list andm the size of the output list. This improves upon results in [6] where also algorithms withlinear time complexity are presented; but these are linear in the size of the entire documentwhereas our algorithms are linear in the size of the intermediate results which are oftenmuch smaller. In a second phase we give a description of how the support for positionalpredicates can be added to the algorithms with a focus on maintaining the efficiency ofevaluation. Each algorithm assumes an input list that is sorted in document order and …,*,2004,4
The flatter; the better: Query compilation based on the flattening transformation,Alexander Ulrich; Torsten Grust,Abstract We demonstrate the insides and outs of a query compiler based on the flatteningtransformation; a translation technique designed by the programming language communityto derive efficient data-parallel implementations from iterative programs. Flattening admitsthe straightforward formulation of intricate query logic including deeply nested loops over(possibly ordered) data or the construction of rich data structures. To demonstrate the levelof expressiveness that can be achieved; we will bring a compiler frontend that acceptsqueries embedded into the Haskell programming language. Compilation via flattening takesplaces in a series of simple steps all of which will be made tangible by the demonstration.The final output is a program of lifted primitive operations which existing query engines canefficiently implement. We provide backends based on PostgreSQL and VectorWise to …,Proceedings of the 2015 ACM SIGMOD International Conference on Management of Data,2015,3
of Proceedings: Advances in Database Technology-EDBT 2006: 10th International Conference on Extending Database Technology,Ralf Schenkel; Martin Theobald,Abstract/Description: Relevance Feedback is an important way to enhance retrieval qualityby integrating relevance information provided by a user. In XML retrieval; feedback enginesusually generate an expanded query from the content of elements marked as relevant ornonrelevant. This approach that is inspired by text-based IR completely ignores thesemistructured nature of XML. This paper makes the important step from content-based tostructural feedback. It presents an integrated solution for expanding keyword queries withnew content; path; and document constraints. An extensible framework evaluates suchquery conditions with existing keyword-based XML search engines while allowing to easilyintegrate new dimensions of feedback. Extensive experiments with the established INEXbenchmark show the feasibility of our approach.,*,2006,3
PathFinder/MonetDB: XQuery-The Relational Way,Peter Boncz; Torsten Grust; M Keulen,Relational query processors are probably the best understood (as well as the bestengineered) query engines available today. Although carefully tuned to process instances ofthe relational model (tables of tuples); these processors can also provide a foundation forthe evaluation of “alien”(non-relational) query languages: if a relational encoding of the aliendata model and its associated query language is given; the RDBMS may act like a special-purpose processor for the new language. This demonstration features our XQuery compilerPathfinder; the continuation of our earlier work on a purely relational XPath and XQueryprocessing stack [4; 5; 6] in which we developed relational encodings and processingstrategies for the tree-shaped XML data model. The Pathfinder project is an exploration ofhow far we can push the idea of using mature RDBMS technology to design and build a …,Proc. of the 31st VLDB Conference,2005,3
Monoid Comprehensions as a Target for the Translation of OQL.,Torsten Grust,The rich type models that make object-oriented data models superior to their relationalantecedents have an impact on the query formalism that is needed to capture today'smodern object query languages; like ODMG's OQL [Cat95]. Instead of reintroducing theclassical object algebra operators for each of the bulk type constructors like set; bag; and list—which led to rather intractable algebras in recent approaches; especially suffering from typeconversion operators—the concept of a monoid can take the role of what the set played inthe relational model [WT91]. These simple algebraic structures; obeying a few simple laws;allow for a uniform treatment of collections and scalars. They therefore account for theintermix of bulk operations and general purpose computations (eg arithmetics) that modernquery languages feature. Comprehensions [Tri91] provide a convenient way to describe …,Grundlagen von Datenbanken,1996,3
Precision performance surgery for CostgreSQL: LLVM---based Expression Compilation; Just in Time,Dennis Butterstein; Torsten Grust,Abstract We demonstrate how the compilation of SQL expressions into machine code leadsto significant query runtime improvements in PostgreSQL 9. Our primary goal is to connectrecent research in query code generation with one of the most widely deployed databaseengines. The approach calls on LLVM to translate arithmetic and filter expressions intonative x86 instructions just before SQL query execution begins. We deliberately follow a non-invasive design that does not turn PostgreSQL on its head: interpreted and compiledexpression evaluation coexist and both are used to execute the same query. We will bringan enhanced version of PostgreSQL that exhibits notable runtime savings and providesvisual insight into exactly where and how execution plans can benefit from SQL expressioncompilation.,Proceedings of the VLDB Endowment,2016,2
Training arithmetic and orthography on a web-based and socially-interactive learning platform,Stephanie Roesch; Stefanie Jung; Stefan Huber; Christina Artemenko; Julia Bahnmueller; Juergen Heller; Torsten Grust; Hans-Christoph Nuerk; Korbinian Moeller,*,International Journal of Education and Information Technologies,2016,2
Die TUebinger LernPlattform zum Erwerb numerischer und orthografischer Kompetenzen (TULPE),Stefanie Jung; Stefan Huber; Juergen Heller; Torsten Grust; Korbinian Möller; Hans-Christoph Nuerk,Zusammenfassung. Digitale Medien haben nicht nur die Kinderzimmer erobert; sondernsind mittlerweile fester Bestandteil einer modernen Schulbildung. Der Einsatz von Online-Lernumgebungen und-spielen; in und außerhalb von pädagogischen Kontexten; erlaubt esselbst traditionelle Lerninhalte spielerisch und unabhängig von Ort und Zeit zu vermitteln.Die im Folgenden vorgestellte «TUebinger LernPlattform zum Erwerb numerischer undorthografischer Kompetenzen (TULPE)» bietet individuelles Lernen zentralerKulturtechniken auch außerhalb des Klassenraums. Mithilfe adaptiver Verfahren lassen sichdie Rechen-und Rechtschreibspiele der TULPE an individuelle Lernermerkmale anpassen:Zuerst wird in einer adaptiven Diagnostik der Lern-und Förderbedarf eingeschätzt.Entsprechend dieser Einschätzung können in einem zweiten Schritt Lernspiele adaptiert …,Lernen und Lernstörungen,2015,2
Provenance for SQL Based on Abstract Interpretation: Value-less; but Worthwhile,T Müller; T Grust,*,Proc. VLDB; Hawaii; USA,2015,2
An interactive web-based learning platform for arithmetic and orthography,STEFANIE Jung; STEPHANIE Roesch; STEFAN Huber; JÜRGEN Heller; TORSTEN Grust; H Nuerk; K Moeller,Abstract: Numeracy and literacy are key competencies in modern knowledge societies withinsufficient skills resulting in severe disadvantages on the individual and the societal level.Therefore; we are in urgent need for effective prevention and remediation programscorroborating numeracy and literacy. In the present article we describe the development andfirst evaluation of an interactive web-based learning platform for arithmetic and orthography;targeted at children after primary school. The web-platform hosts several training games forarithmetic and orthography for which general and specific training effects were found in afirst evaluation. Additionally; we describe how intra-and inter-individual adaptivity may beimplemented to the platform. In sum; results were promising for the use of web-basedlearning games to complement formal education.,Advances in Computers and Technology for Education–Proceedings of the 11th International Conference on Educational Technologies,2015,2
Functions are data too: defunctionalization for PL/SQL,Torsten Grust; Nils Schweinsberg; Alexander Ulrich,Abstract We demonstrate a full-fledged implementation of first-class functions for the widelyused PL/SQL database programming language. Functions are treated as regular data itemsthat may be (1) constructed at query runtime;(2) stored in and retrieved from tables;(3)assigned to variables; and (4) passed to and from other (higher-order) functions. Theresulting PL/SQL dialect concisely and elegantly expresses a wide range of new queryidioms which would be cumbersome to formulate if functions remained second-classcitizens. We include a diverse set of application scenarios that make these advantagestangible. First-class PL/SQL functions require featherweight syntactic extensions only andcome with a non-invasive implementation--the defunctionalization transformation--that canentirely be built on top of existing relational DBMS infrastructure. An interactive …,Proceedings of the VLDB Endowment,2013,2
XQuery processors,Torsten Grust; HV Jagadish; Fatma Özcan; Cong Yu,XML access control refers to the practice of limiting access to (parts of) XML data to onlyauthorized users. Similar to access control over other types of data and resources; XMLaccess control is centered around two key problems:(i) the development of formal models forthe specification of access control policies over XML data; and (ii) techniques for efficientenforcement of access control policies over XML data.,*,2009,2
Hybrid Strategies for Query Translation and Optimisation,Torsten Grust; Marc H Scholl,The advanced data models for PAS that make these systems superior to their table-orientedantecedents (RDBMS) have an impact on the formalisms that are needed to capture thesemodels and their appropiate query languages (eg. ODMG's OQL). Queries that are nested toarbitrary depth; path expressions; and complex predicates pose challenges on the querytranslation process. This work will identify generic (algebraic) operators that allow theefficient translation of such queries. These operators will account for the various bulk typesthe data models feature. Optimisation techniques have to be found; adapted; and validated.PAS query languages allow to mix operations on bulk types and scalars (just likeprogramming languages). Monad calculi treat bulk and scalar types in a uniform way; andallow for reasoning about arithmetics and general computation. This offers the …,*,1998,2
Behavioral and neurocognitive evaluation of a web-platform for game-based learning of orthography and numeracy,Mojtaba Soltanlou; Stefanie Jung; Stephanie Roesch; Manuel Ninaus; Katharina Brandelik; Jürgen Heller; Torsten Grust; Hans-Christoph Nuerk; Korbinian Moeller,Abstract Recent years have seen a considerable increase in informal educationalenvironments complementing formal educational settings such as schools. In this chapter;we will report results on the efficacy of a web-platform for game-based learning oforthography and numeracy. Besides the behavioral assessment of the platform; we focusedspecifically on neurocognitive changes due to training on the platform. These neurocognitivedata are particularly informative to understand how game-based learning leads toperformance improvements; and also might help us to develop new instructional designs.Our web-based platform hosts several learning games; aiming at fostering orthography andnumeracy skills. Learning games enable individual learning independent from formallearning environments—anytime and anywhere. Behavioral results revealed promising …,*,2017,1
The Best Bang for Your Bu (ck) g.,Benjamin Dietrich; Tobias Müller; Torsten Grust,ABSTRACT We report on our ongoing effort to develop observational debuggers for SQL.This debugging paradigm—in which the evaluation of selected subexpressions may be“spied on”—fits the nature of query languages; but may lead to observations whose size canoverwhelm users. Here; we tackle this challenge with the help of data provenance analysis.The analysis identifies exactly those input rows that are material in producing suspect queryoutputs. Running the debugger on such a minimized input will exclusively yield observationsthat are indeed relevant in understanding the bug.,EDBT,2016,1
Analysing the Entire Wikipedia History with Database Supported Haskell,George Giorgidze; Torsten Grust; Iassen Halatchliyski; Michael Kummer,Abstract In this paper we report on our experience of using Database Supported Haskell(DSH) for analysing the entire Wikipedia history. DSH is a novel high-level database queryfacility allowing for the formulation and efficient execution of queries on nested and orderedcollections of data. DSH grew out of a research project on the integration of databasequerying capabilities into high-level; general-purpose programming languages. It is anemerging trend that querying facilities embedded in general-purpose programminglanguages are gradually replacing lower-level database languages such as SQL aspreferred facilities for querying large-scale database-resident data. We relate this newapproach to the current practice which integrates database queries into analysts' workflowsin a rather ad hoc fashion. This paper would interest early technology adopters interested …,International Symposium on Practical Aspects of Declarative Languages,2013,1
A Database Coprocessor for Haskell,George Giorgidze; Torsten Grust; Tom Schreiber; Jeroen Weijers,Abstract. Relational database management systems (RDBMSs) provide the best understoodand most carefully engineered query processing infrastructure available today. However;RDBMSs are often operated as plain stores that do little more than reproduce stored dataitems for further processing outside the database host; in the general-purpose programminglanguage heap. One reason for this is that the aforementioned query processing capabilitiesrequire mastering of advanced features of query languages (eg; SQL) in addition to thegeneral-purpose language the application is programmed in. Moreover; the querylanguages are often inadequately integrated into the host programming language. One wayto solve these problems is to use RDBMSs as a coprocessor for general-purposeprogramming languages; for those program parts that carry out data-intensive and data …,Proc. IFL. Springer,2010,1
Jump Through Hoops to Grok the Loops,Torsten Grust; Jan Rittinger,ABSTRACT What remains if you remove XML trees and node construction; XPath locationpath traversal; atomization; and all other XML-inflicted concepts from XQuery?—Wedescribe how the design of the database-supported XQuery processor Pathfinder has beencentered around the compilation of the language's core side effect-free iteration construct;for; a concept that XQuery shares with many (data-intensive) languages; eg; SQL; Linq;Links; Ruby; and Haskell's or Python's list comprehensions. The compiler implements looplifting; a compilation technique that lets a relational database back-end fully realize—andbenefit from—the independence of the individual iterations of a for loop. We explore usefulextensions and special cases of loop lifting and will see how XQuery 1.1's proposedwindowed iteration construct forseq may be grokked this way—this also uncovers …,Proc. of the 5th Int’l ACM SIGMOD Workshop on XQuery Implementation; Experience; and Perspectives (XIME-P),2008,1
06472 Abstracts Collection--XQuery Implementation Paradigms,Peter A Boncz; Torsten Grust; Jérôme Siméon; Maurice van Keulen,Abstract From 19.11. 2006 to 22.11. 2006; the Dagstuhl Seminar 06472``XQueryImplementation Paradigms''was held in the International Conference and Research Center(IBFI); Schloss Dagstuhl. During the seminar; several participants presented their currentresearch; and ongoing work and open problems were discussed. Abstracts of thepresentations given during the seminar as well as abstracts of seminar results and ideas areput together in this paper. The first section describes the seminar topics and goals ingeneral. Links to extended abstracts or full papers are provided; if available.,Dagstuhl Seminar Proceedings,2007,1
Advances in Database Technology-EDBT 2000: 7th International Conference on Extending Database Technology Konstanz; Germany; March 27-31; 2000 Proceedi...,Carlo Zaniolo; Peter C Lockemann; Marc H Scholl; Torsten Grust,EDBT 2000 is the seventh conference in a series dedicated to the advancement of databasetechnology. This year's conference special theme;\Connect Millions of Users and DataSources;" underscores the importance of databases for the information age that is dawningwith the new millennium. The importance-rives not just from the observation that theinformation age essentially rests on theconvergenceofcommunications; computing;andstorage. Equallyimportant; many of the concepts and techniques underlying the successof databasesystems have independent meaning and impact for today's distributedinformation s-tems. The papers in the volume should also be seen in this light. The EDBT2000 conference program includes 30 research papers selected by the program committeeout of 187 submissions; covering advances in research; development; and applications of …,*,2003,1
Bridging the Gap Between Relational and Native XML Storage with Staircase Join,Torsten Grust; Jens Teubner; H Höpfner; G Saake; E Schallehn,*,*,2003,1
Take everything from me; but leave me the comprehension: invited talk,Torsten Grust,Abstract For more than twenty years now I am roaming the frontier between the databasequery and programming language fields. During all that time; one trusty companion hasnever let me down: the comprehension. Its elegant; concise syntactic form and flexiblesemantics render it one of the most versatile tools in query and collection processing;analysis; transformation; and optimization. I will highlight a variety of places where the DBPLcommunity has dependend on comprehensions-and will also point out how existing workmight have turned out differently if it would have embraced comprehensions.Comprehensions glue DB and PL together. Give them a proper hug the next time youencounter them.,Proceedings of The 16th International Symposium on Database Programming Languages,2017,*
DDO-Free XQuery,Hiroyuki Kato; Yasunori Ishihara; Torsten Grust,Abstract XQuery has an order-sensitive semantics in the sense that it requires nodes to besorted in document order without duplicates (or in Distinct Document Order; DDO for short).This paper shows that for a given XQuery expression and a nested-relational DTD; the inputexpression can be transformed into an expression that can be evaluated without---potentially costly---ordering operations even if the input query requires its result to be inDDO. To this end; we propose an XQuery transformation algorithm that consists of simplerewriting rules. The basic idea is inspired by a generate-and-test approach as commonlyused for solving search problems. We apply this approach when constructing thetransformed expression: first; a skeleton query is prepared for the generate phase. Thisskeleton query can be evaluated without DDO; but it has the ability to return all nodes in …,Proceedings of The 16th International Symposium on Database Programming Languages,2017,*
Invest Once; Save a Million Times–LLVM-based Expression Compilation in PostgreSQL,Dennis Butterstein; Torsten Grust,Butterstein; D. & Grust; T.; (2017). Invest Once; Save a Million Times – LLVM-based ExpressionCompilation in PostgreSQL. In: Mitschang; B.; Nicklas; D.; Leymann; F.; Schöning; H.;Herschel; M.; Teubner; J.; Härder; T.; Kopp; O. & Wieland; M. (Hrsg.); Datenbanksysteme fürBusiness; Technologie und Web (BTW 2017). Gesellschaft für Informatik; Bonn. (S.623-624) … Gesellschaft für Informatik eV (GI); Kontakt: Geschäftsstelle der GI Diese DigitalLibrary basiert auf DSpace … Gesellschaft für Informatik eV (GI); Kontakt: Geschäftsstelle derGI Diese Digital Library basiert auf DSpace.,Datenbanksysteme für Business; Technologie und Web (BTW 2017),2017,*
Bachelor Thesis in Computer Science,Nadejda Ismailova; Torsten Grust; Tobias Müller,Abstract Data Provenance describes the origins of data. In this thesis we propose anapproach of computing data provenance when data of interest is created by a Pythonprogram and present a tool implementing this approach. In implementing the tool; we adoptthe following idea. In the first step; the program is instrumented to log data. In the secondstep; the code is analyzed with respect to the logged data and provenance information iscomputed. A novel aspect of this work is instrumentation and analysis of the bytecode of thegiven Python program with the aim of computing data provenance. i,*,2015,*
Dagstuhl Reports; Vol. 4; Issue 12 ISSN 2192-5283,Dieter Gollmann; Cormac Herley; Vincent Koenig; Wolter Pieters; Martina Angela Sasse; Gilles Barthe; Michael Hicks; Florian Kerschbaum; Dominique Unruh; James Cheney; Torsten Grust; Dimitrios Vytiniotis; Jane Hillston; Jeremy Pitt; Martin Wirsing; Franco Zambonelli,Socio-Technical Security Metrics (Dagstuhl Seminar 14491) Dieter Gollmann; CormacHerley; Vincent Koenig; Wolter Pieters; and Martina Angela Sasse ...............................................… The Synergy Between Programming Languages and Cryptography (Dagstuhl Seminar14492) Gilles Barthe; Michael Hicks; Florian Kerschbaum; and Dominique Unruh ....... 22 …Programming Languages for Big Data (PlanBig) (Dagstuhl Seminar 14511) James Cheney;Torsten Grust; and Dimitrios Vytiniotis .......................... 48 … Collective Adaptive Systems: Qualitativeand Quantitative Modelling and Analysis (Dagstuhl Seminar 14512) Jane Hillston; JeremyPitt; Martin Wirsing; and Franco Zambonelli ............. 68 … Published online and open accessby Schloss Dagstuhl – Leibniz-Zentrum für Informatik GmbH; Dagstuhl Publishing;Saarbrücken/Wadern; Germany. Online available at http://www.dagstuhl.de/dagpub/2192 …,*,2015,*
Programming Languages for Big Data (PlanBig)(Dagstuhl Seminar 14511),James Cheney; Torsten Grust; Dimitrios Vytiniotis,Abstract This report documents the program and the outcomes of Dagstuhl Seminar 14511"Programming Languages for Big Data (PlanBig)". The seminar was motivated by recentdevelopments in programming languages; databases; machine learning; and cloudcomputing; and particularly by the opportunities offered by research drawing on more thanone of these areas. Participants included researchers working in each of these areas andseveral who have previously been involved in research in the intersection of databases andprogramming languages. The seminar included talks; demos and free time for discussion orcollaboration. This report collects the abstracts of talks and other activities; a summary of thegroup discussions at the seminar; and a list of outcomes.,Dagstuhl Reports,2015,*
Thinking Functionally with Haskell by Richard Bird; Cambridge University Press; 2014.,Torsten Grust,With Thinking Functionally in Haskell Richard Bird steps up to continue a family of textbookclassics. Bird and Wadler jointly started the series with two editions of Introduction toFunctional Programming (in Haskell) in 1988 and 1998; respectively. Let me begin with theoutright spoiler that I think that this third edition breathes new life into the series and indeedpresents a worthy continuation. The 12 chapters of the 340-page volume contain morematerial than most layouts of a one-term introductory course on functional programming canaccommodate. If the many exercises are considered in depth and a discussion of Haskell-specifics is added (more on both points below); we hold the syllabus of a two-term course inour hands. According to the blurb; the book addresses first-or second-year undergraduates. Iagree; but gained the impression that true programming novices would probably struggle …,Journal of Functional Programming,2015,*
Bachelor Thesis in Computer Science in Media,Janek Bettinger; Torsten Grust; Tobias Müller,Abstract Data provenance is a research topic dealing with the origins of generated data. Analready existing tool by the Database Research Group of the University of Tübingencomputes provenance relations of Python programs and outputs its results in the relationaldata format.,*,2014,*
FerryLeaks-A Web-based Editor for the Table Algebra,Patrick Brosi; Torsten Grust; Jeroen Weijers; Dipl-Inf Manuel Mayr,Abstract The Ferry language can be mapped to a growing number of programminglanguages; providing them with the ability to process large amounts of data on an externalDBMS like PostgreSQL or IBM DB2. For SQL compilation; Ferry utilizes Pathfinder; using anXML representation of the query plan bundle as an intermediary. As Ferry is being furtherdeveloped and the number of supported languages grows; debugging these intermediateplans becomes essential. In this thesis; we present a web-based editor for manipulating;evaluating and validating query plans-FerryLeaks. It was created with the Google WebToolkit which allows the cross-compilation of Java code to JavaScript. The editor's usage; itsimplementation; installation and possible extension are discussed in this work. i,*,2011,*
Relational Algebra: Mother Tongue: XQuery: Fluent [[Elektronische Ressource]],Torsten Grust; Jens Teubner,*,*,2011,*
Staircase Join: Teach a Relational DBMS to Watch Its (Axis) Steps [[Elektronische Ressource]],Torsten Grust; Maurice van Keulen; Jens Teubner,*,*,2011,*
Der Lehrstuhl für Datenbanksysteme am Wilhelm-Schickard-Institut der Universität Tübingen,Torsten Grust,Müsste der Lehrstuhl seinen Fokus in der Forschung in 140 Zeichen über Twitter mitteilen;würde die Nachricht wohl Aspekte der Übersetzung; Einbettung; effizienten Ausführung unddes Verstehens (Debugging) ausdruckskräftiger; deklarativer Datenbanksprachen lauten. 1Tatsächlich bewegt sich unsere Forschungstätigkeit vor allem in einem spannendenGrenzgebiet; das zwischen relationaler Datenbanktechnologie und den (funktionalen)Programmiersprachen liegt. Während der Lehrstuhlinhaber und die meistenwissenschaftlichen Mitarbeiter einen klassischen Datenbankhintergrund besitzen; sindunsere neuesten Verpflichtungen–George Giorgidze und Jeroen Weijers–gezielt in derFunctional Programming Community gesucht und gefunden worden. Eine Vielzahl vonTechniken; die innerhalb dieser Community entwickelt wurden; sind sehr relevant; wenn …,Datenbank-Spektrum,2010,*
URI,In der Bibliografie; KOPS Diese; KOPS Mein,*,*,2008,*
Report on the Third International Workshop on XQuery Implementation; Experience and Perspectives (XIME-P 2006),Michael Carey; Torsten Grust,Abstract On June 30; 2006; XIME-P 2006; the International Workshop on XQueryImplementation; Experience and Perspectives was held. This workshop marks the thirdevent in a workshop series whose primary aim is to shed light on XQuery systems;specification aspects; foundations of the language; and the many perceivable shapes it maytake on in the future. Like the two previous workshops of 2004 (Paris) and 2005 (Baltimore);XIME-P 2006 was held as a co-located workshop of the ACM SIGMOD Conference; whichthis year was held in Chicago; IL; USA. The 2006 edition was co-chaired by Michael Careyand Torsten Grust. The workshop web site can be found at www. ximep-2006. org.,ACM SIGMOD Record,2007,*
URI,Meine Exporte,*,*,2007,*
06472 Executive Summary--XQuery Implementation Paradigms,Peter A Boncz; Torsten Grust; Jérôme Siméon; Maurice van Keulen,Abstract Only a couple of weeks after the participants of seminar No. 06472 met in Dagstuhl;the W3C published the Final Recommendation documents that fix the XQuery 1.0 syntax;data model; formal semantics; built-in function library and the interaction with the XMLSchema Recommendations (see W3C's XQuery web site at http://www. w3. org/XML/Query/).With the language's standardization nearing its end and now finally in place; the manyefforts to construct correct; complete; and efficient implementations of XQuery finally got ridof the hindering" moving target''syndrome. This Dagstuhl seminar on the different XQueryimplementation paradigms that have emerged in the recent past; thus was as timely as itcould have possibly been.,Dagstuhl Seminar Proceedings,2007,*
Current Trends in Database Technology-EDBT 2006: EDBT 2006 Workshop PhD; DataX; IIDB; IIHA; ICSNW; QLQP; PIM; PaRMa; and Reactivity on the Web; Munich...,Torsten Grust,You arestudying the joint proceedingsof the scienti'c workshopsthat wereheld th just beforeand after the 10 International Conference on Extending Database Technology (EDBT 2006)in the historicMunich Kunstler ̈ haus; Germany; in late March 2006. The workshopscontributing to this volume are: th-The4 EDBT Ph. D. Workshop-DataX 2006 (DBTechnologies for Handling XML Information on the Web)-IIDB (Inconsistency andIncompleteness in Databases)-IIHA (Information Integration in Healthcare Applications)-ICSNW 2006 (Semantics of a Networked World)-QLQP 2006 (Query Languages and QueryProcessing)-PIM 2006 (Pervasive Information Management)-PaRMa 2006 (PatternRepresentation and Management)-Reactivity on the Web If we let the raw numbers speak;then; compared with EDBT 2004; the number of collocated workshops almost doubled …,*,2006,*
Advances in Database Technology-EDBT 2006: 10 International Conference on Extending Database Technology; Munich; Germany; 26-31 March 2006; Proceedings,Yannis Ioannidis; Marc H Scholl; Joachim W Schmidt; Florian Matthes; Mike Hatzopoulos; Klemens Boehm; Alfons Kemper; Torsten Grust; Christian Boehm,The series of International Conferences on Extending Database Technology (EDBT) is anestablished and prestigious forum for the exchange of the latest research results in datamanagement. It provides unique opportunities for database researchers; practitioners;developers; and users to explore new ideas; techniques; and tools; and to exchangeexperiences. This volume contains the proceedings of the 10th EDBT Conference; held inMunich; Germany; March 27-29; 2006. The conference included 3 keynote talks; 56 full-sizeand 4 half-size research papers in 20 sessions; 8 industrial presentations in 3 sessions; 1panel session; 5 tutorials in 7 sessions; and 20 demonstrations in 4 sessions. All of theresearch papers as well as papers and abstracts from most of the other sessions areincluded here. Distinguished members of the database and information-retrieval …,*,2006,*
MonetDB/XQuery-Consistent & Efficient Updates on the Pre/Post Plane (Demo Poster),PA Boncz; S Manegold; KS Mullender; J Flokstra; M vanKeulen; T Grust; J Rittinger; J Teubner,KNAW Narcis. Back to search results. Publication MonetDB/XQuery-Consistent & Efficient Updateson the Pre/Post Plane (Demo Poster) (2006). Pagina-navigatie: Main …,*,2006,*
MonetDB/XQuery; Technology preview open source release 1,P Boncz; S Manegold; Sjoerd Mullender; Maurice van Keulen; Jan Flokstra; T Grust; J Teubner; J Rittinger,Boncz; P; Manegold; S; Mullender; S; van Keulen; M; Flokstra; J; Grust; T; Teubner; J &Rittinger; J MonetDB/XQuery; Technology preview open source release 1 …MonetDB/XQuery; Technology preview open source release 1. / Boncz; P.; Manegold; S.;Mullender; Sjoerd; van Keulen; Maurice; Flokstra; Jan; Grust; T.; Teubner; J.; Rittinger; J … BonczP; Manegold S; Mullender S; van Keulen M; Flokstra J; Grust T et al. MonetDB/XQuery; Technologypreview open source release 1. 2005 … Powered by Pure; Scopus & Elsevier FingerprintEngine™ © 2017 Elsevier BV.,*,2005,*
MonetDB,ML Kersten; PA Boncz; NJ Nes; S Manegold; KS Mullender; FE Groffen; MG Ivanova; Y Zhang; RA Goncalves; E Sidirourgos; E Liarou; S Idreos; JA deRijke; AP deVries; W Alink; R Cornacchia; JFP van deAkker; AR vanBallegooij; CA van deBerg; JR Castelo; J Flokstra; CA Galindo-Legaria; T Grust; S Héman; D Hiemstra; T Ianeva; JS Karlsson; M vanKeulen; S deKonink; JA List; N Mamoulis; GJ Molenaar; G Modena; S Göldner; AJ Pellenkoft; HGP Bosch; W Quak; G Ramirez Camps; J Rittinger; H Rode; W Scherphof; AR Schmidt; N Tang; J Teubner; C Treijtel; T Tsikrika; F Waas; THW Westerveld; MA Windhouwer; M Zukowski; A Gafriller; A Singh; A Scherpenisse; B Brodbeck; G deNijs; M Mayr; M Antonelli; M vanDinther; R Aly; R vanOs; S Mayer; S Kerschbaumer; T Ressel; T Schreiber,KNAW Narcis. Back to search results. Publication MonetDB (2005). Pagina-navigatie: Main. Savepublication: Save as MODS; Export to Mendeley; Save as EndNote; Export to RefWorks. Title;MonetDB. Author; ML Kersten (Martin); PA Boncz (Peter); NJ Nes (Niels); S. Manegold (Stefan);KS Mullender (Sjoerd); FE Groffen (Fabian); MG Ivanova (Milena); Y. Zhang (Ying); RA Goncalves(Romulo); E. Sidirourgos (Eleftherios); E. Liarou (Erietta); S. Idreos (Stratos); JA de Rijke (Arjen);AP de Vries (Arjen); W. Alink (Wouter); R. Cornacchia (Roberto); JFP van den Akker; AR vanBallegooij; CA van den Berg; JR Castelo; J. Flokstra; CA Galindo-Legaria; T. Grust; S. Héman(Sándor); D. Hiemstra; T. Ianeva; JS Karlsson; M. van Keulen; S. de Konink (Stefan …,*,2005,*
Core Database Technology Program Committee,Anastassia Ailamaki; Gustavo Alonso; Walid Aref; Lars Arge; Brian Babcock; Mikael Berndtsson; Elisa Bertino; Claudio Bettini; Michael Boehlen; Anthony Bonner; Philippe Bonnet; Alex Buchmann; Tiziana Catarci; Surajit Chaudhuri; Peter Dadam; Amol Deshpande; Asuman Dogac; Christos Faloutsos; Elena Ferrari; Johann-Christoph Freytag; Dieter Gawlick; Johannes Gehrke; Torsten Grust; Ralf Hartmut Güting; Jayant Haritsa; Chris Jermaine; Christoph Koch; George Kollios; Mong Li Lee; Wolfgang Lindner; David Lomet; Hongjun Lu; Samuel Madden; Giansalvatore Mecca; Alberto Mendelzon; Rosa Meo; Tova Milo; Michele Missikoff; C Mohan; Mario Nascimento; Shojiro Nishio; Ed Omiecinski; Norman Paton; Torben Bach Pedersen; Calton Pu; Philippe Pucheral; Raghu Ramakrishnan; Thomas Rölleke; Ken Ross; Gunther Saake; Albrecht Schmidt; Marc Scholl; Bernhard Seeger,Committee Chair: Martin Kersten; CWI; The Netherlands … Serge Abiteboul; INRIA; France AnastassiaAilamaki; Carnegie Mellon University; USA Gustavo Alonso; ETH Zurich; Switzerland WalidAref; Purdue University; USA Lars Arge; Aarhus University; Denmark Brian Babcock; StanfordUniversity; USA Mikael Berndtsson; University of Skövde; Sweden Elisa Bertino; PurdueUniversity; USA Claudio Bettini; University of Milan; Italy Michael Boehlen; Free University ofBolzano/Bozen; Italy Peter Boncz; CWI; The Netherlands Anthony Bonner; University ofToronto; Canada Philippe Bonnet; University of Copenhagen; Denmark Alex Buchmann; Universityof Darmstadt; Germany Tiziana Catarci; University of Rome 'La Sapienza'; Italy SurajitChaudhuri; Microsoft; USA Vassilis Christophides; FORTH; Greece Peter Dadam; Universityof Ulm; Germany Amol Deshpande; University of California; Berkeley; USA Asuman …,VLDB 2005: 31st International Conference on Very Large Data Bases: Proceedings of the 31st International Conference on Very Large Data Bases; Trondheim; Norway; August 30-September 2; 2005,2005,*
Report INS-E0510 May 2005,PA Boncz; T Grust; M van Keulen; S Manegold; J Rittinger; J Teubner,ABSTRACT Various techniques have been proposed for efficient evaluation of XPathexpressions; where the XPath location steps are rooted in a single sequence of contextnodes. Among these techniques; the staircase join allows to evaluate XPath location stepsalong arbitrary axes in at most one scan over the XML document; exploiting the XPathaccelerator encoding (aka. pre/post encoding).,*,2005,*
REPORT INS-E0503 MARCH 2005,PA Boncz; T Grust; S Manegold; J Rittinger; J Teubner,ABSTRACT Using a relational DBMS as back-end engine for an XQuery processing systemleverages relational query optimization and scalable query processing strategies providedby mature DBMS engines in the XML domain. Though a lot of theoretical work has beendone in this area and various solutions have been proposed; no complete systems havebeen made available so far to give the practical evidence that this is a viable approach. Inthis paper; we describe the ourely relational XQuery processor Pathfinder that has been builton top of the extensible RDBMS MonetDB. Performance results indicate that the system iscapable of evaluating XQuery queries efficiently; even if the input XML documents becomehuge. We additionally present further contributions such as loop-lifted staircase join;techniques to derive order properties and to reduce sorting effort in the generated …,*,2005,*
Proceedings of the VLDB 2003 PhD Workshop: Co-located with the 29th International Conference on very large data bases (VLDB 2003),Marc Scholl; Torsten Grust,KOPS - Das Institutionelle Repositorium der Universität Konstanz Proceedingsof the VLDB 2003 PhD Workshop : Co-located with the 29th InternationalConference on very large data bases (VLDB 2003) …,*,2003,*
database supported xml,Marc H Scholl; Torsten Grust; Jens Teubner,Data Modeling The assignment you should turn in until the end of the semester … RelationaleDatenbanken können sehr effizient mit riesigen Datenmengen umgehen. Für einige Anwendungsbereicheist ihr Datenmodell jedoch zu streng; sie suchen nach flexibleren Möglichkeiten zurDatenspeicherung … Das aktuelle Schlagwort hierzu heißt “XML”. Sein baumartiges Datenmodellerlaubt es; Informationen mit unterschiedlichem Grad an Strukturiertheit elegantdarzustellen; man spricht von semi-strukturierten Daten … Während XML als Dateiformat dieseDaten zwar elegant beschreiben kann; ist es für die Speicherung insbesondere von großen Datenmengenoffensichtlich ungeeignet. Aktuelle Forschungsarbeiten aus der Datenbank-Technologie bietenjedoch zahlreiche Ansätze; mit denen auch große Mengen an XML-Daten effizient verarbeitetwerden können … Codierungsverfahren; um XML-Daten in relationalen Datenbanken …,database,2003,*
Advances in Database Technology--EDBT 2000: 7th International Conference on Extending Database Technology; Konstanz; Germany; March 27-31; 2000: Procee...,International Conference on Extending Database Technology,*,*,2000,*
Skript zur Vorlesung Einführung in die Wahrscheinlichkeitstheorie und Statistik: Sommersemester 1999,Robert Denk,Die Vorlesung richtete sich an Studierende der Richtungen Diplom-Mathematik undLehramt Mathematik für Gymnasien ab dem vierten Semester und sollte eine ersteEinführung in typische Denkweisen und Aussagen der Stochastik und der Statistik liefern.Da die Zeit im Sommersemester recht knapp bemessen ist; war es unumgänglich; sich aufeine relativ kleine Auswahl des möglichen Stoffes zu beschränken. Dabei legte ich dasHauptgewicht auf die klassischen Aussagen der Stochastik; insbesondere wurden etwa dieverschiedenen Konvergenzbegriffen für Folgen von Zufallsvariablen und die dafürgeltenden Aussagen behandelt. Unter anderem sind hier die schwachen und starkenGesetze der großen Zahlen und der zentrale Grenzwertsatz zu nennen. Bei einigenBeweisen mußte der Hinweis auf die entsprechende Maßtheorie-Vorlesung genügen …,*,1999,*
10. Workshop Grundlagen von Datenbanken: Arbeitskreis" Grundlagen von Informationssystemen" im GI-Fachausschuß 2.5; Konstanz; 2.-5. Juni 1998,Marc H Scholl; Holger Riedel; Torsten Grust; Dieter Gluche,Ï ÐvÑÒÔÓÕ× ÖØÒ ÙÛÚ ÜÞÝ× ßáà âäãåâ æÔçÌ è æé âäçÞæµàêæÚÀÜ çÞæµë¥ ì×ßÍçíæÔîsæÚÀÜïà~ ãØÚäðò fi çíàêÜ~ ßáðóæãÀà~ ôöõØçÌ ðóæàÞßÍ÷ ÀÚ× ßøÚ×÷ ½ ãùàêúóàêÜÞæîû ôöõØçÌ ëÀìäæÔçíú¥ ßøÚ×÷ ÝäæüÜÞæçÞõÀ÷ ØæÚ× æÔõÀìäàx ð× ãåÜíã²àÞõØì× çïýüæµàÔþ® ÿÌÝ× æ àêúóàêÜÞæîg àÞÝ× õØìløð ãlløõè ÜÞõ² çíæüÜíçÞßøævÀæòßÍÚóôöõÀçÞîòãåÜÞßøõØÚ ôöçíõØîk ã® Ú× æüÜ-è õØçk²õØôÌ ð× ãåÜíã® àÞõØì×çïýüæµà¼ ßÍÚ ã} ìäÚ× ßfi æð èÌã ú; qèßÍÜÞÝ× õÀìóÜ Ýäãv ßøÚ×÷ ÜÞõ² è õØçíçíú² ãbõØìóÜ ÜíÝ× æk ßÍÚ ð õåô àêõÀì× çíýÔæà (àÜíçÞì ý ÜÞìäçÞæµð;¿ àÞæÔîsßáàÜíçÞìäýüÜÞì× çíæð ãåÚ ð ìäÚäàÜíçÞì ý ÜÞìäçÞæµð) ¼ãåÚäð ÜÞÝäæÔßøçx çÞæµàêâ æýüÜÞßvØæòë¥ ì× æÔçíú² ýÔãØâäãbäßløßÜíßÍæµàÔþW æ âäçÞæµàêæÚÀÜ ÜíÝ× æ àÞúàêÜÞæîçíæë¥ ì× ßøçÞæîsæÔÚ¥ Üíà ãØÚäð ÜÞÝ× æÚ ãØð× ðóçíæàíàu ÜÞÝäæ â× çíõbløæÔîe …,*,1998,*
Optimierung von generischen Operationen und Speicherstrukturen in Objekt-Datenbanken (Arbeitsbericht),Marc H Scholl; Dieter Gluche; Torsten Grust; Andreas Heuer; Joachim Kröger,Scholl; Marc H. and Gluche; Dieter and Grust; Torsten and Heuer; Andreas and Kröger; Joachim(1997) Optimierung von generischen Operationen und Speicherstrukturen in Objekt-Datenbanken(Arbeitsbericht). Technical Report. Universität Rostock; Rostock … Full text not available fromthis repository … Dbis Repository is powered by EPrints 3 which is developed by the Schoolof Electronics and Computer Science at the University of Southampton. More information andsoftware credits.,*,1997,*
The public control of land sales,Astrid Stadler,STADLER; Astrid; 1997. The public control of land sales. The public concept of landownership. Seoul; 7. Okt 1996-9. Okt 1996. In: VON HOFFMANN; Bernd; ed.; Myong-ChanHWANG; ed.. The public concept of land ownership: reports and discussions of a GermanKorean symposium held in Seoul on October 7-9; 1996. The public concept of landownership. Seoul; 7. Okt 1996-9. Okt 1996. Frankfurt a. M.[ua]: Lang; pp. 120-131. ISBN 3-631-32350-6@ inproceedings {Stadler1997publi-15881; title={The public control of landsales}; year={1997}; isbn={3-631-32350-6}; address={Frankfurt a. M.[ua]}; publisher={Lang};booktitle={The public concept of land ownership: reports and discussions of a GermanKorean symposium held in Seoul on October 7-9; 1996}; pages={120--131}; editor={vonHoffmann; Bernd and Hwang; Myong-Chan}; author={Stadler; Astrid}},The public concept of land ownership,1997,*
Optimierung von generischen Operationen und Speicherstrukturen in Objekt-Datenbanken,Marc H Scholl; Dieter Gluche; Torsten Grust; Andreas Heuer; Joachim Kröger,Wesentliche Kriterien für den zukünftigen Erfolg oder Mißerfolg objekt-orientierterDatenbanksysteme werden die verfügbaren Konzepte und die Performance solcherSysteme sein. Die zur Zeit in kommerziellen Systemen verfügbaren Konzeptevernachlässigen beispielsweise Freiheitsgrade auf der physischen Ebene; zurLeistungssteigerung vorhandener Systeme ist es notwendig; das vorhandeneOptimierungspotential aller Komponenten voll auszuschöpfen. Dieser Artikel beschreibt denEntwurf und die Realisierung eines objektorientierten Anfragebearbeitungssystems undAnfrageoptimierers auf Basis von OQL und ObjectStore. Dazu werden Plattformen wieobjektorientierte Datenmodelle und deskriptive Anfragesprachen; Optimierungsansätze inobjektorientierten Datenbankmanagementsystemen (OODBMS); Optimierungstechniken …,*,1997,*
The construction of an SASL-Compiler,Torsten Grust,These notes are intended to guide students during the construction of a compiler for a lazypure functional language. The material covered here includes the lexing; parsing; and parsetree construction phase; as well as the combinator compilation and reduction component ofa combinator reduction implementation of such a language. When there has been thechoice between the exhaustive theoretical presentation of a topic or the discussion of theissues of its implementation; we chose the latter. After all it is the goal of this course to get aworking compiler within reasonable time. However; topics like grammar transformation (forrecursive descent parsing); combinator compilation; and reduction are discussed to a depththat should be sufficient to wake interest for the theoretical foundations. The students areexpected to be familiar with formal language concepts like BNF grammars; production …,*,1997,*
Translating QQL into Monoid Comprehensions: Stuck with Nested Loops?; Revised Version,Torsten Grust; Marc H Scholl,This work tries to employ the monoid comprehension calculus-which has proven to be anadequate framework to capture the semantics of modern object query languages featuring afamily of collection types like sets; bags; and lists-in a twofold manner: First; serving as atarget language for the translation of ODMG OQL queries. We review work done in this fieldand also give comprehension calculus equivalents for the recently introduced OQL 1.2concepts. Second; we use monoid comprehensions as the formalism in which we try to findefficient execution methods working on a rich set of physical structures (including indices;vertical and horizontal decomposition; etc.). The main problem coming up here is the"nested-loop nature" of the calculus expressions. While these loop-based semantics forevaluating comprehensions at least provide a way for executing OQL queries; their …,*,1996,*
Haskell Communities and Activities Report,Janis Voigtländer; Andreas Abel; Iain Alexander; Heinrich Apfelmus; Emil Axelsson; Christiaan Baaĳ; Doug Beardsley; Jean-Philippe Bernardy; Mario Blažević; Gwern Branwen; Joachim Breitner; Björn Buckwalter; Douglas Burke; Carlos Camarão; Erik de Castro Lopo; Roman Cheplyaka; Olaf Chitil; Duncan Coutts; Jason Dagit; Nils Anders Danielsson; Romain Demeyer; James Deng; Dominique Devriese; Daniel Díaz; Atze Dĳkstra; Facundo Dominguez; Adam Drake; Andy Georges; Patai Gergely; Jürgen Giesl; Brett G Giles; Andy Gill; George Giorgidze; Torsten Grust; Jurriaan Hage; Bastiaan Heeren; PÁLI Gábor János; Guillaume Hoffmann; Csaba Hruska; Oleg Kiselyov; Michal Konečný; Eric Kow; Ben Lippmeier; Andres Löh; Hans-Wolfgang Loidl; Rita Loogen; Ian Lynagh; Christian Maeder; José Pedro Magalhães; Ketil Malde; Antonio Mamani; Alp Mestanogullari; Simon Michael; Arie Middelkoop; Dino Morelli; JP Moresmau; Ben Moseley; Takayuki Muranushi; Jürgen Nicklisch-Franken; Rishiyur Nikhil; David M Peixotto; Jens Petersen; Simon Peyton Jones; Dan Popa; David Sabel; Uwe Schmidt; Martĳn Schrage; Tom Schrĳvers; Andrew G Seniuk; Jeremy Shaw; Christian Höner zu Siederdissen; Michael Snoyman; Jan Stolarek; Martin Sulzmann; Doaitse Swierstra; Henning Thielemann; Simon Thompson; Sergei Trofimovich; Marcos Viera; David Waern; Daniel Wagner; Greg Weber; Kazu Yamamoto; Edward Z Yang; Brent Yorgey,This is the 16th edition of the Haskell Communities and Activities Report. There are anumber of completely new entries and many small updates. As usual; fresh entries areformatted using a blue background; while updated entries have a header with a bluebackground. Entries on which no activity has been reported for a year or longer have beendropped. Please do revive them next time if you have news on them.My aim for October is tosignificantly increase the percentage of blue throughout the pages of the report. Clearly;there are two ways to achieve this: have more blue or have less white. My preference is theformer option; and I count on the community to make it feasible. In any case; I will tend to beless conservative than this time around: I plan to drop; or simply replace with pointers toprevious versions; entries that see no update between now and then. A call for new …,*,*,*
Query Evaluation in CROQUE?{Calculus and Algebra Coincide {,Marc H Scholl,Abstract. With the substantial change of declarative query languages from plain SQL to theso-called\object SQLs"; in particular OQL; there has surprisingly been not much change inthe way problems of query representation and optimization for such languages are tackled.We identify some of the di culties pure algebraic approaches experience when facing objectmodels and the operations de ned for them. Calculus-style formalisms suite this challengebetter; but are said not to be e ciently implementable in the database context. This paperproposes a hybrid query representation and optimization approach; combining the strengthsof a many-sorted query algebra and the monoid comprehension calculus. We show that ecient execution plans beyond nested-loop processing can be derived {not only for--1 queries{in such a framework. The translation process accounts for queries manipulating bulk …,*,*,*
The Flatter; the Better,Alexander Ulrich; Torsten Grust,ABSTRACT We demonstrate the insides and outs of a query compiler based on theflattening transformation; a translation technique designed by the programming languagecommunity to derive efficient data-parallel implementations from iterative programs.Flattening admits the straightforward formulation of intricate query logic—including deeplynested loops over (possibly ordered) data or the construction of rich data structures. Todemonstrate the level of expressiveness that can be achieved; we will bring a compilerfrontend that accepts queries embedded into the Haskell programming language.Compilation via flattening takes places in a series of simple steps all of which will be madetangible by the demonstration. The final output is a program of lifted primitive operationswhich existing query engines can efficiently implement. We provide backends based on …,*,*,*
Program Committees,Sihem Amer Yahia; Kevin Beyer; CWI Peter Boncz; Netherlands Angela Bonifati; Arbee Chen; Jan Chomicki; Bobbie Cochrane; Latha Colby; Ada Fu; Sumit Ganguly; Torsten Grust; Raghav Kaushik; Arnd Christian Konig; Sailesh Krishnamurthy; Amalgamated Insight; David Lomet; Christopher Olston; Fatma Ozcan; Neoklis Polyzotis; Raghu Ramakrishnan; Krithi Ramamritham; Vijayshankar Raman; Rajeev Rastogi; Mary Roth; Jerome Simeon; Ioana Stanoi; Andrew Tomkins; AUEB Vasilis Vassalos; Greece Victor Vianu; Min Wang; Aidong Zhang,Foto Afrati; NTUA; Greece Natassa Ailamaki; CMU; USA Sihem Amer Yahia; YahooResearch; USA Paolo Atzeni; Univ. di Roma Tre; Italy Shivnath Babu; Duke Univ.; USA JamesA. Bailey; Univ. of Melbourne; Australia Magdalena Balazinska; Univ. of Washington; USA KevinBeyer; IBM Research; USA Michael Boehlen; Univ. of Bolzano; Italy Peter Boncz; CWI; NetherlandsAngela Bonifati; CNR; Italy Arbee Chen; National Tsing Hua Univ.; Taiwan Mitch Cherniack;Brandeis Univ.; USA Jan Chomicki; SUNY Buffalo; USA Stavros Christodoulakis; Tech Univ.of Crete; Greece Bobbie Cochrane; IBM Research; USA Edith Cohen; AT&T Labs; USA LathaColby; IBM Research; USA Graham Cormode; AT&T Labs; USA Abhinandan Das; GoogleLabs; USA Amol Deshpande; Univ. of Maryland; USA Alin Dobra; Univ. of Florida; USA ElenaFerrari; Univ. of Insubria; Italy J. Christoph Freytag; Humboldt Univ.; Germany Ada Fu …,*,*,*
Universitäat Konstanz,Torsten Grust,*,*,*,*
Advances in database technology(Konstanz; 27-31 March 2000),Carlo Zaniolo; Peter C Lockemann; Marc H Scholl; Torsten Grust,*,Lecture notes in computer science,*,*
Universitäat Konstanz,OQL Translating; Torsten Grust; Marc H Scholl,*,*,*,*
Verfasst und vorgelegt von,Dennis Butterstein; Torsten Grust; Manuel Mayr,The query-language BATCHES; developed at the University of Texas; provides developerswith a simple yet powerful way of processing database-located data without writing a singleline of SQL1; remote procedure calls and webservices. So developers do not have to switchparadigms (in mind) from an object oriented language; such as Java to the relationalparadigm of SQL. By using native Java syntax; developers do not even have to get used toany new kind of commands except specific ones to simplify handling (such as print) resultingin a seamless way of integrating database operations. Because of its architecture theBATCHES-System brings some improvements. By executing database queries in BATCHESit is able to reduce the count of round-trips between database server and client as well astraffic produced by multiple interferences. Knowing that using Batches seems to be an …,*,*,*
Konstanzer Online-Publikations-System (KOPS) URL: http://www. ub. uni-konstanz. de/kops/volltexte/campus/2006/1994,Torsten Grust,*,*,*,*
Translating BCE into I onoid Rom prehensionsc,Stuch pith sested Eoopsy; Torsten Grust,*,*,*,*
Konstanzer Schriften in Mathematik und Informatik Nr. 68; Juni 1998 ISSN 1430 {3558,Torsten Grust; Marc H Scholl,*,*,*,*
Staircase join: Teach a RDBMS to watch its (axis) steps,T Grust,*,*,*,*
EDBT 2000</title,C Zaniolo; PC Lockemann; MH Scholl; T Grust,Page 1. Stefano Ceri: XML - Current Developments and Future Challenges for the DatabaseCommunity March 2000 EDBT2000: 7th Int'l Conference on Extending Database Technology;Konstanz (Germany) - www.edbt2000.uni-konstanz.de 1 XML: Current Developments and FutureChallenges for the Database Community Stefano Ceri; Piero Fraternali; Stefano ParaboschiThoughts…. • Comparison to Ashish • EXtending database technology • Picking up Peter'srecommendation Page 2. Stefano Ceri: XML - Current Developments and Future Challengesfor the Database Community March 2000 EDBT2000: 7th Int'l Conference on Extending DatabaseTechnology; Konstanz (Germany) - www.edbt2000.uni-konstanz.de 2 XML http://w3c.org/XML/ •eXtended Markup Language • Document markup language for the World Wide Web proposedby the W3C • Examples of electronic documents …,*,*,*
Hybrid Strategies for Uuery Translation and,Torsten Grust,*,*,*,*
The Construction of an SASL-Com piler,Torsten Grust,*,*,*,*
Supporting Positional Predicates in Efficient XPath Axis Evaluation,Torsten Grust; Jan Hidders; Maurice Van Keulen; Philippe Michiels; Roel Vercammen,*,*,*,*
Scalable XQuery Processing Based on Purely Relational Technology,Marc H Scholl; Torsten Grust; Jens Teubner; Jan Rittinger,*,*,*,*
Universitäat Konstanz,Marc H Scholl; Holger Riedel; Torsten Grust; Dieter Gluche,Zusammenfassung Wesentliche Kriterien főur den zukőunftigen Erfolg oder Mißerfolg o bjektorientierter Da ten ba nks y ste mew erden die verf $ ugbaren Konzepte und diePerformance solcher Sy ste me sein. D ie zur Z eit in ko mm erziellen Sy ste m en v erfőugba ren Konze p te v ern a chlőa ssigen b eis p iels w eise F reiheitsgr a de a uf der physischen E b ene; zur L eistungssteigerung v orh a ndener Sy ste me ist es not w endig; dasvorh a ndene Op tim ierungs p otentia la ller Ko mp onenten v oll a uszuschőo p fen. D ieser Artikel b eschreib t den Ent w urf und die R ea lisierung eines o bj ektorientierten A nfr a gebearb eitungss y ste ms und A nfr a geo p tim ierers a uf Ba sis v on OQL und Obj ect-S tore.Da zu w erden Plattformen w ie o bj ektorientierte Da ten m odelle und deskrip ti ve,*,*,*
1 Purely Relational XQuery,Jan Rittinger; Jens Teubner; Torsten Grust,Relational encodings of the static aspects of the XQuery data model; ie; tabularrepresentations for XML documents and ordered sequences of items; are widely used today.Since 2002; the Pathfinder and MonetDB/XQuery companion projects [BGvK+06] pursue theprimary goal to also embrace the complete dynamic semantics of XQuery (expressionevaluation and runtime aspects) with the help of relational database systems. In earlier work[GT04]; we have shown that relational algebra makes for a suitable target language in anXQuery compiler. This purely relational approach to XQuery inherits the scalabilityadvantages of the underlying relational database back-end and makes proven optimizationtechniques immediately applicable to the construction of XQuery processors.MonetDB/XQuery; an open-source system that implements this approach; is found among …,*,*,*
