Mnemosyne: Lightweight persistent memory,Haris Volos; Andres Jaan Tack; Michael M Swift,Abstract New storage-class memory (SCM) technologies; such as phase-change memory;STT-RAM; and memristors; promise user-level access to non-volatile storage throughregular memory instructions. These memory devices enable fast user-mode access topersistence; allowing regular in-memory data structures to survive system crashes. In thispaper; we present Mnemosyne; a simple interface for programming with persistent memory.Mnemosyne addresses two challenges: how to create and manage such memory; and howto ensure consistency in the presence of failures. Without additional mechanisms; a systemfailure may leave data structures in SCM in an invalid state; crashing the program the nexttime it starts.,ACM SIGARCH Computer Architecture News,2011,428
LogTM-SE: Decoupling hardware transactional memory from caches,Luke Yen; Jayaram Bobba; Michael R Marty; Kevin E Moore; Haris Volos; Mark D Hill; Michael M Swift; David A Wood,This paper proposes a hardware transactional memory (HTM) system called LogTMSignature Edition (LogTM-SE). LogTM-SE uses signatures to summarize a transactions read-and write-sets and detects conflicts on coherence requests (eager conflict detection).Transactions update memory" in place" after saving the old value in a per-thread memorylog (eager version management). Finally; a transaction commits locally by clearing itssignature; resetting the log pointer; etc.; while aborts must undo the log. LogTM-SE achievestwo key benefits. First; signatures and logs can be implemented without changes to highly-optimized cache arrays because LogTM-SE never moves cached data; changes a blockscache state; or flash clears bits in the cache. Second; transactions are more easilyvirtualized because signatures and logs are software accessible; allowing the operating …,High Performance Computer Architecture; 2007. HPCA 2007. IEEE 13th International Symposium on,2007,386
Performance pathologies in hardware transactional memory,Jayaram Bobba; Kevin E Moore; Haris Volos; Luke Yen; Mark D Hill; Michael M Swift; David A Wood,Abstract Hardware Transactional Memory (HTM) systems reflect choices from three keydesign dimensions: conflict detection; version management; and conflict resolution.Previously proposed HTMs represent three points in this design space: lazy conflictdetection; lazy version management; committer wins (LL); eager conflict detection; lazyversion management; requester wins (EL); and eager conflict detection; eager versionmanagement; and requester stalls with conservative deadlock avoidance (EE). To isolatethe effects of these high-level design decisions; we develop a common framework thatabstracts away differences in cache write policies; interconnects; and ISA to compare thesethree design points. Not surprisingly; the relative performance of these systems depends onthe workload. Under light transactional loads they perform similarly; but under heavy …,ACM SIGARCH Computer Architecture News,2007,263
Aerie: Flexible file-system interfaces to storage-class memory,Haris Volos; Sanketh Nalli; Sankarlingam Panneerselvam; Venkatanathan Varadarajan; Prashant Saxena; Michael M Swift,Abstract Storage-class memory technologies such as phase-change memory andmemristors present a radically different interface to storage than existing block devices. As aresult; they provide a unique opportunity to re-examine storage architectures. We find thatthe existing kernel-based stack of components; well suited for disks; unnecessarily limits thedesign and implementation of file systems for this new technology. We present Aerie; aflexible file-system architecture that exposes storage-class memory to user-mode programsso they can access files without kernel interaction. Aerie can implement a generic POSIX-like file system with performance similar to or better than a kernel implementation. The mainbenefit of Aerie; though; comes from enabling applications to optimize the file systeminterface. We demonstrate a specialized file system that reduces a hierarchical file system …,Proceedings of the Ninth European Conference on Computer Systems,2014,81
Pathological Interaction of Locks with Transactional Memory,Haris Volos; Michael M. Goyal; Neelam; Swift,Abstract Transactional memory (TM) promises to simplify multithreaded programming.Transactions provide mutual exclusion without the possibility of deadlock and the need toassign locks to data structures. To date; most investigations of transactional memory havelooked at purely transactional systems that do not interact with legacy code using locks.Unfortunately; the reality of software engineering is that such interaction is likely. Weinvestigate the interaction of transactional memory implementations and lock-based code.We identify and discuss five pathologies that arise with different systems when a lock isaccessed both within and outside a transaction: Blocking; Deadlock; Livelock; EarlyRelease; and Invisible Locking. To address these pathologies we designed,Procs. of the 3rd ACM SIGPLAN Workshop on Transactional Computing,2008,48
Non-broadcast signature-based transactional memory,*,A coherence controller in hardware of an apparatus in an example detects conflicts oncoherence requests through direct; non-broadcast employment of signatures that:summarize read-sets and write-sets of memory transactions; and provide false positives butno false negatives for the conflicts on the coherence requests. The signatures comprise fixed-size representations of a substantially arbitrary set of addresses for the read-sets and thewrite-sets of the memory transactions.,*,2012,44
xCalls: safe I/O in memory transactions,Haris Volos; Andres Jaan Tack; Neelam Goyal; Michael M Swift; Adam Welc,Abstract Memory transactions; similar to database transactions; allow a programmer to focuson the logic of their program and let the system ensure that transactions are atomic andisolated. Thus; programs using transactions do not suffer from deadlock. However; when atransaction performs I/O or accesses kernel resources; the atomicity and isolationguarantees from the TM system do not apply to the kernel.,Proceedings of the 4th ACM European conference on Computer systems,2009,39
NePalTM: design and implementation of nested parallelism for transactional memory systems,Haris Volos; Adam Welc; Ali-Reza Adl-Tabatabai; Tatiana Shpeisman; Xinmin Tian; Ravi Narayanaswamy,Abstract Transactional memory (TM) promises to simplify construction of parallelapplications by allowing programmers to reason about interactions between concurrentlyexecuting code fragments in terms of high-level properties they should possess. However;all currently existing TM systems deliver on this promise only partially by disallowing parallelexecution of computations performed inside transactions. This paper fills in that gap byintroducing NePaLTM (N ested PA ralle L ism for T ransactional M emory); the first TMsystem supporting nested parallelism inside transactions. We describe a programmingmodel where TM constructs (atomic blocks) are integrated with OpenMP constructs enablingnested parallelism. We also discuss the design and implementation of a working prototypewhere atomic blocks can be used for concurrency control at an arbitrary level of nested …,European Conference on Object-Oriented Programming,2009,36
Methods and systems for transactional nested parallelism,*,Methods and systems for executing nested concurrent threads of a transaction arepresented. In one embodiment; in response to executing a parent transaction; a first group ofone or more concurrent threads including a first thread is created. The first thread isassociated with a transactional descriptor comprising a pointer to the parent transaction.,*,2010,35
In-memory performance for big data,Goetz Graefe; Haris Volos; Hideaki Kimura; Harumi Kuno; Joseph Tucek; Mark Lillibridge; Alistair Veitch,Abstract When a working set fits into memory; the overhead imposed by the buffer poolrenders traditional databases non-competitive with in-memory designs that sacrifice thebenefits of a buffer pool. However; despite the large memory available with modernhardware; data skew; shifting workloads; and complex mixed workloads make it difficult toguarantee that a working set will fit in memory. Hence; some recent work has focused onenabling in-memory databases to protect performance when the working data set almost fitsin memory. Contrary to those prior efforts; we enable buffer pool designs to match in-memoryperformance while supporting the" big data" workloads that continue to require secondarystorage; thus providing the best of both worlds. We introduce here a novel buffer pool designthat adapts pointer swizzling for references between system objects (as opposed to …,Proceedings of the VLDB Endowment,2014,28
Applying transactional memory to concurrency bugs,Haris Volos; Andres Jaan Tack; Michael M Swift; Shan Lu,Abstract Multithreaded programs often suffer from synchronization bugs such as atomicityviolations and deadlocks. These bugs arise from complicated locking strategies and ad hocsynchronization methods to avoid the use of locks. A survey of the bug databases of majoropen-source applications shows that concurrency bugs often take multiple fix attempts; andthat fixes often introduce yet more concurrency bugs. Transactional memory (TM) enablesprogrammers to declare regions of code atomic without specifying a lock and has thepotential to avoid these bugs. Where most previous studies have focused on using TM towrite new programs from scratch; we consider its utility in fixing existing programs withconcurrency bugs. We therefore investigate four methods of using TM on three concurrentprograms. Overall; we find that 29% of the bugs are not fixable by transactional memory …,ACM Sigplan Notices,2012,25
A case for deconstructing hardware transactional memory systems,Mark D Hill; Derek Hower; Kevin E Moore; Michael M Swift; Haris Volos; David A Wood,Abstract Major hardware and software vendors are curious about transactional memory(TM); but are understandably cautious about committing to hardware changes. Our thesis isthat deconstructing transactional memory into separate; interchangeable componentsfacilitates TM adoption in two ways. First; it aids hardware TM refinement; allowing vendorsto adopt TM earlier; knowing that they can more easily refine aspects later. Second; itenables the components to be applied to other uses; including reliability; security;performance; and correctness; providing value even if TM is not widely used. We developsome evidence for our thesis via experience with LogTM variants and preliminary casestudies of scalable watchpoints and race recording for deterministic replay.,Dagstuhl Seminar Proceedings,2008,24
OS support for virtualizing hardware transactional memory,Michael M Swift; Haris Volos; Neelam Goyal; Luke Yen; Mark D Hill; David A Wood,Abstract Transactional memory promises to simplify multithreaded programming. HardwareTM (HTM) implementations promise better performance by augmenting processors withtransactional state. However; HTMs interact poorly with the operating system or virtualmachine monitor. For example; they often do not tolerate OS actions that virtualizeprocessors and memory; such as context switching and paging. Without support for theseactions; an HTM may not execute programs correctly or guarantee forward progress. Weinvestigate virtualizing transactional memory in the context of LogTM-SE. First; we describean implementation of a kernel module in OpenSolaris that implements transactionalvirtualization and requires only 1120 lines of code. Second; we find that LogTM-SE interactspoorly with virtual machine monitors due to a reliance on physical addresses. We …,Procs. of the 3rd ACM SIGPLAN Workshop on Transactional Computing,2008,23
Performance pathologies in hardware transactional memory,Jayaram Bobba; Kevin E Moore; Haris Volos; Luke Yen; Mark D Hill; Michael M Swift; David A Wood,Transactional memory is a promising approach to ease parallel programming. Hardwaretransactional memory system designs reflect choices along three key design dimensions:conflict detection; version management; and conflict resolution. The authors identify a set ofperformance pathologies that could degrade performance in proposed HTM designs.Improving conflict resolution could eliminate these pathologies so designers can buildrobust HTM systems.,IEEE micro,2008,22
Quartz: A lightweight performance emulator for persistent memory software,Haris Volos; Guilherme Magalhaes; Ludmila Cherkasova; Jun Li,Abstract Next-generation non-volatile memory (NVM) technologies; such as phase-changememory and memristors; can enable computer systems infrastructure to continue keeping upwith the voracious appetite of data-centric applications for large; cheap; and fast storage.Persistent memory has emerged as a promising approach to accessing emerging byte-addressable non-volatile memory through processor load/store instructions. Due to lack ofcommercially available NVM; system software researchers have mainly relied on emulationto model persistent memory performance. However; existing emulation approaches areeither too simplistic; or too slow to emulate large-scale workloads; or require specialhardware. To fill this gap and encourage wider adoption of persistent memory; wedeveloped a performance emulator for persistent memory; called Quartz. Quartz enables …,Proceedings of the 16th Annual Middleware Conference,2015,17
An analysis of persistent memory use with WHISPER,Sanketh Nalli; Swapnil Haria; Mark D Hill; Michael M Swift; Haris Volos; Kimberly Keeton,Abstract Emerging non-volatile memory (NVM) technologies promise durability with readand write latencies comparable to volatile memory (DRAM). We define Persistent Memory(PM) as NVM accessed with byte addressability at low latency via normal memoryinstructions. Persistent-memory applications ensure the consistency of persistent data byinserting ordering points between writes to PM allowing the construction of higher-leveltransaction mechanisms. An epoch is a set of writes to PM between ordering points. To putsystems research in PM on a firmer footing; we developed and analyzed a PM benchmarksuite called WHISPER (Wisconsin-HP Labs Suite for Persistence) that comprises ten PMapplications we gathered to cover all current interfaces to PM. A quantitative analysisreveals several insights:(a) only 4% of writes in PM-aware applications are to PM and the …,Proceedings of the Twenty-Second International Conference on Architectural Support for Programming Languages and Operating Systems,2017,13
A framework for emulating non-volatile memory systemswith different performance characteristics,Dipanjan Sengupta; Qi Wang; Haris Volos; Ludmila Cherkasova; Jun Li; Guilherme Magalhaes; Karsten Schwan,Abstract Exponential increase of online data and a corresponding growth of data-centricapplications (Big Data analytics) forces system architects to revisit assumptions andrequirements of the future system design. New non-volatile memory (NVM) technologies;such as Phase-Change Memory (PCM) and HP Memristor offer significantly improvedlatency and power efficiency compared to flash and hard drives. Many future systems areexpected to have both DRAM and NVM. This can radically change system and softwaredesign; and enable new style of Big Data processing applications. However; the commercialunavailability of new NVMs technologies and uncertainty of their performance characteristicsmake it difficult to assess new system software stacks and to study their performance impacton future workloads. To bridge this gap and encourage an early design phase; we are …,Proceedings of the 6th ACM/SPEC International Conference on Performance Engineering,2015,13
Storage-class memory needs flexible interfaces,Haris Volos; Sankaralingam Panneerselvam; Sanketh Nalli; Michael M Swift,Abstract With low-latency storage-class memory; software can be a major contributor toaccess latency. To minimize latency; a file system architecture has to provide flexibility incustomizing the file system interface and semantics to application needs so as to cut downgeneric overheads. We have taken initial steps towards realizing such a design and presentpreliminary results.,Proceedings of the 4th Asia-Pacific Workshop on Systems,2013,6
Interconnect emulator for aiding performance analysis of distributed memory applications,Qi Wang; Ludmila Cherkasova; Jun Li; Haris Volos,Abstract Many modern large graph and Big Data processing applications operate ondatasets that do not fit into DRAM of a single machine. This leads to a design of scale-outapplications; where the application dataset is partitioned and processed by a cluster ofmachines. Distributed memory applications exhibit complex behavior: they tend to interleavecomputations and communications; use bursty transfers; and utilize global synchronizationprimitives. This makes it difficult to analyze the impact of communication layer on theapplication performance and answer the questions: how interconnect latency or bandwidthcharacteristics may change the application performance will the application performancescale when processed by a larger system? In this work; we introduce a novel emulationframework; called InterSense; which is implemented on top of existing high-speed …,Proceedings of the 7th ACM/SPEC on International Conference on Performance Engineering,2016,3
InterSense: Interconnect Performance Emulator for Future Scale-out Distributed Memory Applications,Qi Wang; Ludmila Cherkasova; Jun Li; Haris Volos,A common approach for improving application performance is to process its working set frommemory. For datasets that do not fit into DRAM of a single machine this leads to a design ofscale-out applications; where the application dataset is partitioned and processed by acluster of machines. Performance of distributed memory applications; implemented usingMPI (Message Passing Interface); inherently depends on performance of communicationlayer; which is largely defined by performance characteristics of underlying interconnect.During last couple years; many Big Data applications; eg; Hadoop; Spark; Memcached;were re-written to take advantage of Remote Direct Memory Access (RDMA) technology andRDMA-capable interconnects which provide fast and high-bandwidth communications. Theapplication analysis of potential performance improvements due to faster and higher …,Modeling; Analysis and Simulation of Computer and Telecommunication Systems (MASCOTS); 2015 IEEE 23rd International Symposium on,2015,3
Sparkle: optimizing spark for large memory machines and analytics,Mijung Kim; Jun Li; Haris Volos; Manish Marwah; Alexander Ulanov; Kimberly Keeton; Joseph Tucek; Lucy Cherkasova; Le Xu; Pradeep Fernando,Abstract: Spark is an in-memory analytics platform that targets commodity serverenvironments today. It relies on the Hadoop Distributed File System (HDFS) to persistintermediate checkpoint states and final processing results. In Spark; immutable data areused for storing data updates in each iteration; making it inefficient for long running; iterativeworkloads. A non-deterministic garbage collector further worsens this problem. Sparkle is alibrary that optimizes memory usage in Spark. It exploits large shared memory to achievebetter data shuffling and intermediate storage. Sparkle replaces the current TCP/IP-basedshuffle with a shared memory approach and proposes an off-heap memory store for efficientupdates. We performed a series of experiments on scale-out clusters and scale-upmachines. The optimized shuffle engine leveraging shared memory provides 1.3 x to 6x …,arXiv preprint arXiv:1708.05746,2017,2
Hands-off persistence system (HOPS),Swapnil Haria; Sanketh Nalli; MM Swift; MD Hill; H Volos; K Keeton,Page 1. Hands-Off Persistence System (HOPS) Swapnil Haria1; Sanketh Nalli1; Haris Volos2;Kim Keeton2; Mark D. Hill1; Mike M. Swift1 1 1 University of Wisconsin-Madison 2 Hewlett PackardLabs Page 2. WHISPER Analysis HOPS Design • 4% accesses to PM; 96% to DRAM 2 • 5-50epochs/transaction • Self-dependencies common • Cross-dependencies rare • Volatile memoryhierarchy (almost) unchanged • Order epochs without flushing • Allows multiple copies of samecacheline • Correct; conservative method based on coherence Page 3. Outline 3 Motivation HOPSDesign Evaluation PM HEAD C A B 0 0.2 0.4 0.6 0.8 1 1.2 1.4 1.6 1.8 ctree hashmap echo nstorevacation average N o rm a lize d S p e e d u p CLWB+Fence ? Page 4. ACID Transactions (currently)4 Acquire Lock Release Lock Prepare Log Entry 1 N Mutate Data Structure 1 N Commit TransactionFLUSH EPOCH FLUSH EPOCH FLUSH EPOCH …,Nonvolatile Memories Workshop,2017,2
Storage systems for storage-class memory,Haris Volos; Michael Swift,Emerging device technologies including phase-change-memory (PCM); spin-torgue transferRAM (STT-RAM) and memristors promise high-speed storage. These technologiescollectively are termed storage-class memory (SCM)[3] as data can be accessed throughordinary load/store instructions rather than through I/O requests. Hence; user-mode codecan access data directly; so there is no need for the OS to mediate every access.Furthermore; existing virtual memory hardware can protect access to individual data pages.The existing OS structure of file systems as a kernel-level service may no longer benecessary with storage class memory; and causes unneeded complexity and lowerperformance. We propose rewriting the storage stack to create a new flexible; high-performance storage architecture enabled by storage-class memory. While existing file …,Proc. of Annual Non-Volatile Memories Workshop (NVMW’11),2011,2
Revamping the system interface to storage-class memory,Haris Volos,Abstract Emerging storage-class memory (SCM) devices; such as phase-change memoryand memristors; provide the interface of memory but the persistence of disks. SCM promiseslow-latency storage; which can benefit modern applications ranging from desktopapplications that frequently flush data to stable storage; to large-scale web applications thatperform lots of dependent lookups such as social-network graphs. Existing operating-systeminterfaces; however; fail to expose the full capabilities of SCM. Under the current storagemodel; the OS mediates every access to storage for protection and to abstract details of thespecific storage device through a driver. This causes unneeded complexity and lowerperformance for SCM; which can be accessed directly through the memory interface ratherthan peripherally via I/O requests.,*,2012,1
Ordering updates for nonvolatile memory accesses,*,Abstract Examples relate to ordering updates for nonvolatile memory accesses. In someexamples; a first update that is propagated from a write-through processor cache of aprocessor is received by a write ordering buffer; where the first update is associated with afirst epoch. The first update is stored in a first buffer entry of the write ordering buffer. At thisstage; a second update that is propagated from the write-through processor cache isreceived; where the second update is associated with a second epoch. A second bufferentry of the write ordering buffer is allocated to store the second update. The first buffer entryand the second buffer entry can then be evicted to non-volatile memory in epoch order.,*,2018,*
Processing a query using transformed raw data,*,A transformation on raw data is applied to produce transformed data; where thetransformation includes at least one selected from among a summary of the raw data or atransform of the raw data between different domains. In response to a query to access data;the query is processed using the transformed data.,*,2017,*
Page modification,*,Systems and methods associated with page modification are disclosed. One examplemethod may be embodied on a non-transitory computer-readable medium storing computer-executable instructions. The instructions; when executed by a computer; may cause thecomputer to fetch a page to a buffer pool in a memory. The page may be fetched from atleast one of a log and a backup using single page recovery. The instructions may also causethe computer to store a modification of the page to the log. The modification may be stored tothe log as a log entry. The instructions may also cause the computer to evict the page frommemory when the page is replaced in the buffer pool. Page writes associated with theeviction may be elided.,*,2017,*
Structuring page images in a memory,*,Approaches for structuring a plurality of page images in-memory are described in variousexamples of the present disclosure. In one example; a unique page identifier provided withina reference page image is identified. The unique page identifier is associated with a targetpage image stored in-memory. Once identified; the page identifier associated with the targetpage image is replaced with a location specific identifier of the target page image; whereinthe location specific identifier is based on an in-memory location of the target page image.,*,2017,*
Lightweight persistent memory,Haris Volos; Andres Jaan Tack; Michael M Swift,Page 1. Haris Volos Andres Jaan Tack; Michael M. Swift University of Wisconsin – MadisonMnemosyne Lightweight Persistent Memory Page 2. Executive Summary • Storage-Class Memory(SCM) enables memory-like storage • Persistent Memory is an abstraction that enables directaccess to SCM • Durable memory transactions allow consistent in-place updates 2 Page 3.Technology Trends: SCM • Features –Memory-like interface (load/store) –Short access time(1000x faster than flash) –Non-volatile • Technologies –Phase Change Memory (PCM) –SpinTorque Transfer RAM (STT-RAM) –Memristors –Flash-backed DRAM (+ supercapacitor) 3 Page4. Application Trends: Low-latency storage • Web applications –Amazon –Facebook • Desktopapplications –Firefox • Other –Distributed agreement protocols –High-frequency trading 4 Page5. • Idea 1: File System –Layering overheads • Idea 2: Persistent Object Stores …,Proc of the 16th Int Conf on Architectural Support for Programming Languages and Operating Systems. New York: ACM,2011,*
Time Series Database,Henggang Cui; Kimberly Keeton; Indrajit Roy; Krishnamurthy Viswanathan; Haris Volos,CiteSeerX - Document Details (Isaac Councill; Lee Giles; Pradeep Teregowda): Find mostcorrelated range in {monitor0; yesterday} with {monitor1; 3am to 5am};.,*,2007,*
Aiding Performance Analysis of Distributed Memory Applications,Qi Wang; Ludmila Cherkasova; Jun Li; Haris Volos,*,*,*,*
