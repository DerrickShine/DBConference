The case for RAMClouds: scalable high-performance storage entirely in DRAM,John Ousterhout; Parag Agrawal; David Erickson; Christos Kozyrakis; Jacob Leverich; David Mazières; Subhasish Mitra; Aravind Narayanan; Guru Parulkar; Mendel Rosenblum; Stephen M Rumble; Eric Stratmann; Ryan Stutsman,Abstract Disk-oriented approaches to online storage are becoming increasingly problematic:they do not scale gracefully to meet the needs of large-scale Web applications; andimprovements in disk capacity have far outstripped improvements in access latency andbandwidth. This paper argues for a new approach to datacenter storage called RAMCloud;where information is kept entirely in DRAM and large-scale systems are created byaggregating the main memories of thousands of commodity servers. We believe thatRAMClouds can provide durable and available storage with 100-1000x the throughput ofdisk-based systems and 100-1000x lower access latency. The combination of low latencyand large scale will enable a new breed of dataintensive applications.,ACM SIGOPS Operating Systems Review,2010,472
Fast crash recovery in RAMCloud,Diego Ongaro; Stephen M Rumble; Ryan Stutsman; John Ousterhout; Mendel Rosenblum,Abstract RAMCloud is a DRAM-based storage system that provides inexpensive durabilityand availability by recovering quickly after crashes; rather than storing replicas in DRAM.RAMCloud scatters backup data across hundreds or thousands of disks; and it harnesseshundreds of servers in parallel to reconstruct lost data. The system uses a log-structuredapproach for all its data; in DRAM as well as on disk: this provides high performance bothduring normal operation and during recovery. RAMCloud employs randomized techniquesto manage the system in a scalable and decentralized fashion. In a 60-node cluster;RAMCloud recovers 35 GB of data from a failed server in 1.6 seconds. Our measurementssuggest that the approach will scale to recover larger memory sizes (64 GB or more) in lesstime with larger clusters.,Proceedings of the Twenty-Third ACM Symposium on Operating Systems Principles,2011,274
The case for RAMCloud,John Ousterhout; Parag Agrawal; David Erickson; Christos Kozyrakis; Jacob Leverich; David Mazières; Subhasish Mitra; Aravind Narayanan; Diego Ongaro; Guru Parulkar; Mendel Rosenblum; Stephen M Rumble; Eric Stratmann; Ryan Stutsman,For the past four decades magnetic disks have been the primary storage location for online informationin computer systems. Over that period; disk technology has undergone dramatic improvementswhile being harnessed by higher-level storage systems (such as file systems and relationaldatabases). However; disk performance has not improved as quickly as disk capacity; and developersfind it increasingly difficult to scale disk-based systems to meet the needs of large-scale Webapplications. Many computer scientists have proposed new approaches to disk-based storageas a solution; and others have suggested replacing disks with flash memory devices. Incontrast; we say the solution is to shift the primary locus of online data from disk to DRAM; withdisk relegated to a backup/archival role … A new class of storage called RAMCloud will providethe storage substrate for many future applications. RAMCloud stores all of its information …,Communications of the ACM,2011,154
Energy management in mobile devices with the cinder operating system,Arjun Roy; Stephen M Rumble; Ryan Stutsman; Philip Levis; David Mazières; Nickolai Zeldovich,Abstract We argue that controlling energy allocation is an increasingly useful and importantfeature for operating systems; especially on mobile devices. We present two new low-levelabstractions in the Cinder operating system; reserves and taps; which store and distributeenergy for application use. We identify three key properties of control--isolation; delegation;and subdivision--and show how using these abstractions can achieve them. We also showhow the architecture of the HiStar information-flow control kernel lends itself well to energycontrol. We prototype and evaluate Cinder on a popular smartphone; the Android G1.,Proceedings of the sixth conference on Computer systems,2011,134
It's Time for Low Latency.,Stephen M Rumble; Diego Ongaro; Ryan Stutsman; Mendel Rosenblum; John K Ousterhout,Abstract The operating systems community has ignored network latency for too long. In thepast; speed-of-light delays in wide area networks and unoptimized network hardware havemade sub-100is round-trip times impossible. However; in the next few years datacenters willbe deployed with low-latency Ethernet. Without the burden of propagation delays in thedatacenter campus and network delays in the Ethernet devices; it will be up to us to finishthe job and see this benefit through to applications. We argue that OS researchers must leadthe charge in rearchitecting systems to push the boundaries of lowlatency datacentercommunication. 5-10is remote procedure calls are possible in the short term–two orders ofmagnitude better than today. In the long term; moving the network interface on to the CPUcore will make 1is times feasible.,HotOS,2011,126
The RAMCloud storage system,John Ousterhout; Arjun Gopalan; Ashish Gupta; Ankita Kejriwal; Collin Lee; Behnam Montazeri; Diego Ongaro; Seo Jin Park; Henry Qin; Mendel Rosenblum; Stephen Rumble; Ryan Stutsman; Stephen Yang,Abstract RAMCloud is a storage system that provides low-latency access to large-scaledatasets. To achieve low latency; RAMCloud stores all data in DRAM at all times. To supportlarge capacities (1PB or more); it aggregates the memories of thousands of servers into asingle coherent key-value store. RAMCloud ensures the durability of DRAM-based data bykeeping backup copies on secondary storage. It uses a uniform log-structured mechanism tomanage both DRAM and secondary storage; which results in high performance and efficientmemory usage. RAMCloud uses a polling-based approach to communication; bypassing thekernel to communicate directly with NICs; with this approach; client applications can readsmall objects from any RAMCloud storage server in less than 5μs; durable writes of smallobjects take about 13.5μs. RAMCloud does not keep multiple copies of data online; …,ACM Transactions on Computer Systems (TOCS),2015,78
Copysets: Reducing the Frequency of Data Loss in Cloud Storage.,Asaf Cidon; Stephen M Rumble; Ryan Stutsman; Sachin Katti; John K Ousterhout; Mendel Rosenblum,ABSTRACT Random replication is widely used in data center storage systems to preventdata loss. However; random replication is almost guaranteed to lose data in the commonscenario of simultaneous node failures due to cluster-wide power outages. Due to the highfixed cost of each incident of data loss; many data center operators prefer to minimize thefrequency of such events at the expense of losing more data in each event. We presentCopyset Replication; a novel generalpurpose replication technique that significantly reducesthe frequency of data loss events. We implemented and evaluated Copyset Replication ontwo open source data center storage systems; HDFS and RAMCloud; and show it incurs alow overhead on all operations. Such systems require that each node's data be scatteredacross several nodes for parallel data recovery and access. Copyset Replication presents …,Usenix Annual Technical Conference,2013,75
Translation-based steganography,Christian Grothoff; Krista Grothoff; Ludmila Alkhutova; Ryan Stutsman; Mikhail Atallah,Abstract This paper investigates the possibilities of steganographically embeddinginformation in the “noise” created by automatic translation of natural language documents.Because the inherent redundancy of natural language creates plenty of room for variation intranslation; machine translation is ideal for steganographic applications. Also; because thereare frequent errors in legitimate automatic text translations; additional errors inserted by aninformation hiding mechanism are plausibly undetectable and would appear to be part of thenormal noise associated with translation. Significantly; it should be extremely difficult for anadversary to determine if inaccuracies in the translation are caused by the use ofsteganography or by deficiencies of the translation software.,International Workshop on Information Hiding,2005,68
Lost in just the translation,Ryan Stutsman; Christian Grothoff; Mikhail Atallah; Krista Grothoff,Abstract This paper describes the design and implementation of a scheme for hidinginformation in translated natural language text; and presents experimental results using theimplemented system. Unlike the previous work; which required the presence of both thesource and the translation; the protocol presented in this paper requires only the translatedtext for recovering the hidden message. This is a significant improvement; as transmitting thesource text was both wasteful of resources and less secure. The security of the system isnow improved not only because the source text is no longer available to the adversary; butalso because a broader repertoire of defenses (such as mixing human and machinetranslation) can now be used.,Proceedings of the 2006 ACM symposium on Applied computing,2006,56
Apprehending joule thieves with cinder,Stephen M Rumble; Ryan Stutsman; Philip Levis; David Mazières; Nickolai Zeldovich,Abstract Energy is the critical limiting resource to mobile computing devices.Correspondingly; an operating system must track; provision; and ration how applicationsconsume energy. The emergence of third-party application stores and marketplaces makesthis concern even more pressing. A third-party application must not deny service throughexcessive; unforeseen energy expenditure; whether accidental or malicious. Previousresearch has shown promise in tracking energy usage and rationing it to meet devicelifetime goals; but such mechanisms and policies are still nascent; especially regarding userinteraction. We argue for a new operating system; called Cinder; which builds on top of theHiStar OS. Cinder's energy awareness is based on hierarchical capacitors and task profiles.We introduce and explore these abstractions; paying particular attention to the ways in …,ACM SIGCOMM Computer Communication Review,2010,34
Delegating network security with more information,Jad Naous; Ryan Stutsman; David Mazieres; Nick McKeown; Nickolai Zeldovich,Abstract Network security is gravitating towards more centralized control. Strongcentralization places a heavy burden on the administrator who has to manage complexsecurity policies and be able to adapt to users' requests. To be able to cope; theadministrator needs to delegate some control back to end-hosts and users; a capability thatis missing in today's networks. Delegation makes administrators less of a bottleneck whenpolicy needs to be modified and allows network administration to follow organizational lines.To enable delegation; we propose ident++-a simple protocol to request additionalinformation from end-hosts and networks on the path of a flow. ident++ allows users and end-hosts to participate in network security enforcement by providing information that theadministrator might not have or rules to be enforced on their behalf. In this paper we …,Proceedings of the 1st ACM workshop on Research on enterprise networking,2009,27
High performance transactions in deuteronomy,Justin Levandoski; David Lomet; Sudipta Sengupta; Ryan Stutsman; Rui Wang,Abstract The Deuteronomy architecture provides a clean separation of transactionfunctionality (performed in a transaction component; or TC) from data managementfunctionality (performed in a data component; or DC). In prior work we implemented both aTC and DC that achieved modest performance. We recently built a high performance DC(the Bw-tree key value store) that achieves very high performance on modern hardware andis currently shipping as an indexing and storage layer in a number of Microsoft systems. Thisnew DC executes operations more than 100× faster than the TC we previously implemented.This paper describes how we achieved two orders of magnitude speedup in TCperformance and shows that a full Deuteronomy stack can achieve very high performanceoverall. Importantly; the resulting full stack is a system that caches data residing on …,*,2015,26
To lock; swap; or elide: on the interplay of hardware transactional memory and lock-free indexing,Darko Makreshanski; Justin Levandoski; Ryan Stutsman,Abstract The release of hardware transactional memory (HTM) in commodity CPUs hasmajor implications on the design and implementation of main-memory databases; especiallyon the architecture of high-performance lock-free indexing methods at the core of several ofthese systems. This paper studies the interplay of HTM and lock-free indexing methods.First; we evaluate whether HTM will obviate the need for crafty lock-free index designs byintegrating it in a traditional B-tree architecture. HTM performs well for simple data sets withsmall fixed-length keys and payloads; but its benefits disappear for more complex scenarios(eg; larger variable-length keys and payloads); making it unattractive as a general solutionfor achieving high performance. Second; we explore fundamental differences between HTM-based and lock-free B-tree designs. While lock-freedom entails design complexity and …,Proceedings of the VLDB Endowment,2015,20
Translation-based steganography,Christian Grothoff; Krista Grothoff; Ryan Stutsman; Ludmila Alkhutova; Mikhail Atallah,Abstract This paper investigates systems that steganographically embed information in the“noise” created by automatic translation of natural language documents. The main thrust ofthe work focuses on two problems–generation of plausible steganographic texts andavoiding transmission of the original source for stego objects. Because the inherentredundancy of natural language creates plenty of room for variation in translation; machinetranslation is ideal for steganographic applications. We describe the design andimplementation of a scheme for hiding information in translated natural language text andpresent experimental results using the implemented system. While the initial work in thisvein required the presence of both the source and the translation; the system detailed in thispaper requires only the translated text for recovering the hidden message; increasing …,Journal of Computer Security,2009,12
Durability and crash recovery in distributed in-memory storage systems,Ryan Scott Stutsman,Abstract This dissertation presents fast crash recovery for the RAMCloud distributed in-memory data center storage system. RAMCloud is designed to operate on thousands or tens-of-thousands of machines; and it stores all data in DRAM. Rather than replicating in DRAMfor redundancy; it provides inexpensive durability and availability by recovering quickly afterserver crashes. Overall; its goal is to reconstitute the entire DRAM contents of a server and torestore full performance to the cluster in 1 to 2 seconds after failures. Consequently;RAMCloud provides continuous availability by recovering from failures so quickly thatapplications never notice failures. The guiding design principle behind fast recovery isleveraging scale. RAMCloud scatters backup data across thousands of disks; and itharnesses hundreds of servers in parallel to reconstruct lost data. The system uses a …,*,2013,11
Multi-version range concurrency control in Deuteronomy,Justin Levandoski; David Lomet; Sudipta Sengupta; Ryan Stutsman; Rui Wang,Abstract The Deuteronomy transactional key value store executes millions of serializabletransactions/second by exploiting multi-version timestamp order concurrency control.However; it has not supported range operations; only individual record operations (eg;create; read; update; delete). In this paper; we enhance our multi-version timestamp ordertechnique to handle range concurrency and prevent phantoms. Importantly; we maintainhigh performance while respecting the clean separation of duties required by Deuteronomy;where a transaction component performs purely logical concurrency control (including rangesupport); while a data component performs data storage and management duties. Like therest of the Deuteronomy stack; our range technique manages concurrency information in alatch-free manner. With our range enhancement; Deuteronomy can reach scan speeds of …,Proceedings of the VLDB Endowment,2015,10
High performance transactions in database management systems,*,A transaction engine includes a multi-version concurrency control (MVCC) module thataccesses a latch-free hash table that includes respective hash table entries that includerespective buckets of respective bucket items. The bucket items represent respectiverecords; the respective bucket items each including a value indicating a temporal mostrecent read time of the item and a version list of descriptions that describe respectiveversions of the respective records; the MVCC module performing timestamp orderconcurrency control; using the latch-free hash table. Recovery log buffers may be used ascache storage for the transaction engine.,*,2016,8
Experience with Rules-Based Programming for Distributed; Concurrent; Fault-Tolerant Code.,Ryan Stutsman; Collin Lee; John K Ousterhout,Abstract This paper describes how a rules-based approach allowed us to solve a broadclass of challenging distributed system problems in the RAMCloud storage system. In therules-based approach; behavior is described with small sections of code that triggerindependently based on system state; this provides a clean separation between thedeterministic and nondeterministic parts of an algorithm. To simplify the implementation ofrules-based modules; we developed a task abstraction for information hiding and complexitymanagement; pools for grouping tasks and minimizing the cost of rule evaluation; and apollingbased asynchronous RPC system. The rules-based approach is a special case of anevent-based state machine; but it encourages a cleaner factoring of code.,USENIX Annual Technical Conference,2015,8
Toward Common Patterns for Distributed; Concurrent; Fault-Tolerant Code.,Ryan Stutsman; John K Ousterhout,Abstract There are no widely accepted design patterns for writing distributed; concurrent;fault-tolerant code. Each programmer develops her own techniques for writing this type ofcomplex software. The use of a common pattern for fault-tolerant programming has thepotential to produce correct code more quickly and increase shared understanding betweendevelopers. We describe rules; tasks; and pools; patterns extracted from the development ofRAMCloud; a fault-tolerant datacenter storage system. We illustrate their application anddiscuss their relationship to concurrent programming models. Our goal is to generatediscussion that will ultimately lead to common techniques for fault-tolerant programming.,HotOS,2013,7
Information Hiding,Mauro Barni; Jordi Herrera Joancomartí,*,*,2005,6
Memshare: a Dynamic Multi-tenant Key-value Cache,Asaf Cidon; Daniel Rushton; Stephen M Rumble; Ryan Stutsman,Abstract Web application performance heavily relies on the hit rate of DRAM key-valuecaches. Current DRAM caches statically partition memory across applications that share thecache. This results in under utilization and limits cache hit rates. We present Memshare; aDRAM key-value cache that dynamically manages memory across applications. Memshareprovides a resource sharing model that guarantees reserved memory to differentapplications while dynamically pooling and sharing the remaining memory to optimizeoverall hit rate. Key-value caches are typically memory capacity bound; which leaves cacheserver CPU and memory bandwidth idle. Memshare leverages these resources with alogstructured design that allows it to provide better hit rates than conventional caches bydynamically re-partitioning memory among applications. We implemented Memshare and …,2017 USENIX Annual Technical Conference (USENIX ATC 17),2017,5
To Copy or Not to Copy: Making In-Memory Databases Fast on Modern NICs,Aniraj Kesavan; Robert Ricci; Ryan Stutsman,Abstract When databases resided primarily on disks; the problem of data layout was focusedon structures that enabled efficient reads and writes from that medium; as well the aseffective use of main memory as a cache. With in-memory databases; this part of the I/Oproblem is largely gone; but that does not mean that I/O considerations can be completelyignored. We argue for the importance of considering the “other” side of the I/O equation—network communication with clients—when designing in-memory databases. Modern NICsinclude a number of optimizations intended to improve I/O performance; including kernelbypass; zero-copy and scatter-gather DMA. Applied carefully; these features can reduce theinvolvement of the CPU in network transfers and can save memory bandwidth. However; ourexperiments show that some optimizations do not always provide a benefit in a database …,*,2016,4
Toward rigorous design of domain-specific distributed systems,Mohammed Al-Mahfoudh; Ganesh Gopalakrishnan; Ryan Stutsman,Abstract The advent of data center; cloud computing and IoT has thrust distributed systemsbuilding into the programming mainstream. Building correct distributed systems isnotoriously hard; yet today's developers have little training and few tools to aid them inreasoning about these complex systems. To that end; we present DS2--a domain-specificlanguage and integrated framework for specifying; synthesizing; and reasoning. The DS2language is parsimonious; and comes with an operational semantics that lends semanticclarity and enables formal analysis. A variety of techniques for model exploration; activetesting; and synthesis of detailed implementations from higher level specifications are beingdeveloped. This paper details these aspects of DS2 and provides a roadmap of its evolution.,Proceedings of the 4th FME Workshop on Formal Methods in Software Engineering,2016,3
RAMCloud: Scalable high-performance storage entirely in DRAM,John Ousterhout,Page 1. RAMCloud: Scalable High-Performance Storage Entirely in DRAM John OusterhoutStanford University (with Nandu Jayakumar; Diego Ongaro; Mendel Rosenblum; Stephen Rumble;and Ryan Stutsman) Page 2. DRAM in Storage Systems March 28; 2011 RAMCloud Slide 21970 1980 1990 2000 2010 UNIX buffer cache Main-memory databases Large file caches Webindexes entirely in DRAM memcached Facebook: 200 TB total data 150 TB cache! Main-memoryDBs; again Page 3. DRAM in Storage Systems ● DRAM usage limited/specialized ● Clumsy(consistency with backing store) ● Lost performance (cache misses; backing store) March 28;2011 RAMCloud Slide 3 1970 1980 1990 2000 2010 UNIX buffer cache Main-memory databasesLarge file caches Web indexes entirely in DRAM memcached Facebook: 200 TB total data 150TB cache! Main-memory DBs; again Page 4 …,*,2009,2
Flashield: a key-value cache that minimizes writes to flash,Assaf Eisenman; Asaf Cidon; Evgenya Pergament; Or Haimovich; Ryan Stutsman; Mohammad Alizadeh; Sachin Katti,Abstract: As its price per bit drops; SSD is increasingly becoming the default storage mediumfor cloud application databases. However; it has not become the preferred storage mediumfor key-value caches; even though SSD offers more than 10x lower price per bit andsufficient performance compared to DRAM. This is because key-value caches need tofrequently insert; update and evict small objects. This causes excessive writes and erasureson flash storage; since flash only supports writes and erasures of large chunks of data.These excessive writes and erasures significantly shorten the lifetime of flash; rendering itimpractical to use for key-value caches. We present Flashield; a hybrid key-value cache thatuses DRAM as a" filter" to minimize writes to SSD. Flashield performs light-weight machinelearning profiling to predict which objects are likely to be read frequently before getting …,arXiv preprint arXiv:1702.02588,2017,1
Rocksteady: Fast Migration for Low-latency In-memory Storage,Chinmay Kulkarni; Aniraj Kesavan; Tian Zhang; Robert Ricci; Ryan Stutsman,Abstract Scalable in-memory key-value stores provide low-latency access times of a fewmicroseconds and perform millions of operations per second per server. With all data inmemory; these systems should provide a high level of reconfigurability. Ideally; they shouldscale up; scale down; and rebalance load more rapidly and flexibly than disk-basedsystems. Rapid reconfiguration is especially important in these systems since a) DRAM isexpensive and b) they are the last defense against highly dynamic workloads that suffer fromhot spots; skew; and unpredictable load. However; so far; work on in-memory key-valuestores has generally focused on performance and availability; leaving reconfiguration as asecondary concern. We present Rocksteady; a live migration technique for the RAMCloudscale-out in-memory key-value store. It balances three competing goals: it migrates data …,Proceedings of the Twenty-Sixth ACM Symposium on Operating Systems Principles,2017,1
Controlling atomic updates of indexes using hardware transactional memory,*,A current state of one or more entries in a mapping table that are associated with latch-freeupdates of a data structure that uses indirection mapping tables is accessed. Atransformation of the current state of the one or more entries in the mapping table to atransformed state of the entries in the mapping table; is controlled. The controlling includesinitiating an atomic multi-word compare-and-swap (MWCAS) operation on a plurality ofwords using a hardware transactional memory (HTM) resident in a device processor; andthe MWCAS operation is performed using hardware primitive operations of the HTM; via thedevice processor. A transformation of a current state of the data structure to an updated stateof the data structure; is controlled; via the transformation of the current state of the one ormore entries in the mapping table to the transformed state of the entries in the mapping …,*,2016,1
Data Engineering,Divy Agrawal; Amr El Abbadi; Kenneth Salem; Manuel Bravo; Nuno Diegues; Jingna Zeng; Paolo Romano; Luıs Rodrigues; Philip A Bernstein; Sudipto Das; Justin Levandoski; Sudipta Sengupta; Ryan Stutsman; Rui Wang; Tudor-Ioan Salomie; Gustavo Alonso; Bettina Kemme; Ivan Brondino; José Pereira; Ricardo Vilaça; Francisco Cruz; Rui Oliveira; Yousuf Ahmad,Members of the Technical Committee on Data Engineering (TCDE) have voted for a newTCDE. The turnout for the election was higher than in past elections; which demonstrates; Ithink; two things. One; past TCDE Chair Kyu-Young Whang's initiative to enlargemembership has resulted in a larger overall TCDE membership; and hence a largerelectorate. Two; we had two strong candidates in Xiaofang Zhou and Erich Neuhold; whichgenerate more interest than in the past. The outcome is that Xiaofang Zhou is the new chairof the TCDE. I want to congratulate Xiaofang on his election victory. I am confident thatXiaofang will be a fine TCDE chair; and I look forward to working with him going forward.Xiaofang's letter as TC Chair appears on page 2 of the current issue. The TCDE Chair is theone empowered to appoint the TCDE Executive Committee. The new committee is shown …,*,1995,1
anexVis: Visual analytics framework for analysis of RNA expression,Diem-Trang Tran; Tian Zhang; Ryan Stutsman; Matthew Might; Umesh R Desai; Balagurunathan Kuberan; Alfonso Valencia,Abstract Although RNA expression data are accumulating at a remarkable speed; gaininginsights from them still requires laborious analyses which hinder many biological andbiomedical researchers. This report introduces a visual analytics framework that appliesseveralwell-known visualization techniques to leverage understanding of an RNAexpression data set. Our analyses on glycosaminoglycan (GAG)-related genes havedemonstrated the broad application of this tool; anexVis (an alysis of RNA ex pression); toadvance the understanding of tissue-specific GAG regulation and functions; and potentiallyother biological pathways.,Bioinformatics,2018,*
Tailwind: fast and atomic RDMA-based replication,Yacine Taleb; Ryan Stutsman; Gabriel Antoniu; Toni Cortes,Replication is essential for fault-tolerance; but it is also a source of high overhead. Somerecent in-memory systems use remote direct memory accesses (RDMA) to create redundantcopies of data in remote memory. RDMA is attractive; since it is low-latency; high-throughput;and has no CPU overhead at the target. However; even with RDMA; no existing replicationprotocol avoids redundant data copying and target-side work. Backup servers may receiveupdates via RDMA; but they must actively incorporate the updates into replicas to updatebackup data structures and to ensure that only fully received messages are applied. In thispaper; we present Tailwind; a zero-copy recovery log replication protocol for scale-out in-memory databases. Tailwind is the first replication protocol that eliminates all CPU-drivendata copying and fully bypasses target server CPUs for data replication. In Tailwind; all …,*,2018,*
Echo: A reliable distributed cellular core network for public clouds,Binh Nguyen; Tian Zhang; Bozidar Radunovic; Ryan Stutsman; Thomas Karagiannis; Jakub Kocur; Jacobus Van der Merwe,ABSTRACT Economies of scale associated with public cloud platforms offer flexibility andcost-effectiveness; resulting in various services and businesses moving to the cloud. Onearea with little progress is cellular core networks. A cellular core network manages states ofcellular clients; it is essentially a large distributed state machine with very differentvirtualization challenges compared to typical cloud services. In this paper we present anovel cellular core network architecture; called ECHO 1; particularly suited to public clouddeployments; where the availability guarantees might be an order of magnitude worsecompared to existing (redundant) hardware platforms. We present the design andimplementation of our approach and evaluate its functionality on a public cloud platform.,In submission,2017,*
JavaScript for Extending Low-latency In-memory Key-value Stores,Tian Zhang; Ryan Stutsman,Abstract Large scale in-memory key-value stores like RAMCloud can perform millions ofoperations per second per server with a few microseconds of access latency. However;these systems often only provide simple feature sets; and the lack of extensibility is anobstacle for building higher-level services. We evaluate the possibility of using JavaScript forshipping computation to data and for extending database functionality by comparing againstother possible approaches. Microbenchmarks are promising; the V8 JavaScript runtimeprovides near native performance with reduced isolation costs when compared with nativecode and hardware-based protections. We conclude with initial thoughts on how thistechnology can be deployed for fast procedures that operate on in-memory data; thatmaximize gains from JIT; and that exploit the kernelbypass DMA capabilities of modern …,HotCloud,2017,*
Beyond Simple Request Processing with RAMCloud.,Chinmay Kulkarni; Aniraj Kesavan; Robert Ricci; Ryan Stutsman,Abstract RAMCloud is a scale-out data center key-value store designed to aggregate theDRAM of thousands of machines into petabytes of storage with low 5 µs access times.RAMCloud was an early system in the space of low-latency RDMA-based storage systems.Today; it stands as one of the most complete examples of a scalable low-latency store; it hasfeatures like distributed recovery; low fragmentation through a specialized parallel garbagecollector; migration; secondary indexes; and transactions. This article examines RAMCloud'skey networking and dispatch decisions; and it explains how they differ from other systems.For example; unlike many systems; RAMCloud does not use one-sided RDMA operations;and it does not partition data across cores to eliminate dispatch and locking overheads. Weexplain how major RAMCloud functionality still exploits modern hardware while retaining …,IEEE Data Eng. Bull.,2017,*
Toward Bringing Distributed System Design upon Rigorous Footing,Mohammed S Al-Mahfoudh; Ganesh Gopalakrishnan; Ryan Stutsman,The development of distributed systems based on poorly specified abstractions can hinderunambiguous understanding and the creation of common formal analysis methods. In thispaper; we outline the design of a system modeling language called DS2; and point out howits primitives are well matched with concerns that naturally arise during distributed systemdesign. We present an operational semantics for DS2 as well as results from an ongoingScala-based implementation slated to support a variety of state-space explorationtechniques. The driving goals of this project are to:(1) provide a prototyping framework withinwhich complex distributed system protocols can be stated and modeled without breaking theprimitives down to low level ones; and (2) drive the development of interesting anddistributed system-relevant property checking methods (eg; linearizability).,Information Reuse and Integration (IRI); 2016 IEEE 17th International Conference on,2016,*
Operational Semantics for the Rigorous Analysis of Distributed Systems,Mohammed S Al-Mahfoudh; Ganesh Gopalakrishnan; Ryan Stutsman,Abstract The development of distributed systems based on poorly specified abstractions canhinder unambiguous understanding and the creation of common formal analysis methods. Inthis paper; we outline the design of a system modeling language called DS2; and point outhow its primitives are well matched with concerns that naturally arise during distributedsystem design. We present an operational semantics for DS2 as well as results from anongoing Scala-based implementation slated to support a variety of state-space explorationtechniques. The driving goals of this project are to:(1) provide a prototyping framework withinwhich complex distributed system protocols can be stated and modeled without breaking theprimitives down to low level ones; and (2) drive the development of interesting anddistributed system-relevant property checking methods (eg; linearizability).,*,2016,*
Transaction Processing Techniques for Modern Hardware and the Cloud.,Justin J Levandoski; Sudipta Sengupta; Ryan Stutsman; Rui Wang,Abstract The Deuteronomy architecture provides a clean separation of transactionfunctionality (performed in a transaction component; or TC) from data storage functionality(performed in a data component; or DC). For the past couple of years; we have beenrethinking the implementation of both the TC and DC in order for them to perform as well; orbetter than; current high-performance database systems. The result of this work so far hasbeen a high-performance DC (the Bw-tree key value store) that currently ships in severalMicrosoft systems (the Hekaton main-memory database; Azure DocumentDB; and Bing).More recently; we have been completing the performance story by redesigning the TC. Weare driven by two main design goals:(1) ensure high performance in various deploymentscenarios; regardless of whether the TC and DC are co-located or distributed and (2) take …,IEEE Data Eng. Bull.,2015,*
Data Engineering,Abdallah Salama; Carsten Binnig; Tim Kraska; Ansgar Scherp; Tobias Ziegler; Animesh Trivedi Stuedi; Jonas Pfefferle; Radu Stoica; Bernard Metzler; Nikolas Ioannou; Ioannis Koltsidas; Xiaoyi Lu; Dipti Shankar; Dhabaleswar K DK Panda; Chinmay Kulkarni; Aniraj Kesavan; Robert Ricci; Ryan Stutsman,The Technical Committee on Data Engineering held an election last fall for chair of the TC.The voting deadline was December 22 of last year. The candidates were Xiaofang Zhou andErich Neuhold. My thanks both candidates for being willing to run. Being chair of theTechnical Committee is largely invisible; but it is an important responsibility for the successof the data engineering community. The winner; with 69% of the vote is the current chair;Xiaofang Zhou; who has now won his second term. Congratulations to Xiaofang for hiselectoral victory. Xiaofang knows what the job entails; is experienced in doing it; and does itwell. I very much appreciate Xiaofang's efforts and his continued involvement; both at theTCDE and at the Computer Society more widely.,*,*,*
Translation-based Steganography,Ludmila Alkhutova; Ryan Stutsman; Mikhail Atallah,Abstract. This paper investigates the possibilities of steganographically embeddinginformation in the “noise” created by automatic translation of natural language documents.Because the inherent redundancy of natural language creates plenty of room for variation intranslation; machine translation is ideal for steganographic applications. Also; because thereare frequent errors in legitimate automatic text translations; additional errors inserted by aninformation hiding mechanism are plausibly undetectable and would appear to be part of thenormal noise associated with translation. Significantly; it should be extremely difficult for anadversary to determine if inaccuracies in the translation are caused by the use ofsteganography or by deficiencies of the translation software.,*,*,*
Lost in Translation: Translation-based Steganography,Christian Grothoff; Krista Grothoff; Ludmila Alkhutova; Ryan Stutsman; Mikhail Atallah,Christian Grothoff; Krista Grothoff; Ludmila Alkhutova; Ryan Stutsman and Mikhail Atallah{christian; krista}@ grothoff. org;{lalkhuto; rstutsma}@ purdue. edu; mja@ cs. purdue. edu “...because as we know; there are known knowns; there are things we know we know. We alsoknow there are known unknowns; that is to say we know there are some things we do notknow. But there are also unknown unknowns–the ones we don't know we don't know.”http://www. cs. purdue. edu/homes/rstutsma/stego/ 1,*,*,*
CERIAS Tech Report 2005-39 TRANSLATION-BASED STEGANOGRAPHY,C Grothoff; K Grothoff; L Alkhutova; R Stutsman; M Atallah,*,*,*,*
